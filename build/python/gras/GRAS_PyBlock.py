# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GRAS_PyBlock', [dirname(__file__)])
        except ImportError:
            import _GRAS_PyBlock
            return _GRAS_PyBlock
        if fp is not None:
            try:
                _mod = imp.load_module('_GRAS_PyBlock', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _GRAS_PyBlock = swig_import_helper()
    del swig_import_helper
else:
    import _GRAS_PyBlock
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GRAS_PyBlock.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _GRAS_PyBlock.SwigPyIterator_value(self)
    def incr(self, n = 1): return _GRAS_PyBlock.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _GRAS_PyBlock.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _GRAS_PyBlock.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _GRAS_PyBlock.SwigPyIterator_equal(self, *args)
    def copy(self): return _GRAS_PyBlock.SwigPyIterator_copy(self)
    def next(self): return _GRAS_PyBlock.SwigPyIterator_next(self)
    def __next__(self): return _GRAS_PyBlock.SwigPyIterator___next__(self)
    def previous(self): return _GRAS_PyBlock.SwigPyIterator_previous(self)
    def advance(self, *args): return _GRAS_PyBlock.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _GRAS_PyBlock.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _GRAS_PyBlock.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _GRAS_PyBlock.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _GRAS_PyBlock.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _GRAS_PyBlock.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _GRAS_PyBlock.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _GRAS_PyBlock.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import gras.GRAS_Element
class TagIter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TagIter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TagIter, name)
    __repr__ = _swig_repr
    def __iter__(self):
        for i in range(len(self)):
            yield self[i]

    def __len__(self, *args): return _GRAS_PyBlock.TagIter___len__(self, *args)
    def __getitem__(self, *args): return _GRAS_PyBlock.TagIter___getitem__(self, *args)
    def __init__(self): 
        this = _GRAS_PyBlock.new_TagIter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _GRAS_PyBlock.delete_TagIter
    __del__ = lambda self : None;
TagIter_swigregister = _GRAS_PyBlock.TagIter_swigregister
TagIter_swigregister(TagIter)

import gras.GRAS_Block
import gras.GRAS_Tags
import gras.GRAS_SBuffer
class PyObjectRefHolder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyObjectRefHolder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyObjectRefHolder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _GRAS_PyBlock.new_PyObjectRefHolder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _GRAS_PyBlock.delete_PyObjectRefHolder
    __del__ = lambda self : None;
    __swig_setmethods__["o"] = _GRAS_PyBlock.PyObjectRefHolder_o_set
    __swig_getmethods__["o"] = _GRAS_PyBlock.PyObjectRefHolder_o_get
    if _newclass:o = _swig_property(_GRAS_PyBlock.PyObjectRefHolder_o_get, _GRAS_PyBlock.PyObjectRefHolder_o_set)
PyObjectRefHolder_swigregister = _GRAS_PyBlock.PyObjectRefHolder_swigregister
PyObjectRefHolder_swigregister(PyObjectRefHolder)

class BlockPython(gras.GRAS_Block.Block):
    __swig_setmethods__ = {}
    for _s in [gras.GRAS_Block.Block]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockPython, name, value)
    __swig_getmethods__ = {}
    for _s in [gras.GRAS_Block.Block]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlockPython, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == BlockPython:
            _self = None
        else:
            _self = self
        this = _GRAS_PyBlock.new_BlockPython(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _GRAS_PyBlock.delete_BlockPython
    __del__ = lambda self : None;
    def _Py_notify_active(self): return _GRAS_PyBlock.BlockPython__Py_notify_active(self)
    def _Py_notify_inactive(self): return _GRAS_PyBlock.BlockPython__Py_notify_inactive(self)
    def _Py_notify_topology(self, *args): return _GRAS_PyBlock.BlockPython__Py_notify_topology(self, *args)
    __swig_setmethods__["_input_addrs"] = _GRAS_PyBlock.BlockPython__input_addrs_set
    __swig_getmethods__["_input_addrs"] = _GRAS_PyBlock.BlockPython__input_addrs_get
    if _newclass:_input_addrs = _swig_property(_GRAS_PyBlock.BlockPython__input_addrs_get, _GRAS_PyBlock.BlockPython__input_addrs_set)
    __swig_setmethods__["_input_sizes"] = _GRAS_PyBlock.BlockPython__input_sizes_set
    __swig_getmethods__["_input_sizes"] = _GRAS_PyBlock.BlockPython__input_sizes_get
    if _newclass:_input_sizes = _swig_property(_GRAS_PyBlock.BlockPython__input_sizes_get, _GRAS_PyBlock.BlockPython__input_sizes_set)
    __swig_setmethods__["_output_addrs"] = _GRAS_PyBlock.BlockPython__output_addrs_set
    __swig_getmethods__["_output_addrs"] = _GRAS_PyBlock.BlockPython__output_addrs_get
    if _newclass:_output_addrs = _swig_property(_GRAS_PyBlock.BlockPython__output_addrs_get, _GRAS_PyBlock.BlockPython__output_addrs_set)
    __swig_setmethods__["_output_sizes"] = _GRAS_PyBlock.BlockPython__output_sizes_set
    __swig_getmethods__["_output_sizes"] = _GRAS_PyBlock.BlockPython__output_sizes_get
    if _newclass:_output_sizes = _swig_property(_GRAS_PyBlock.BlockPython__output_sizes_get, _GRAS_PyBlock.BlockPython__output_sizes_set)
    def _Py_work(self, *args): return _GRAS_PyBlock.BlockPython__Py_work(self, *args)
    def _Py_propagate_tags(self, *args): return _GRAS_PyBlock.BlockPython__Py_propagate_tags(self, *args)
    def _handle_call(self, *args): return _GRAS_PyBlock.BlockPython__handle_call(self, *args)
    def _Py_handle_call_ts(self, *args): return _GRAS_PyBlock.BlockPython__Py_handle_call_ts(self, *args)
    def dummy_register_call(self, *args): return _GRAS_PyBlock.BlockPython_dummy_register_call(self, *args)
    def __my_dummy(self): return _GRAS_PyBlock.BlockPython___my_dummy(self)
    def __disown__(self):
        self.this.disown()
        _GRAS_PyBlock.disown_BlockPython(self)
        return weakref_proxy(self)
BlockPython_swigregister = _GRAS_PyBlock.BlockPython_swigregister
BlockPython_swigregister(BlockPython)

import numpy
import traceback
from GRAS_Utils import pointer_to_ndarray
from PMC import *

def sig_to_dtype_sig(sig):
    if sig is None: sig = ()
    return map(numpy.dtype, sig)

class PyBlock(BlockPython):
    def __init__(self, name='Block', in_sig=None, out_sig=None):
        BlockPython.__init__(self, name)
        self.set_input_signature(in_sig)
        self.set_output_signature(out_sig)
        self.__call_registry = dict()

    def set_input_signature(self, sig):
        self.__in_sig = sig_to_dtype_sig(sig)
        for i, n in enumerate(self.__in_sig): self.input_config(i).item_size = n.itemsize

    def set_output_signature(self, sig):
        self.__out_sig = sig_to_dtype_sig(sig)
        for i, n in enumerate(self.__out_sig): self.output_config(i).item_size = n.itemsize

    def input_signature(self): return self.__in_sig
    def output_signature(self): return self.__out_sig

    def _Py_work(self, input_addrs, input_sizes, output_addrs, output_sizes):

        try:

            input_arrays = list()
            for i in self.__in_indexes:
                addr = long(input_addrs[i])
                nitems = input_sizes[i]
                ndarray = pointer_to_ndarray(addr=addr, dtype=self.__in_sig[i], nitems=nitems, readonly=True)
                input_arrays.append(ndarray)

            output_arrays = list()
            for i in self.__out_indexes:
                addr = long(output_addrs[i])
                nitems = output_sizes[i]
                ndarray = pointer_to_ndarray(addr=addr, dtype=self.__out_sig[i], nitems=nitems, readonly=False)
                output_arrays.append(ndarray)

            ret = self.work(input_arrays, output_arrays)
            if ret is not None:
                raise Exception, 'work return != None, did you call consume/produce?'
        except: traceback.print_exc(); raise

    def work(self, *args):
        print 'Implement Work!'

    def _Py_notify_topology(self, num_inputs, num_outputs):

        #extend input signature from back to match topology
        while len(self.__in_sig) < num_inputs:
            self.__in_sig.append(self.__in_sig[-1])

        #extend output signature from back to match topology
        while len(self.__out_sig) < num_outputs:
            self.__out_sig.append(self.__out_sig[-1])

        self.__in_indexes = range(num_inputs)
        self.__out_indexes = range(num_outputs)
        try: return self.notify_topology(num_inputs, num_outputs)
        except: traceback.print_exc(); raise

    def notify_topology(self, *args): return

    def _Py_notify_active(self):
        try: return self.notify_active()
        except: traceback.print_exc(); raise

    def notify_active(self): pass

    def _Py_notify_inactive(self):
        try: return self.notify_inactive()
        except: traceback.print_exc(); raise

    def notify_inactive(self): pass

    def _Py_propagate_tags(self, which_input, iter):
        try: return self.propagate_tags(which_input, iter)
        except: traceback.print_exc(); raise

    def propagate_tags(self, i, iter):
        for o in self.__out_indexes:
            for t in iter:
                t.offset += self.get_produced(o)
                t.offset -= self.get_consumed(i)
                self.post_output_tag(o, t)

    def _Py_handle_call_ts(self, name, args):
        call = self.__call_registry[name]
        pyargs = args()
        pyret = call(*pyargs)
        return PMC_M(pyret)

    def register_call(self, name, call):
        self.dummy_register_call(name) #c++ knows name name
        self.__call_registry[name] = call

# This file is compatible with both classic and new-style classes.


