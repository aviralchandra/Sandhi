# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GRAS_Factory', [dirname(__file__)])
        except ImportError:
            import _GRAS_Factory
            return _GRAS_Factory
        if fp is not None:
            try:
                _mod = imp.load_module('_GRAS_Factory', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _GRAS_Factory = swig_import_helper()
    del swig_import_helper
else:
    import _GRAS_Factory
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GRAS_Factory.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _GRAS_Factory.SwigPyIterator_value(self)
    def incr(self, n = 1): return _GRAS_Factory.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _GRAS_Factory.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _GRAS_Factory.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _GRAS_Factory.SwigPyIterator_equal(self, *args)
    def copy(self): return _GRAS_Factory.SwigPyIterator_copy(self)
    def next(self): return _GRAS_Factory.SwigPyIterator_next(self)
    def __next__(self): return _GRAS_Factory.SwigPyIterator___next__(self)
    def previous(self): return _GRAS_Factory.SwigPyIterator_previous(self)
    def advance(self, *args): return _GRAS_Factory.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _GRAS_Factory.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _GRAS_Factory.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _GRAS_Factory.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _GRAS_Factory.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _GRAS_Factory.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _GRAS_Factory.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _GRAS_Factory.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _GRAS_Factory.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _GRAS_Factory.StringVector___nonzero__(self)
    def __bool__(self): return _GRAS_Factory.StringVector___bool__(self)
    def __len__(self): return _GRAS_Factory.StringVector___len__(self)
    def pop(self): return _GRAS_Factory.StringVector_pop(self)
    def __getslice__(self, *args): return _GRAS_Factory.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _GRAS_Factory.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _GRAS_Factory.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _GRAS_Factory.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _GRAS_Factory.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _GRAS_Factory.StringVector___setitem__(self, *args)
    def append(self, *args): return _GRAS_Factory.StringVector_append(self, *args)
    def empty(self): return _GRAS_Factory.StringVector_empty(self)
    def size(self): return _GRAS_Factory.StringVector_size(self)
    def clear(self): return _GRAS_Factory.StringVector_clear(self)
    def swap(self, *args): return _GRAS_Factory.StringVector_swap(self, *args)
    def get_allocator(self): return _GRAS_Factory.StringVector_get_allocator(self)
    def begin(self): return _GRAS_Factory.StringVector_begin(self)
    def end(self): return _GRAS_Factory.StringVector_end(self)
    def rbegin(self): return _GRAS_Factory.StringVector_rbegin(self)
    def rend(self): return _GRAS_Factory.StringVector_rend(self)
    def pop_back(self): return _GRAS_Factory.StringVector_pop_back(self)
    def erase(self, *args): return _GRAS_Factory.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _GRAS_Factory.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _GRAS_Factory.StringVector_push_back(self, *args)
    def front(self): return _GRAS_Factory.StringVector_front(self)
    def back(self): return _GRAS_Factory.StringVector_back(self)
    def assign(self, *args): return _GRAS_Factory.StringVector_assign(self, *args)
    def resize(self, *args): return _GRAS_Factory.StringVector_resize(self, *args)
    def insert(self, *args): return _GRAS_Factory.StringVector_insert(self, *args)
    def reserve(self, *args): return _GRAS_Factory.StringVector_reserve(self, *args)
    def capacity(self): return _GRAS_Factory.StringVector_capacity(self)
    __swig_destroy__ = _GRAS_Factory.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _GRAS_Factory.StringVector_swigregister
StringVector_swigregister(StringVector)

import GRAS_Element

def jit_factory(*args):
  return _GRAS_Factory.jit_factory(*args)
jit_factory = _GRAS_Factory.jit_factory

def make(*args):
  return _GRAS_Factory.make(*args)
make = _GRAS_Factory.make

def _register_factory(*args):
  return _GRAS_Factory._register_factory(*args)
_register_factory = _GRAS_Factory._register_factory

def _handle_make(*args):
  return _GRAS_Factory._handle_make(*args)
_handle_make = _GRAS_Factory._handle_make
#TODO we need to register this into the real factory
_py_factory = dict()

def register_factory(path, fcn):
    #TODO we need to register this into the real factory
    _py_factory[path] = fcn

def make(path, *args, **kwargs):

    #first try the local to python py factory #TODO real factory
    if path in _py_factory: return _py_factory[path](*args, **kwargs)

    from PMC import PMC_M
    pmcargs = PMC_M(list(args))
    return _handle_make(path, pmcargs)

def try_load_dll(name):
    import ctypes
    import ctypes.util
    dll_path = ctypes.util.find_library(name)
    if not dll_path: dll_path = 'lib'+name+'.so'
    ctypes.CDLL(dll_path, ctypes.RTLD_GLOBAL)

def py_jit_factory(*args):
    #load the dlls with ctypes for the JIT factory
    try_load_dll("gras")
    try_load_dll("pmc")
    jit_factory(*args)

# This file is compatible with both classic and new-style classes.


