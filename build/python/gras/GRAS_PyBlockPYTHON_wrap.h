/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_GRAS_PyBlock_WRAP_H_
#define SWIG_GRAS_PyBlock_WRAP_H_

#include <map>
#include <string>


struct SwigDirector_BlockPython : public gras::BlockPython, public Swig::Director {

public:
    SwigDirector_BlockPython(PyObject *self, std::string const &name);
    virtual ~SwigDirector_BlockPython();
    virtual PMCC _handle_call(std::string const &name, PMCC const &args);
    virtual void commit_config();
    virtual void _Py_notify_active();
    virtual void _Py_notify_inactive();
    virtual void _Py_notify_topology(size_t const arg0, size_t const arg1);
    virtual void _Py_work(std::vector< void *,std::allocator< void * > > const &arg0, std::vector< size_t,std::allocator< size_t > > const &arg1, std::vector< void *,std::allocator< void * > > const &arg2, std::vector< size_t,std::allocator< size_t > > const &arg3);
    virtual void _Py_propagate_tags(size_t const which_input, gras::TagIter const &iter);
    virtual PMCC _Py_handle_call_ts(std::string const &name, PMCC const &args);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* swig_protected_method_name, bool val) const
    { swig_inner[swig_protected_method_name] = val;}

private:
    mutable std::map<std::string, bool> swig_inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class BlockPython doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[7];
#endif

};


#endif
