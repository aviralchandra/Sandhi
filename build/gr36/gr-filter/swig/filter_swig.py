# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_filter_swig', [dirname(__file__)])
        except ImportError:
            import _filter_swig
            return _filter_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_filter_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _filter_swig = swig_import_helper()
    del swig_import_helper
else:
    import _filter_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import gras

class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _filter_swig.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _filter_swig.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """incr(self, size_t n = 1) -> SwigPyIterator"""
        return _filter_swig.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """decr(self, size_t n = 1) -> SwigPyIterator"""
        return _filter_swig.SwigPyIterator_decr(self, n)

    def distance(self, *args, **kwargs):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _filter_swig.SwigPyIterator_distance(self, *args, **kwargs)

    def equal(self, *args, **kwargs):
        """equal(self, SwigPyIterator x) -> bool"""
        return _filter_swig.SwigPyIterator_equal(self, *args, **kwargs)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _filter_swig.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _filter_swig.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _filter_swig.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _filter_swig.SwigPyIterator_previous(self)

    def advance(self, *args, **kwargs):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _filter_swig.SwigPyIterator_advance(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _filter_swig.SwigPyIterator___eq__(self, *args, **kwargs)

    def __ne__(self, *args, **kwargs):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _filter_swig.SwigPyIterator___ne__(self, *args, **kwargs)

    def __iadd__(self, *args, **kwargs):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _filter_swig.SwigPyIterator___iadd__(self, *args, **kwargs)

    def __isub__(self, *args, **kwargs):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _filter_swig.SwigPyIterator___isub__(self, *args, **kwargs)

    def __add__(self, *args, **kwargs):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _filter_swig.SwigPyIterator___add__(self, *args, **kwargs)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _filter_swig.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _filter_swig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import GRAS_Element
class firdes(object):
    """Proxy of C++ gr::filter::firdes class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    WIN_HAMMING = _filter_swig.firdes_WIN_HAMMING
    WIN_HANN = _filter_swig.firdes_WIN_HANN
    WIN_BLACKMAN = _filter_swig.firdes_WIN_BLACKMAN
    WIN_RECTANGULAR = _filter_swig.firdes_WIN_RECTANGULAR
    WIN_KAISER = _filter_swig.firdes_WIN_KAISER
    WIN_BLACKMAN_hARRIS = _filter_swig.firdes_WIN_BLACKMAN_hARRIS
    WIN_BLACKMAN_HARRIS = _filter_swig.firdes_WIN_BLACKMAN_HARRIS
    def low_pass(*args, **kwargs):
        """
        low_pass(double gain, double sampling_freq, double cutoff_freq, 
            double transition_width, win_type window = WIN_HAMMING, 
            double beta = 6.76) -> std::vector<(float,std::allocator<(float)>)>
        """
        return _filter_swig.firdes_low_pass(*args, **kwargs)

    low_pass = staticmethod(low_pass)
    def low_pass_2(*args, **kwargs):
        """
        low_pass_2(double gain, double sampling_freq, double cutoff_freq, 
            double transition_width, double attenuation_dB, 
            win_type window = WIN_HAMMING, double beta = 6.76) -> std::vector<(float,std::allocator<(float)>)>
        """
        return _filter_swig.firdes_low_pass_2(*args, **kwargs)

    low_pass_2 = staticmethod(low_pass_2)
    def high_pass(*args, **kwargs):
        """
        high_pass(double gain, double sampling_freq, double cutoff_freq, 
            double transition_width, win_type window = WIN_HAMMING, 
            double beta = 6.76) -> std::vector<(float,std::allocator<(float)>)>
        """
        return _filter_swig.firdes_high_pass(*args, **kwargs)

    high_pass = staticmethod(high_pass)
    def high_pass_2(*args, **kwargs):
        """
        high_pass_2(double gain, double sampling_freq, double cutoff_freq, 
            double transition_width, double attenuation_dB, 
            win_type window = WIN_HAMMING, double beta = 6.76) -> std::vector<(float,std::allocator<(float)>)>
        """
        return _filter_swig.firdes_high_pass_2(*args, **kwargs)

    high_pass_2 = staticmethod(high_pass_2)
    def band_pass(*args, **kwargs):
        """
        band_pass(double gain, double sampling_freq, double low_cutoff_freq, 
            double high_cutoff_freq, double transition_width, 
            win_type window = WIN_HAMMING, double beta = 6.76) -> std::vector<(float,std::allocator<(float)>)>
        """
        return _filter_swig.firdes_band_pass(*args, **kwargs)

    band_pass = staticmethod(band_pass)
    def band_pass_2(*args, **kwargs):
        """
        band_pass_2(double gain, double sampling_freq, double low_cutoff_freq, 
            double high_cutoff_freq, double transition_width, 
            double attenuation_dB, win_type window = WIN_HAMMING, 
            double beta = 6.76) -> std::vector<(float,std::allocator<(float)>)>
        """
        return _filter_swig.firdes_band_pass_2(*args, **kwargs)

    band_pass_2 = staticmethod(band_pass_2)
    def complex_band_pass(*args, **kwargs):
        """
        complex_band_pass(double gain, double sampling_freq, double low_cutoff_freq, 
            double high_cutoff_freq, double transition_width, 
            win_type window = WIN_HAMMING, double beta = 6.76) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>
        """
        return _filter_swig.firdes_complex_band_pass(*args, **kwargs)

    complex_band_pass = staticmethod(complex_band_pass)
    def complex_band_pass_2(*args, **kwargs):
        """
        complex_band_pass_2(double gain, double sampling_freq, double low_cutoff_freq, 
            double high_cutoff_freq, double transition_width, 
            double attenuation_dB, win_type window = WIN_HAMMING, 
            double beta = 6.76) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>
        """
        return _filter_swig.firdes_complex_band_pass_2(*args, **kwargs)

    complex_band_pass_2 = staticmethod(complex_band_pass_2)
    def band_reject(*args, **kwargs):
        """
        band_reject(double gain, double sampling_freq, double low_cutoff_freq, 
            double high_cutoff_freq, double transition_width, 
            win_type window = WIN_HAMMING, double beta = 6.76) -> std::vector<(float,std::allocator<(float)>)>
        """
        return _filter_swig.firdes_band_reject(*args, **kwargs)

    band_reject = staticmethod(band_reject)
    def band_reject_2(*args, **kwargs):
        """
        band_reject_2(double gain, double sampling_freq, double low_cutoff_freq, 
            double high_cutoff_freq, double transition_width, 
            double attenuation_dB, win_type window = WIN_HAMMING, 
            double beta = 6.76) -> std::vector<(float,std::allocator<(float)>)>
        """
        return _filter_swig.firdes_band_reject_2(*args, **kwargs)

    band_reject_2 = staticmethod(band_reject_2)
    def hilbert(*args, **kwargs):
        """
        hilbert(unsigned int ntaps = 19, win_type windowtype = WIN_RECTANGULAR, 
            double beta = 6.76) -> std::vector<(float,std::allocator<(float)>)>
        """
        return _filter_swig.firdes_hilbert(*args, **kwargs)

    hilbert = staticmethod(hilbert)
    def root_raised_cosine(*args, **kwargs):
        """
        root_raised_cosine(double gain, double sampling_freq, double symbol_rate, 
            double alpha, int ntaps) -> std::vector<(float,std::allocator<(float)>)>
        """
        return _filter_swig.firdes_root_raised_cosine(*args, **kwargs)

    root_raised_cosine = staticmethod(root_raised_cosine)
    def gaussian(*args, **kwargs):
        """gaussian(double gain, double spb, double bt, int ntaps) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.firdes_gaussian(*args, **kwargs)

    gaussian = staticmethod(gaussian)
    def window(*args, **kwargs):
        """window(win_type type, int ntaps, double beta) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.firdes_window(*args, **kwargs)

    window = staticmethod(window)
    def __init__(self): 
        """__init__(self) -> firdes"""
        this = _filter_swig.new_firdes()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _filter_swig.delete_firdes
    __del__ = lambda self : None;
firdes_swigregister = _filter_swig.firdes_swigregister
firdes_swigregister(firdes)

def firdes_low_pass(*args, **kwargs):
  """
    firdes_low_pass(double gain, double sampling_freq, double cutoff_freq, 
        double transition_width, win_type window = WIN_HAMMING, 
        double beta = 6.76) -> std::vector<(float,std::allocator<(float)>)>
    """
  return _filter_swig.firdes_low_pass(*args, **kwargs)

def firdes_low_pass_2(*args, **kwargs):
  """
    firdes_low_pass_2(double gain, double sampling_freq, double cutoff_freq, 
        double transition_width, double attenuation_dB, 
        win_type window = WIN_HAMMING, double beta = 6.76) -> std::vector<(float,std::allocator<(float)>)>
    """
  return _filter_swig.firdes_low_pass_2(*args, **kwargs)

def firdes_high_pass(*args, **kwargs):
  """
    firdes_high_pass(double gain, double sampling_freq, double cutoff_freq, 
        double transition_width, win_type window = WIN_HAMMING, 
        double beta = 6.76) -> std::vector<(float,std::allocator<(float)>)>
    """
  return _filter_swig.firdes_high_pass(*args, **kwargs)

def firdes_high_pass_2(*args, **kwargs):
  """
    firdes_high_pass_2(double gain, double sampling_freq, double cutoff_freq, 
        double transition_width, double attenuation_dB, 
        win_type window = WIN_HAMMING, double beta = 6.76) -> std::vector<(float,std::allocator<(float)>)>
    """
  return _filter_swig.firdes_high_pass_2(*args, **kwargs)

def firdes_band_pass(*args, **kwargs):
  """
    firdes_band_pass(double gain, double sampling_freq, double low_cutoff_freq, 
        double high_cutoff_freq, double transition_width, 
        win_type window = WIN_HAMMING, double beta = 6.76) -> std::vector<(float,std::allocator<(float)>)>
    """
  return _filter_swig.firdes_band_pass(*args, **kwargs)

def firdes_band_pass_2(*args, **kwargs):
  """
    firdes_band_pass_2(double gain, double sampling_freq, double low_cutoff_freq, 
        double high_cutoff_freq, double transition_width, 
        double attenuation_dB, win_type window = WIN_HAMMING, 
        double beta = 6.76) -> std::vector<(float,std::allocator<(float)>)>
    """
  return _filter_swig.firdes_band_pass_2(*args, **kwargs)

def firdes_complex_band_pass(*args, **kwargs):
  """
    firdes_complex_band_pass(double gain, double sampling_freq, double low_cutoff_freq, 
        double high_cutoff_freq, double transition_width, 
        win_type window = WIN_HAMMING, double beta = 6.76) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>
    """
  return _filter_swig.firdes_complex_band_pass(*args, **kwargs)

def firdes_complex_band_pass_2(*args, **kwargs):
  """
    firdes_complex_band_pass_2(double gain, double sampling_freq, double low_cutoff_freq, 
        double high_cutoff_freq, double transition_width, 
        double attenuation_dB, win_type window = WIN_HAMMING, 
        double beta = 6.76) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>
    """
  return _filter_swig.firdes_complex_band_pass_2(*args, **kwargs)

def firdes_band_reject(*args, **kwargs):
  """
    firdes_band_reject(double gain, double sampling_freq, double low_cutoff_freq, 
        double high_cutoff_freq, double transition_width, 
        win_type window = WIN_HAMMING, double beta = 6.76) -> std::vector<(float,std::allocator<(float)>)>
    """
  return _filter_swig.firdes_band_reject(*args, **kwargs)

def firdes_band_reject_2(*args, **kwargs):
  """
    firdes_band_reject_2(double gain, double sampling_freq, double low_cutoff_freq, 
        double high_cutoff_freq, double transition_width, 
        double attenuation_dB, win_type window = WIN_HAMMING, 
        double beta = 6.76) -> std::vector<(float,std::allocator<(float)>)>
    """
  return _filter_swig.firdes_band_reject_2(*args, **kwargs)

def firdes_hilbert(*args, **kwargs):
  """
    firdes_hilbert(unsigned int ntaps = 19, win_type windowtype = WIN_RECTANGULAR, 
        double beta = 6.76) -> std::vector<(float,std::allocator<(float)>)>
    """
  return _filter_swig.firdes_hilbert(*args, **kwargs)

def firdes_root_raised_cosine(*args, **kwargs):
  """
    firdes_root_raised_cosine(double gain, double sampling_freq, double symbol_rate, 
        double alpha, int ntaps) -> std::vector<(float,std::allocator<(float)>)>
    """
  return _filter_swig.firdes_root_raised_cosine(*args, **kwargs)

def firdes_gaussian(*args, **kwargs):
  """firdes_gaussian(double gain, double spb, double bt, int ntaps) -> std::vector<(float,std::allocator<(float)>)>"""
  return _filter_swig.firdes_gaussian(*args, **kwargs)

def firdes_window(*args, **kwargs):
  """firdes_window(win_type type, int ntaps, double beta) -> std::vector<(float,std::allocator<(float)>)>"""
  return _filter_swig.firdes_window(*args, **kwargs)


def pm_remez(*args, **kwargs):
  """
    pm_remez(int order, std::vector<(double,std::allocator<(double)>)> bands, 
        std::vector<(double,std::allocator<(double)>)> ampl, 
        std::vector<(double,std::allocator<(double)>)> error_weight, 
        string filter_type = "bandpass", 
        int grid_density = 16) -> std::vector<(double,std::allocator<(double)>)>
    """
  return _filter_swig.pm_remez(*args, **kwargs)
class adaptive_fir_ccc(object):
    """Proxy of C++ gr::filter::adaptive_fir_ccc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(char name, int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr"""
        return _filter_swig.adaptive_fir_ccc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.adaptive_fir_ccc_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.adaptive_fir_ccc_taps(self)

    __swig_destroy__ = _filter_swig.delete_adaptive_fir_ccc
    __del__ = lambda self : None;
adaptive_fir_ccc_swigregister = _filter_swig.adaptive_fir_ccc_swigregister
adaptive_fir_ccc_swigregister(adaptive_fir_ccc)

def adaptive_fir_ccc_make(*args, **kwargs):
  """adaptive_fir_ccc_make(char name, int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr"""
  return _filter_swig.adaptive_fir_ccc_make(*args, **kwargs)

class adaptive_fir_ccf(object):
    """Proxy of C++ gr::filter::adaptive_fir_ccf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(char name, int decimation, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
        return _filter_swig.adaptive_fir_ccf_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.adaptive_fir_ccf_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.adaptive_fir_ccf_taps(self)

    __swig_destroy__ = _filter_swig.delete_adaptive_fir_ccf
    __del__ = lambda self : None;
adaptive_fir_ccf_swigregister = _filter_swig.adaptive_fir_ccf_swigregister
adaptive_fir_ccf_swigregister(adaptive_fir_ccf)

def adaptive_fir_ccf_make(*args, **kwargs):
  """adaptive_fir_ccf_make(char name, int decimation, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
  return _filter_swig.adaptive_fir_ccf_make(*args, **kwargs)

class dc_blocker_cc(object):
    """Proxy of C++ gr::filter::dc_blocker_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int D, bool long_form) -> sptr"""
        return _filter_swig.dc_blocker_cc_make(*args, **kwargs)

    make = staticmethod(make)
    def group_delay(self):
        """group_delay(self) -> int"""
        return _filter_swig.dc_blocker_cc_group_delay(self)

    __swig_destroy__ = _filter_swig.delete_dc_blocker_cc
    __del__ = lambda self : None;
dc_blocker_cc_swigregister = _filter_swig.dc_blocker_cc_swigregister
dc_blocker_cc_swigregister(dc_blocker_cc)

def dc_blocker_cc_make(*args, **kwargs):
  """dc_blocker_cc_make(int D, bool long_form) -> sptr"""
  return _filter_swig.dc_blocker_cc_make(*args, **kwargs)

class dc_blocker_ff(object):
    """Proxy of C++ gr::filter::dc_blocker_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int D, bool long_form = True) -> sptr"""
        return _filter_swig.dc_blocker_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def group_delay(self):
        """group_delay(self) -> int"""
        return _filter_swig.dc_blocker_ff_group_delay(self)

    __swig_destroy__ = _filter_swig.delete_dc_blocker_ff
    __del__ = lambda self : None;
dc_blocker_ff_swigregister = _filter_swig.dc_blocker_ff_swigregister
dc_blocker_ff_swigregister(dc_blocker_ff)

def dc_blocker_ff_make(*args, **kwargs):
  """dc_blocker_ff_make(int D, bool long_form = True) -> sptr"""
  return _filter_swig.dc_blocker_ff_make(*args, **kwargs)

class filter_delay_fc(object):
    """Proxy of C++ gr::filter::filter_delay_fc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
        return _filter_swig.filter_delay_fc_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> filter_delay_fc"""
        this = _filter_swig.new_filter_delay_fc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _filter_swig.delete_filter_delay_fc
    __del__ = lambda self : None;
filter_delay_fc_swigregister = _filter_swig.filter_delay_fc_swigregister
filter_delay_fc_swigregister(filter_delay_fc)

def filter_delay_fc_make(*args, **kwargs):
  """filter_delay_fc_make(std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
  return _filter_swig.filter_delay_fc_make(*args, **kwargs)

class fir_filter_ccc(object):
    """Proxy of C++ gr::filter::fir_filter_ccc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr"""
        return _filter_swig.fir_filter_ccc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.fir_filter_ccc_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.fir_filter_ccc_taps(self)

    __swig_destroy__ = _filter_swig.delete_fir_filter_ccc
    __del__ = lambda self : None;
fir_filter_ccc_swigregister = _filter_swig.fir_filter_ccc_swigregister
fir_filter_ccc_swigregister(fir_filter_ccc)

def fir_filter_ccc_make(*args, **kwargs):
  """fir_filter_ccc_make(int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr"""
  return _filter_swig.fir_filter_ccc_make(*args, **kwargs)

class fir_filter_ccf(object):
    """Proxy of C++ gr::filter::fir_filter_ccf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int decimation, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
        return _filter_swig.fir_filter_ccf_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.fir_filter_ccf_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.fir_filter_ccf_taps(self)

    __swig_destroy__ = _filter_swig.delete_fir_filter_ccf
    __del__ = lambda self : None;
fir_filter_ccf_swigregister = _filter_swig.fir_filter_ccf_swigregister
fir_filter_ccf_swigregister(fir_filter_ccf)

def fir_filter_ccf_make(*args, **kwargs):
  """fir_filter_ccf_make(int decimation, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
  return _filter_swig.fir_filter_ccf_make(*args, **kwargs)

class fir_filter_fcc(object):
    """Proxy of C++ gr::filter::fir_filter_fcc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr"""
        return _filter_swig.fir_filter_fcc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.fir_filter_fcc_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.fir_filter_fcc_taps(self)

    __swig_destroy__ = _filter_swig.delete_fir_filter_fcc
    __del__ = lambda self : None;
fir_filter_fcc_swigregister = _filter_swig.fir_filter_fcc_swigregister
fir_filter_fcc_swigregister(fir_filter_fcc)

def fir_filter_fcc_make(*args, **kwargs):
  """fir_filter_fcc_make(int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr"""
  return _filter_swig.fir_filter_fcc_make(*args, **kwargs)

class fir_filter_fff(object):
    """Proxy of C++ gr::filter::fir_filter_fff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int decimation, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
        return _filter_swig.fir_filter_fff_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.fir_filter_fff_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.fir_filter_fff_taps(self)

    __swig_destroy__ = _filter_swig.delete_fir_filter_fff
    __del__ = lambda self : None;
fir_filter_fff_swigregister = _filter_swig.fir_filter_fff_swigregister
fir_filter_fff_swigregister(fir_filter_fff)

def fir_filter_fff_make(*args, **kwargs):
  """fir_filter_fff_make(int decimation, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
  return _filter_swig.fir_filter_fff_make(*args, **kwargs)

class fir_filter_fsf(object):
    """Proxy of C++ gr::filter::fir_filter_fsf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int decimation, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
        return _filter_swig.fir_filter_fsf_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.fir_filter_fsf_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.fir_filter_fsf_taps(self)

    __swig_destroy__ = _filter_swig.delete_fir_filter_fsf
    __del__ = lambda self : None;
fir_filter_fsf_swigregister = _filter_swig.fir_filter_fsf_swigregister
fir_filter_fsf_swigregister(fir_filter_fsf)

def fir_filter_fsf_make(*args, **kwargs):
  """fir_filter_fsf_make(int decimation, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
  return _filter_swig.fir_filter_fsf_make(*args, **kwargs)

class fir_filter_scc(object):
    """Proxy of C++ gr::filter::fir_filter_scc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr"""
        return _filter_swig.fir_filter_scc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.fir_filter_scc_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.fir_filter_scc_taps(self)

    __swig_destroy__ = _filter_swig.delete_fir_filter_scc
    __del__ = lambda self : None;
fir_filter_scc_swigregister = _filter_swig.fir_filter_scc_swigregister
fir_filter_scc_swigregister(fir_filter_scc)

def fir_filter_scc_make(*args, **kwargs):
  """fir_filter_scc_make(int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr"""
  return _filter_swig.fir_filter_scc_make(*args, **kwargs)

class fft_filter_ccc(object):
    """Proxy of C++ gr::filter::fft_filter_ccc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps, 
            int nthreads = 1) -> sptr
        """
        return _filter_swig.fft_filter_ccc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.fft_filter_ccc_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.fft_filter_ccc_taps(self)

    def set_nthreads(self, *args, **kwargs):
        """set_nthreads(self, int n)"""
        return _filter_swig.fft_filter_ccc_set_nthreads(self, *args, **kwargs)

    def nthreads(self):
        """nthreads(self) -> int"""
        return _filter_swig.fft_filter_ccc_nthreads(self)

    __swig_destroy__ = _filter_swig.delete_fft_filter_ccc
    __del__ = lambda self : None;
fft_filter_ccc_swigregister = _filter_swig.fft_filter_ccc_swigregister
fft_filter_ccc_swigregister(fft_filter_ccc)

def fft_filter_ccc_make(*args, **kwargs):
  """
    fft_filter_ccc_make(int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps, 
        int nthreads = 1) -> sptr
    """
  return _filter_swig.fft_filter_ccc_make(*args, **kwargs)

class fft_filter_fff(object):
    """Proxy of C++ gr::filter::fft_filter_fff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int decimation, std::vector<(float,std::allocator<(float)>)> taps, 
            int nthreads = 1) -> sptr
        """
        return _filter_swig.fft_filter_fff_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.fft_filter_fff_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.fft_filter_fff_taps(self)

    def set_nthreads(self, *args, **kwargs):
        """set_nthreads(self, int n)"""
        return _filter_swig.fft_filter_fff_set_nthreads(self, *args, **kwargs)

    def nthreads(self):
        """nthreads(self) -> int"""
        return _filter_swig.fft_filter_fff_nthreads(self)

    __swig_destroy__ = _filter_swig.delete_fft_filter_fff
    __del__ = lambda self : None;
fft_filter_fff_swigregister = _filter_swig.fft_filter_fff_swigregister
fft_filter_fff_swigregister(fft_filter_fff)

def fft_filter_fff_make(*args, **kwargs):
  """
    fft_filter_fff_make(int decimation, std::vector<(float,std::allocator<(float)>)> taps, 
        int nthreads = 1) -> sptr
    """
  return _filter_swig.fft_filter_fff_make(*args, **kwargs)

class fractional_interpolator_cc(object):
    """Proxy of C++ gr::filter::fractional_interpolator_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(float phase_shift, float interp_ratio) -> sptr"""
        return _filter_swig.fractional_interpolator_cc_make(*args, **kwargs)

    make = staticmethod(make)
    def mu(self):
        """mu(self) -> float"""
        return _filter_swig.fractional_interpolator_cc_mu(self)

    def interp_ratio(self):
        """interp_ratio(self) -> float"""
        return _filter_swig.fractional_interpolator_cc_interp_ratio(self)

    def set_mu(self, *args, **kwargs):
        """set_mu(self, float mu)"""
        return _filter_swig.fractional_interpolator_cc_set_mu(self, *args, **kwargs)

    def set_interp_ratio(self, *args, **kwargs):
        """set_interp_ratio(self, float interp_ratio)"""
        return _filter_swig.fractional_interpolator_cc_set_interp_ratio(self, *args, **kwargs)

    __swig_destroy__ = _filter_swig.delete_fractional_interpolator_cc
    __del__ = lambda self : None;
fractional_interpolator_cc_swigregister = _filter_swig.fractional_interpolator_cc_swigregister
fractional_interpolator_cc_swigregister(fractional_interpolator_cc)

def fractional_interpolator_cc_make(*args, **kwargs):
  """fractional_interpolator_cc_make(float phase_shift, float interp_ratio) -> sptr"""
  return _filter_swig.fractional_interpolator_cc_make(*args, **kwargs)

class fractional_interpolator_ff(object):
    """Proxy of C++ gr::filter::fractional_interpolator_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(float phase_shift, float interp_ratio) -> sptr"""
        return _filter_swig.fractional_interpolator_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def mu(self):
        """mu(self) -> float"""
        return _filter_swig.fractional_interpolator_ff_mu(self)

    def interp_ratio(self):
        """interp_ratio(self) -> float"""
        return _filter_swig.fractional_interpolator_ff_interp_ratio(self)

    def set_mu(self, *args, **kwargs):
        """set_mu(self, float mu)"""
        return _filter_swig.fractional_interpolator_ff_set_mu(self, *args, **kwargs)

    def set_interp_ratio(self, *args, **kwargs):
        """set_interp_ratio(self, float interp_ratio)"""
        return _filter_swig.fractional_interpolator_ff_set_interp_ratio(self, *args, **kwargs)

    __swig_destroy__ = _filter_swig.delete_fractional_interpolator_ff
    __del__ = lambda self : None;
fractional_interpolator_ff_swigregister = _filter_swig.fractional_interpolator_ff_swigregister
fractional_interpolator_ff_swigregister(fractional_interpolator_ff)

def fractional_interpolator_ff_make(*args, **kwargs):
  """fractional_interpolator_ff_make(float phase_shift, float interp_ratio) -> sptr"""
  return _filter_swig.fractional_interpolator_ff_make(*args, **kwargs)

class freq_xlating_fir_filter_ccc(object):
    """Proxy of C++ gr::filter::freq_xlating_fir_filter_ccc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps, 
            double center_freq, 
            double sampling_freq) -> sptr
        """
        return _filter_swig.freq_xlating_fir_filter_ccc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_center_freq(self, *args, **kwargs):
        """set_center_freq(self, double center_freq)"""
        return _filter_swig.freq_xlating_fir_filter_ccc_set_center_freq(self, *args, **kwargs)

    def center_freq(self):
        """center_freq(self) -> double"""
        return _filter_swig.freq_xlating_fir_filter_ccc_center_freq(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.freq_xlating_fir_filter_ccc_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.freq_xlating_fir_filter_ccc_taps(self)

    __swig_destroy__ = _filter_swig.delete_freq_xlating_fir_filter_ccc
    __del__ = lambda self : None;
freq_xlating_fir_filter_ccc_swigregister = _filter_swig.freq_xlating_fir_filter_ccc_swigregister
freq_xlating_fir_filter_ccc_swigregister(freq_xlating_fir_filter_ccc)

def freq_xlating_fir_filter_ccc_make(*args, **kwargs):
  """
    freq_xlating_fir_filter_ccc_make(int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps, 
        double center_freq, 
        double sampling_freq) -> sptr
    """
  return _filter_swig.freq_xlating_fir_filter_ccc_make(*args, **kwargs)

class freq_xlating_fir_filter_ccf(object):
    """Proxy of C++ gr::filter::freq_xlating_fir_filter_ccf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int decimation, std::vector<(float,std::allocator<(float)>)> taps, 
            double center_freq, double sampling_freq) -> sptr
        """
        return _filter_swig.freq_xlating_fir_filter_ccf_make(*args, **kwargs)

    make = staticmethod(make)
    def set_center_freq(self, *args, **kwargs):
        """set_center_freq(self, double center_freq)"""
        return _filter_swig.freq_xlating_fir_filter_ccf_set_center_freq(self, *args, **kwargs)

    def center_freq(self):
        """center_freq(self) -> double"""
        return _filter_swig.freq_xlating_fir_filter_ccf_center_freq(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.freq_xlating_fir_filter_ccf_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.freq_xlating_fir_filter_ccf_taps(self)

    __swig_destroy__ = _filter_swig.delete_freq_xlating_fir_filter_ccf
    __del__ = lambda self : None;
freq_xlating_fir_filter_ccf_swigregister = _filter_swig.freq_xlating_fir_filter_ccf_swigregister
freq_xlating_fir_filter_ccf_swigregister(freq_xlating_fir_filter_ccf)

def freq_xlating_fir_filter_ccf_make(*args, **kwargs):
  """
    freq_xlating_fir_filter_ccf_make(int decimation, std::vector<(float,std::allocator<(float)>)> taps, 
        double center_freq, double sampling_freq) -> sptr
    """
  return _filter_swig.freq_xlating_fir_filter_ccf_make(*args, **kwargs)

class freq_xlating_fir_filter_fcc(object):
    """Proxy of C++ gr::filter::freq_xlating_fir_filter_fcc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps, 
            double center_freq, 
            double sampling_freq) -> sptr
        """
        return _filter_swig.freq_xlating_fir_filter_fcc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_center_freq(self, *args, **kwargs):
        """set_center_freq(self, double center_freq)"""
        return _filter_swig.freq_xlating_fir_filter_fcc_set_center_freq(self, *args, **kwargs)

    def center_freq(self):
        """center_freq(self) -> double"""
        return _filter_swig.freq_xlating_fir_filter_fcc_center_freq(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.freq_xlating_fir_filter_fcc_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.freq_xlating_fir_filter_fcc_taps(self)

    __swig_destroy__ = _filter_swig.delete_freq_xlating_fir_filter_fcc
    __del__ = lambda self : None;
freq_xlating_fir_filter_fcc_swigregister = _filter_swig.freq_xlating_fir_filter_fcc_swigregister
freq_xlating_fir_filter_fcc_swigregister(freq_xlating_fir_filter_fcc)

def freq_xlating_fir_filter_fcc_make(*args, **kwargs):
  """
    freq_xlating_fir_filter_fcc_make(int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps, 
        double center_freq, 
        double sampling_freq) -> sptr
    """
  return _filter_swig.freq_xlating_fir_filter_fcc_make(*args, **kwargs)

class freq_xlating_fir_filter_fcf(object):
    """Proxy of C++ gr::filter::freq_xlating_fir_filter_fcf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int decimation, std::vector<(float,std::allocator<(float)>)> taps, 
            double center_freq, double sampling_freq) -> sptr
        """
        return _filter_swig.freq_xlating_fir_filter_fcf_make(*args, **kwargs)

    make = staticmethod(make)
    def set_center_freq(self, *args, **kwargs):
        """set_center_freq(self, double center_freq)"""
        return _filter_swig.freq_xlating_fir_filter_fcf_set_center_freq(self, *args, **kwargs)

    def center_freq(self):
        """center_freq(self) -> double"""
        return _filter_swig.freq_xlating_fir_filter_fcf_center_freq(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.freq_xlating_fir_filter_fcf_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.freq_xlating_fir_filter_fcf_taps(self)

    __swig_destroy__ = _filter_swig.delete_freq_xlating_fir_filter_fcf
    __del__ = lambda self : None;
freq_xlating_fir_filter_fcf_swigregister = _filter_swig.freq_xlating_fir_filter_fcf_swigregister
freq_xlating_fir_filter_fcf_swigregister(freq_xlating_fir_filter_fcf)

def freq_xlating_fir_filter_fcf_make(*args, **kwargs):
  """
    freq_xlating_fir_filter_fcf_make(int decimation, std::vector<(float,std::allocator<(float)>)> taps, 
        double center_freq, double sampling_freq) -> sptr
    """
  return _filter_swig.freq_xlating_fir_filter_fcf_make(*args, **kwargs)

class freq_xlating_fir_filter_scf(object):
    """Proxy of C++ gr::filter::freq_xlating_fir_filter_scf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int decimation, std::vector<(float,std::allocator<(float)>)> taps, 
            double center_freq, double sampling_freq) -> sptr
        """
        return _filter_swig.freq_xlating_fir_filter_scf_make(*args, **kwargs)

    make = staticmethod(make)
    def set_center_freq(self, *args, **kwargs):
        """set_center_freq(self, double center_freq)"""
        return _filter_swig.freq_xlating_fir_filter_scf_set_center_freq(self, *args, **kwargs)

    def center_freq(self):
        """center_freq(self) -> double"""
        return _filter_swig.freq_xlating_fir_filter_scf_center_freq(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.freq_xlating_fir_filter_scf_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.freq_xlating_fir_filter_scf_taps(self)

    __swig_destroy__ = _filter_swig.delete_freq_xlating_fir_filter_scf
    __del__ = lambda self : None;
freq_xlating_fir_filter_scf_swigregister = _filter_swig.freq_xlating_fir_filter_scf_swigregister
freq_xlating_fir_filter_scf_swigregister(freq_xlating_fir_filter_scf)

def freq_xlating_fir_filter_scf_make(*args, **kwargs):
  """
    freq_xlating_fir_filter_scf_make(int decimation, std::vector<(float,std::allocator<(float)>)> taps, 
        double center_freq, double sampling_freq) -> sptr
    """
  return _filter_swig.freq_xlating_fir_filter_scf_make(*args, **kwargs)

class freq_xlating_fir_filter_scc(object):
    """Proxy of C++ gr::filter::freq_xlating_fir_filter_scc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps, 
            double center_freq, 
            double sampling_freq) -> sptr
        """
        return _filter_swig.freq_xlating_fir_filter_scc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_center_freq(self, *args, **kwargs):
        """set_center_freq(self, double center_freq)"""
        return _filter_swig.freq_xlating_fir_filter_scc_set_center_freq(self, *args, **kwargs)

    def center_freq(self):
        """center_freq(self) -> double"""
        return _filter_swig.freq_xlating_fir_filter_scc_center_freq(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.freq_xlating_fir_filter_scc_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.freq_xlating_fir_filter_scc_taps(self)

    __swig_destroy__ = _filter_swig.delete_freq_xlating_fir_filter_scc
    __del__ = lambda self : None;
freq_xlating_fir_filter_scc_swigregister = _filter_swig.freq_xlating_fir_filter_scc_swigregister
freq_xlating_fir_filter_scc_swigregister(freq_xlating_fir_filter_scc)

def freq_xlating_fir_filter_scc_make(*args, **kwargs):
  """
    freq_xlating_fir_filter_scc_make(int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps, 
        double center_freq, 
        double sampling_freq) -> sptr
    """
  return _filter_swig.freq_xlating_fir_filter_scc_make(*args, **kwargs)

class hilbert_fc(object):
    """Proxy of C++ gr::filter::hilbert_fc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(unsigned int ntaps) -> sptr"""
        return _filter_swig.hilbert_fc_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> hilbert_fc"""
        this = _filter_swig.new_hilbert_fc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _filter_swig.delete_hilbert_fc
    __del__ = lambda self : None;
hilbert_fc_swigregister = _filter_swig.hilbert_fc_swigregister
hilbert_fc_swigregister(hilbert_fc)

def hilbert_fc_make(*args, **kwargs):
  """hilbert_fc_make(unsigned int ntaps) -> sptr"""
  return _filter_swig.hilbert_fc_make(*args, **kwargs)

class iir_filter_ffd(object):
    """Proxy of C++ gr::filter::iir_filter_ffd class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(std::vector<(double,std::allocator<(double)>)> fftaps, 
            std::vector<(double,std::allocator<(double)>)> fbtaps) -> sptr
        """
        return _filter_swig.iir_filter_ffd_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """
        set_taps(self, std::vector<(double,std::allocator<(double)>)> fftaps, 
            std::vector<(double,std::allocator<(double)>)> fbtaps)
        """
        return _filter_swig.iir_filter_ffd_set_taps(self, *args, **kwargs)

    __swig_destroy__ = _filter_swig.delete_iir_filter_ffd
    __del__ = lambda self : None;
iir_filter_ffd_swigregister = _filter_swig.iir_filter_ffd_swigregister
iir_filter_ffd_swigregister(iir_filter_ffd)

def iir_filter_ffd_make(*args, **kwargs):
  """
    iir_filter_ffd_make(std::vector<(double,std::allocator<(double)>)> fftaps, 
        std::vector<(double,std::allocator<(double)>)> fbtaps) -> sptr
    """
  return _filter_swig.iir_filter_ffd_make(*args, **kwargs)

class interp_fir_filter_ccc(object):
    """Proxy of C++ gr::filter::interp_fir_filter_ccc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(unsigned int interpolation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr"""
        return _filter_swig.interp_fir_filter_ccc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.interp_fir_filter_ccc_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.interp_fir_filter_ccc_taps(self)

    __swig_destroy__ = _filter_swig.delete_interp_fir_filter_ccc
    __del__ = lambda self : None;
interp_fir_filter_ccc_swigregister = _filter_swig.interp_fir_filter_ccc_swigregister
interp_fir_filter_ccc_swigregister(interp_fir_filter_ccc)

def interp_fir_filter_ccc_make(*args, **kwargs):
  """interp_fir_filter_ccc_make(unsigned int interpolation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr"""
  return _filter_swig.interp_fir_filter_ccc_make(*args, **kwargs)

class interp_fir_filter_ccf(object):
    """Proxy of C++ gr::filter::interp_fir_filter_ccf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(unsigned int interpolation, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
        return _filter_swig.interp_fir_filter_ccf_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.interp_fir_filter_ccf_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.interp_fir_filter_ccf_taps(self)

    __swig_destroy__ = _filter_swig.delete_interp_fir_filter_ccf
    __del__ = lambda self : None;
interp_fir_filter_ccf_swigregister = _filter_swig.interp_fir_filter_ccf_swigregister
interp_fir_filter_ccf_swigregister(interp_fir_filter_ccf)

def interp_fir_filter_ccf_make(*args, **kwargs):
  """interp_fir_filter_ccf_make(unsigned int interpolation, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
  return _filter_swig.interp_fir_filter_ccf_make(*args, **kwargs)

class interp_fir_filter_fcc(object):
    """Proxy of C++ gr::filter::interp_fir_filter_fcc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(unsigned int interpolation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr"""
        return _filter_swig.interp_fir_filter_fcc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.interp_fir_filter_fcc_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.interp_fir_filter_fcc_taps(self)

    __swig_destroy__ = _filter_swig.delete_interp_fir_filter_fcc
    __del__ = lambda self : None;
interp_fir_filter_fcc_swigregister = _filter_swig.interp_fir_filter_fcc_swigregister
interp_fir_filter_fcc_swigregister(interp_fir_filter_fcc)

def interp_fir_filter_fcc_make(*args, **kwargs):
  """interp_fir_filter_fcc_make(unsigned int interpolation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr"""
  return _filter_swig.interp_fir_filter_fcc_make(*args, **kwargs)

class interp_fir_filter_fff(object):
    """Proxy of C++ gr::filter::interp_fir_filter_fff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(unsigned int interpolation, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
        return _filter_swig.interp_fir_filter_fff_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.interp_fir_filter_fff_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.interp_fir_filter_fff_taps(self)

    __swig_destroy__ = _filter_swig.delete_interp_fir_filter_fff
    __del__ = lambda self : None;
interp_fir_filter_fff_swigregister = _filter_swig.interp_fir_filter_fff_swigregister
interp_fir_filter_fff_swigregister(interp_fir_filter_fff)

def interp_fir_filter_fff_make(*args, **kwargs):
  """interp_fir_filter_fff_make(unsigned int interpolation, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
  return _filter_swig.interp_fir_filter_fff_make(*args, **kwargs)

class interp_fir_filter_fsf(object):
    """Proxy of C++ gr::filter::interp_fir_filter_fsf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(unsigned int interpolation, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
        return _filter_swig.interp_fir_filter_fsf_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.interp_fir_filter_fsf_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.interp_fir_filter_fsf_taps(self)

    __swig_destroy__ = _filter_swig.delete_interp_fir_filter_fsf
    __del__ = lambda self : None;
interp_fir_filter_fsf_swigregister = _filter_swig.interp_fir_filter_fsf_swigregister
interp_fir_filter_fsf_swigregister(interp_fir_filter_fsf)

def interp_fir_filter_fsf_make(*args, **kwargs):
  """interp_fir_filter_fsf_make(unsigned int interpolation, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
  return _filter_swig.interp_fir_filter_fsf_make(*args, **kwargs)

class interp_fir_filter_scc(object):
    """Proxy of C++ gr::filter::interp_fir_filter_scc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(unsigned int interpolation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr"""
        return _filter_swig.interp_fir_filter_scc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.interp_fir_filter_scc_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.interp_fir_filter_scc_taps(self)

    __swig_destroy__ = _filter_swig.delete_interp_fir_filter_scc
    __del__ = lambda self : None;
interp_fir_filter_scc_swigregister = _filter_swig.interp_fir_filter_scc_swigregister
interp_fir_filter_scc_swigregister(interp_fir_filter_scc)

def interp_fir_filter_scc_make(*args, **kwargs):
  """interp_fir_filter_scc_make(unsigned int interpolation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr"""
  return _filter_swig.interp_fir_filter_scc_make(*args, **kwargs)

class pfb_arb_resampler_ccf(object):
    """Proxy of C++ gr::filter::pfb_arb_resampler_ccf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(float rate, std::vector<(float,std::allocator<(float)>)> taps, 
            unsigned int filter_size = 32) -> sptr
        """
        return _filter_swig.pfb_arb_resampler_ccf_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.pfb_arb_resampler_ccf_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> __dummy_11__"""
        return _filter_swig.pfb_arb_resampler_ccf_taps(self)

    def print_taps(self):
        """print_taps(self)"""
        return _filter_swig.pfb_arb_resampler_ccf_print_taps(self)

    def set_rate(self, *args, **kwargs):
        """set_rate(self, float rate)"""
        return _filter_swig.pfb_arb_resampler_ccf_set_rate(self, *args, **kwargs)

    def set_phase(self, *args, **kwargs):
        """set_phase(self, float ph)"""
        return _filter_swig.pfb_arb_resampler_ccf_set_phase(self, *args, **kwargs)

    def phase(self):
        """phase(self) -> float"""
        return _filter_swig.pfb_arb_resampler_ccf_phase(self)

    __swig_destroy__ = _filter_swig.delete_pfb_arb_resampler_ccf
    __del__ = lambda self : None;
pfb_arb_resampler_ccf_swigregister = _filter_swig.pfb_arb_resampler_ccf_swigregister
pfb_arb_resampler_ccf_swigregister(pfb_arb_resampler_ccf)

def pfb_arb_resampler_ccf_make(*args, **kwargs):
  """
    pfb_arb_resampler_ccf_make(float rate, std::vector<(float,std::allocator<(float)>)> taps, 
        unsigned int filter_size = 32) -> sptr
    """
  return _filter_swig.pfb_arb_resampler_ccf_make(*args, **kwargs)

class pfb_arb_resampler_fff(object):
    """Proxy of C++ gr::filter::pfb_arb_resampler_fff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(float rate, std::vector<(float,std::allocator<(float)>)> taps, 
            unsigned int filter_size = 32) -> sptr
        """
        return _filter_swig.pfb_arb_resampler_fff_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.pfb_arb_resampler_fff_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> __dummy_11__"""
        return _filter_swig.pfb_arb_resampler_fff_taps(self)

    def print_taps(self):
        """print_taps(self)"""
        return _filter_swig.pfb_arb_resampler_fff_print_taps(self)

    def set_rate(self, *args, **kwargs):
        """set_rate(self, float rate)"""
        return _filter_swig.pfb_arb_resampler_fff_set_rate(self, *args, **kwargs)

    def set_phase(self, *args, **kwargs):
        """set_phase(self, float ph)"""
        return _filter_swig.pfb_arb_resampler_fff_set_phase(self, *args, **kwargs)

    def phase(self):
        """phase(self) -> float"""
        return _filter_swig.pfb_arb_resampler_fff_phase(self)

    __swig_destroy__ = _filter_swig.delete_pfb_arb_resampler_fff
    __del__ = lambda self : None;
pfb_arb_resampler_fff_swigregister = _filter_swig.pfb_arb_resampler_fff_swigregister
pfb_arb_resampler_fff_swigregister(pfb_arb_resampler_fff)

def pfb_arb_resampler_fff_make(*args, **kwargs):
  """
    pfb_arb_resampler_fff_make(float rate, std::vector<(float,std::allocator<(float)>)> taps, 
        unsigned int filter_size = 32) -> sptr
    """
  return _filter_swig.pfb_arb_resampler_fff_make(*args, **kwargs)

class pfb_channelizer_ccf(object):
    """Proxy of C++ gr::filter::pfb_channelizer_ccf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int numchans, std::vector<(float,std::allocator<(float)>)> taps, 
            float oversample_rate) -> sptr
        """
        return _filter_swig.pfb_channelizer_ccf_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.pfb_channelizer_ccf_set_taps(self, *args, **kwargs)

    def print_taps(self):
        """print_taps(self)"""
        return _filter_swig.pfb_channelizer_ccf_print_taps(self)

    def taps(self):
        """taps(self) -> __dummy_11__"""
        return _filter_swig.pfb_channelizer_ccf_taps(self)

    def set_channel_map(self, *args, **kwargs):
        """set_channel_map(self, std::vector<(int,std::allocator<(int)>)> map)"""
        return _filter_swig.pfb_channelizer_ccf_set_channel_map(self, *args, **kwargs)

    def channel_map(self):
        """channel_map(self) -> std::vector<(int,std::allocator<(int)>)>"""
        return _filter_swig.pfb_channelizer_ccf_channel_map(self)

    __swig_destroy__ = _filter_swig.delete_pfb_channelizer_ccf
    __del__ = lambda self : None;
pfb_channelizer_ccf_swigregister = _filter_swig.pfb_channelizer_ccf_swigregister
pfb_channelizer_ccf_swigregister(pfb_channelizer_ccf)

def pfb_channelizer_ccf_make(*args, **kwargs):
  """
    pfb_channelizer_ccf_make(unsigned int numchans, std::vector<(float,std::allocator<(float)>)> taps, 
        float oversample_rate) -> sptr
    """
  return _filter_swig.pfb_channelizer_ccf_make(*args, **kwargs)

class pfb_decimator_ccf(object):
    """Proxy of C++ gr::filter::pfb_decimator_ccf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int decim, std::vector<(float,std::allocator<(float)>)> taps, 
            unsigned int channel) -> sptr
        """
        return _filter_swig.pfb_decimator_ccf_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.pfb_decimator_ccf_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> __dummy_11__"""
        return _filter_swig.pfb_decimator_ccf_taps(self)

    def print_taps(self):
        """print_taps(self)"""
        return _filter_swig.pfb_decimator_ccf_print_taps(self)

    __swig_destroy__ = _filter_swig.delete_pfb_decimator_ccf
    __del__ = lambda self : None;
pfb_decimator_ccf_swigregister = _filter_swig.pfb_decimator_ccf_swigregister
pfb_decimator_ccf_swigregister(pfb_decimator_ccf)

def pfb_decimator_ccf_make(*args, **kwargs):
  """
    pfb_decimator_ccf_make(unsigned int decim, std::vector<(float,std::allocator<(float)>)> taps, 
        unsigned int channel) -> sptr
    """
  return _filter_swig.pfb_decimator_ccf_make(*args, **kwargs)

class pfb_interpolator_ccf(object):
    """Proxy of C++ gr::filter::pfb_interpolator_ccf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(unsigned int interp, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
        return _filter_swig.pfb_interpolator_ccf_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.pfb_interpolator_ccf_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> __dummy_11__"""
        return _filter_swig.pfb_interpolator_ccf_taps(self)

    def print_taps(self):
        """print_taps(self)"""
        return _filter_swig.pfb_interpolator_ccf_print_taps(self)

    __swig_destroy__ = _filter_swig.delete_pfb_interpolator_ccf
    __del__ = lambda self : None;
pfb_interpolator_ccf_swigregister = _filter_swig.pfb_interpolator_ccf_swigregister
pfb_interpolator_ccf_swigregister(pfb_interpolator_ccf)

def pfb_interpolator_ccf_make(*args, **kwargs):
  """pfb_interpolator_ccf_make(unsigned int interp, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
  return _filter_swig.pfb_interpolator_ccf_make(*args, **kwargs)

class pfb_synthesizer_ccf(object):
    """Proxy of C++ gr::filter::pfb_synthesizer_ccf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int numchans, std::vector<(float,std::allocator<(float)>)> taps, 
            bool twox = False) -> sptr
        """
        return _filter_swig.pfb_synthesizer_ccf_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.pfb_synthesizer_ccf_set_taps(self, *args, **kwargs)

    def print_taps(self):
        """print_taps(self)"""
        return _filter_swig.pfb_synthesizer_ccf_print_taps(self)

    def taps(self):
        """taps(self) -> __dummy_11__"""
        return _filter_swig.pfb_synthesizer_ccf_taps(self)

    def set_channel_map(self, *args, **kwargs):
        """set_channel_map(self, std::vector<(int,std::allocator<(int)>)> map)"""
        return _filter_swig.pfb_synthesizer_ccf_set_channel_map(self, *args, **kwargs)

    def channel_map(self):
        """channel_map(self) -> std::vector<(int,std::allocator<(int)>)>"""
        return _filter_swig.pfb_synthesizer_ccf_channel_map(self)

    __swig_destroy__ = _filter_swig.delete_pfb_synthesizer_ccf
    __del__ = lambda self : None;
pfb_synthesizer_ccf_swigregister = _filter_swig.pfb_synthesizer_ccf_swigregister
pfb_synthesizer_ccf_swigregister(pfb_synthesizer_ccf)

def pfb_synthesizer_ccf_make(*args, **kwargs):
  """
    pfb_synthesizer_ccf_make(unsigned int numchans, std::vector<(float,std::allocator<(float)>)> taps, 
        bool twox = False) -> sptr
    """
  return _filter_swig.pfb_synthesizer_ccf_make(*args, **kwargs)

class rational_resampler_base_ccc(object):
    """Proxy of C++ gr::filter::rational_resampler_base_ccc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int interpolation, unsigned int decimation, 
            std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr
        """
        return _filter_swig.rational_resampler_base_ccc_make(*args, **kwargs)

    make = staticmethod(make)
    def interpolation(self):
        """interpolation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_ccc_interpolation(self)

    def decimation(self):
        """decimation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_ccc_decimation(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.rational_resampler_base_ccc_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.rational_resampler_base_ccc_taps(self)

    __swig_destroy__ = _filter_swig.delete_rational_resampler_base_ccc
    __del__ = lambda self : None;
rational_resampler_base_ccc_swigregister = _filter_swig.rational_resampler_base_ccc_swigregister
rational_resampler_base_ccc_swigregister(rational_resampler_base_ccc)

def rational_resampler_base_ccc_make(*args, **kwargs):
  """
    rational_resampler_base_ccc_make(unsigned int interpolation, unsigned int decimation, 
        std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr
    """
  return _filter_swig.rational_resampler_base_ccc_make(*args, **kwargs)

class rational_resampler_base_ccf(object):
    """Proxy of C++ gr::filter::rational_resampler_base_ccf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int interpolation, unsigned int decimation, 
            std::vector<(float,std::allocator<(float)>)> taps) -> sptr
        """
        return _filter_swig.rational_resampler_base_ccf_make(*args, **kwargs)

    make = staticmethod(make)
    def interpolation(self):
        """interpolation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_ccf_interpolation(self)

    def decimation(self):
        """decimation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_ccf_decimation(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.rational_resampler_base_ccf_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.rational_resampler_base_ccf_taps(self)

    __swig_destroy__ = _filter_swig.delete_rational_resampler_base_ccf
    __del__ = lambda self : None;
rational_resampler_base_ccf_swigregister = _filter_swig.rational_resampler_base_ccf_swigregister
rational_resampler_base_ccf_swigregister(rational_resampler_base_ccf)

def rational_resampler_base_ccf_make(*args, **kwargs):
  """
    rational_resampler_base_ccf_make(unsigned int interpolation, unsigned int decimation, 
        std::vector<(float,std::allocator<(float)>)> taps) -> sptr
    """
  return _filter_swig.rational_resampler_base_ccf_make(*args, **kwargs)

class rational_resampler_base_fcc(object):
    """Proxy of C++ gr::filter::rational_resampler_base_fcc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int interpolation, unsigned int decimation, 
            std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr
        """
        return _filter_swig.rational_resampler_base_fcc_make(*args, **kwargs)

    make = staticmethod(make)
    def interpolation(self):
        """interpolation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_fcc_interpolation(self)

    def decimation(self):
        """decimation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_fcc_decimation(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.rational_resampler_base_fcc_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.rational_resampler_base_fcc_taps(self)

    __swig_destroy__ = _filter_swig.delete_rational_resampler_base_fcc
    __del__ = lambda self : None;
rational_resampler_base_fcc_swigregister = _filter_swig.rational_resampler_base_fcc_swigregister
rational_resampler_base_fcc_swigregister(rational_resampler_base_fcc)

def rational_resampler_base_fcc_make(*args, **kwargs):
  """
    rational_resampler_base_fcc_make(unsigned int interpolation, unsigned int decimation, 
        std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr
    """
  return _filter_swig.rational_resampler_base_fcc_make(*args, **kwargs)

class rational_resampler_base_fff(object):
    """Proxy of C++ gr::filter::rational_resampler_base_fff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int interpolation, unsigned int decimation, 
            std::vector<(float,std::allocator<(float)>)> taps) -> sptr
        """
        return _filter_swig.rational_resampler_base_fff_make(*args, **kwargs)

    make = staticmethod(make)
    def interpolation(self):
        """interpolation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_fff_interpolation(self)

    def decimation(self):
        """decimation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_fff_decimation(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.rational_resampler_base_fff_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.rational_resampler_base_fff_taps(self)

    __swig_destroy__ = _filter_swig.delete_rational_resampler_base_fff
    __del__ = lambda self : None;
rational_resampler_base_fff_swigregister = _filter_swig.rational_resampler_base_fff_swigregister
rational_resampler_base_fff_swigregister(rational_resampler_base_fff)

def rational_resampler_base_fff_make(*args, **kwargs):
  """
    rational_resampler_base_fff_make(unsigned int interpolation, unsigned int decimation, 
        std::vector<(float,std::allocator<(float)>)> taps) -> sptr
    """
  return _filter_swig.rational_resampler_base_fff_make(*args, **kwargs)

class rational_resampler_base_fsf(object):
    """Proxy of C++ gr::filter::rational_resampler_base_fsf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int interpolation, unsigned int decimation, 
            std::vector<(float,std::allocator<(float)>)> taps) -> sptr
        """
        return _filter_swig.rational_resampler_base_fsf_make(*args, **kwargs)

    make = staticmethod(make)
    def interpolation(self):
        """interpolation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_fsf_interpolation(self)

    def decimation(self):
        """decimation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_fsf_decimation(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.rational_resampler_base_fsf_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.rational_resampler_base_fsf_taps(self)

    __swig_destroy__ = _filter_swig.delete_rational_resampler_base_fsf
    __del__ = lambda self : None;
rational_resampler_base_fsf_swigregister = _filter_swig.rational_resampler_base_fsf_swigregister
rational_resampler_base_fsf_swigregister(rational_resampler_base_fsf)

def rational_resampler_base_fsf_make(*args, **kwargs):
  """
    rational_resampler_base_fsf_make(unsigned int interpolation, unsigned int decimation, 
        std::vector<(float,std::allocator<(float)>)> taps) -> sptr
    """
  return _filter_swig.rational_resampler_base_fsf_make(*args, **kwargs)

class rational_resampler_base_scc(object):
    """Proxy of C++ gr::filter::rational_resampler_base_scc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int interpolation, unsigned int decimation, 
            std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr
        """
        return _filter_swig.rational_resampler_base_scc_make(*args, **kwargs)

    make = staticmethod(make)
    def interpolation(self):
        """interpolation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_scc_interpolation(self)

    def decimation(self):
        """decimation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_scc_decimation(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.rational_resampler_base_scc_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.rational_resampler_base_scc_taps(self)

    __swig_destroy__ = _filter_swig.delete_rational_resampler_base_scc
    __del__ = lambda self : None;
rational_resampler_base_scc_swigregister = _filter_swig.rational_resampler_base_scc_swigregister
rational_resampler_base_scc_swigregister(rational_resampler_base_scc)

def rational_resampler_base_scc_make(*args, **kwargs):
  """
    rational_resampler_base_scc_make(unsigned int interpolation, unsigned int decimation, 
        std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr
    """
  return _filter_swig.rational_resampler_base_scc_make(*args, **kwargs)

class single_pole_iir_filter_cc(object):
    """Proxy of C++ gr::filter::single_pole_iir_filter_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(double alpha, unsigned int vlen = 1) -> sptr"""
        return _filter_swig.single_pole_iir_filter_cc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, double alpha)"""
        return _filter_swig.single_pole_iir_filter_cc_set_taps(self, *args, **kwargs)

    __swig_destroy__ = _filter_swig.delete_single_pole_iir_filter_cc
    __del__ = lambda self : None;
single_pole_iir_filter_cc_swigregister = _filter_swig.single_pole_iir_filter_cc_swigregister
single_pole_iir_filter_cc_swigregister(single_pole_iir_filter_cc)

def single_pole_iir_filter_cc_make(*args, **kwargs):
  """single_pole_iir_filter_cc_make(double alpha, unsigned int vlen = 1) -> sptr"""
  return _filter_swig.single_pole_iir_filter_cc_make(*args, **kwargs)

class single_pole_iir_filter_ff(object):
    """Proxy of C++ gr::filter::single_pole_iir_filter_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(double alpha, unsigned int vlen = 1) -> sptr"""
        return _filter_swig.single_pole_iir_filter_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, double alpha)"""
        return _filter_swig.single_pole_iir_filter_ff_set_taps(self, *args, **kwargs)

    __swig_destroy__ = _filter_swig.delete_single_pole_iir_filter_ff
    __del__ = lambda self : None;
single_pole_iir_filter_ff_swigregister = _filter_swig.single_pole_iir_filter_ff_swigregister
single_pole_iir_filter_ff_swigregister(single_pole_iir_filter_ff)

def single_pole_iir_filter_ff_make(*args, **kwargs):
  """single_pole_iir_filter_ff_make(double alpha, unsigned int vlen = 1) -> sptr"""
  return _filter_swig.single_pole_iir_filter_ff_make(*args, **kwargs)

class channel_model(object):
    """Proxy of C++ gr::filter::channel_model class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(double noise_voltage = 0.0, double frequency_offset = 0.0, 
            double epsilon = 1.0, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps = std::vector< gr_complex >(1,1), 
            double noise_seed = 0) -> sptr
        """
        return _filter_swig.channel_model_make(*args, **kwargs)

    make = staticmethod(make)
    def set_noise_voltage(self, *args, **kwargs):
        """set_noise_voltage(self, double noise_voltage)"""
        return _filter_swig.channel_model_set_noise_voltage(self, *args, **kwargs)

    def set_frequency_offset(self, *args, **kwargs):
        """set_frequency_offset(self, double frequency_offset)"""
        return _filter_swig.channel_model_set_frequency_offset(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.channel_model_set_taps(self, *args, **kwargs)

    def set_timing_offset(self, *args, **kwargs):
        """set_timing_offset(self, double epsilon)"""
        return _filter_swig.channel_model_set_timing_offset(self, *args, **kwargs)

    def noise_voltage(self):
        """noise_voltage(self) -> double"""
        return _filter_swig.channel_model_noise_voltage(self)

    def frequency_offset(self):
        """frequency_offset(self) -> double"""
        return _filter_swig.channel_model_frequency_offset(self)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.channel_model_taps(self)

    def timing_offset(self):
        """timing_offset(self) -> double"""
        return _filter_swig.channel_model_timing_offset(self)

    __swig_destroy__ = _filter_swig.delete_channel_model
    __del__ = lambda self : None;
channel_model_swigregister = _filter_swig.channel_model_swigregister
channel_model_swigregister(channel_model)

def channel_model_make(*args, **kwargs):
  """
    channel_model_make(double noise_voltage = 0.0, double frequency_offset = 0.0, 
        double epsilon = 1.0, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps = std::vector< gr_complex >(1,1), 
        double noise_seed = 0) -> sptr
    """
  return _filter_swig.channel_model_make(*args, **kwargs)

class adaptive_fir_ccc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::adaptive_fir_ccc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> adaptive_fir_ccc_sptr
        __init__(self, adaptive_fir_ccc p) -> adaptive_fir_ccc_sptr
        """
        this = _filter_swig.new_adaptive_fir_ccc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> adaptive_fir_ccc"""
        return _filter_swig.adaptive_fir_ccc_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_adaptive_fir_ccc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, char name, int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr"""
        return _filter_swig.adaptive_fir_ccc_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.adaptive_fir_ccc_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.adaptive_fir_ccc_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.adaptive_fir_ccc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.adaptive_fir_ccc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.adaptive_fir_ccc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.adaptive_fir_ccc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.adaptive_fir_ccc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.adaptive_fir_ccc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.adaptive_fir_ccc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.adaptive_fir_ccc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.adaptive_fir_ccc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.adaptive_fir_ccc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.adaptive_fir_ccc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.adaptive_fir_ccc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.adaptive_fir_ccc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.adaptive_fir_ccc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.adaptive_fir_ccc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.adaptive_fir_ccc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.adaptive_fir_ccc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.adaptive_fir_ccc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.adaptive_fir_ccc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.adaptive_fir_ccc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.adaptive_fir_ccc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.adaptive_fir_ccc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.adaptive_fir_ccc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.adaptive_fir_ccc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.adaptive_fir_ccc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.adaptive_fir_ccc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.adaptive_fir_ccc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.adaptive_fir_ccc_sptr__handle_call(self, *args, **kwargs)

adaptive_fir_ccc_sptr_swigregister = _filter_swig.adaptive_fir_ccc_sptr_swigregister
adaptive_fir_ccc_sptr_swigregister(adaptive_fir_ccc_sptr)

adaptive_fir_ccc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
adaptive_fir_ccc = adaptive_fir_ccc.make;

class adaptive_fir_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::adaptive_fir_ccf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> adaptive_fir_ccf_sptr
        __init__(self, adaptive_fir_ccf p) -> adaptive_fir_ccf_sptr
        """
        this = _filter_swig.new_adaptive_fir_ccf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> adaptive_fir_ccf"""
        return _filter_swig.adaptive_fir_ccf_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_adaptive_fir_ccf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, char name, int decimation, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
        return _filter_swig.adaptive_fir_ccf_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.adaptive_fir_ccf_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.adaptive_fir_ccf_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.adaptive_fir_ccf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.adaptive_fir_ccf_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.adaptive_fir_ccf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.adaptive_fir_ccf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.adaptive_fir_ccf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.adaptive_fir_ccf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.adaptive_fir_ccf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.adaptive_fir_ccf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.adaptive_fir_ccf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.adaptive_fir_ccf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.adaptive_fir_ccf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.adaptive_fir_ccf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.adaptive_fir_ccf_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.adaptive_fir_ccf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.adaptive_fir_ccf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.adaptive_fir_ccf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.adaptive_fir_ccf_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.adaptive_fir_ccf_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.adaptive_fir_ccf_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.adaptive_fir_ccf_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.adaptive_fir_ccf_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.adaptive_fir_ccf_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.adaptive_fir_ccf_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.adaptive_fir_ccf_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.adaptive_fir_ccf_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.adaptive_fir_ccf_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.adaptive_fir_ccf_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.adaptive_fir_ccf_sptr__handle_call(self, *args, **kwargs)

adaptive_fir_ccf_sptr_swigregister = _filter_swig.adaptive_fir_ccf_sptr_swigregister
adaptive_fir_ccf_sptr_swigregister(adaptive_fir_ccf_sptr)

adaptive_fir_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
adaptive_fir_ccf = adaptive_fir_ccf.make;

class dc_blocker_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::dc_blocker_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> dc_blocker_cc_sptr
        __init__(self, dc_blocker_cc p) -> dc_blocker_cc_sptr
        """
        this = _filter_swig.new_dc_blocker_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> dc_blocker_cc"""
        return _filter_swig.dc_blocker_cc_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_dc_blocker_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, int D, bool long_form) -> sptr"""
        return _filter_swig.dc_blocker_cc_sptr_make(self, *args, **kwargs)

    def group_delay(self):
        """group_delay(self) -> int"""
        return _filter_swig.dc_blocker_cc_sptr_group_delay(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.dc_blocker_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.dc_blocker_cc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.dc_blocker_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.dc_blocker_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.dc_blocker_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.dc_blocker_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.dc_blocker_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.dc_blocker_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.dc_blocker_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.dc_blocker_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.dc_blocker_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.dc_blocker_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.dc_blocker_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.dc_blocker_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.dc_blocker_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.dc_blocker_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.dc_blocker_cc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.dc_blocker_cc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.dc_blocker_cc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.dc_blocker_cc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.dc_blocker_cc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.dc_blocker_cc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.dc_blocker_cc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.dc_blocker_cc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.dc_blocker_cc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.dc_blocker_cc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.dc_blocker_cc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.dc_blocker_cc_sptr__handle_call(self, *args, **kwargs)

dc_blocker_cc_sptr_swigregister = _filter_swig.dc_blocker_cc_sptr_swigregister
dc_blocker_cc_sptr_swigregister(dc_blocker_cc_sptr)

dc_blocker_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dc_blocker_cc = dc_blocker_cc.make;

class dc_blocker_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::dc_blocker_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> dc_blocker_ff_sptr
        __init__(self, dc_blocker_ff p) -> dc_blocker_ff_sptr
        """
        this = _filter_swig.new_dc_blocker_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> dc_blocker_ff"""
        return _filter_swig.dc_blocker_ff_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_dc_blocker_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, int D, bool long_form = True) -> sptr"""
        return _filter_swig.dc_blocker_ff_sptr_make(self, *args, **kwargs)

    def group_delay(self):
        """group_delay(self) -> int"""
        return _filter_swig.dc_blocker_ff_sptr_group_delay(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.dc_blocker_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.dc_blocker_ff_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.dc_blocker_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.dc_blocker_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.dc_blocker_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.dc_blocker_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.dc_blocker_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.dc_blocker_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.dc_blocker_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.dc_blocker_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.dc_blocker_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.dc_blocker_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.dc_blocker_ff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.dc_blocker_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.dc_blocker_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.dc_blocker_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.dc_blocker_ff_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.dc_blocker_ff_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.dc_blocker_ff_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.dc_blocker_ff_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.dc_blocker_ff_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.dc_blocker_ff_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.dc_blocker_ff_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.dc_blocker_ff_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.dc_blocker_ff_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.dc_blocker_ff_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.dc_blocker_ff_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.dc_blocker_ff_sptr__handle_call(self, *args, **kwargs)

dc_blocker_ff_sptr_swigregister = _filter_swig.dc_blocker_ff_sptr_swigregister
dc_blocker_ff_sptr_swigregister(dc_blocker_ff_sptr)

dc_blocker_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dc_blocker_ff = dc_blocker_ff.make;

class filter_delay_fc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::filter_delay_fc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> filter_delay_fc_sptr
        __init__(self, filter_delay_fc p) -> filter_delay_fc_sptr
        """
        this = _filter_swig.new_filter_delay_fc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> filter_delay_fc"""
        return _filter_swig.filter_delay_fc_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_filter_delay_fc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
        return _filter_swig.filter_delay_fc_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.filter_delay_fc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.filter_delay_fc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.filter_delay_fc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.filter_delay_fc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.filter_delay_fc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.filter_delay_fc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.filter_delay_fc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.filter_delay_fc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.filter_delay_fc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.filter_delay_fc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.filter_delay_fc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.filter_delay_fc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.filter_delay_fc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.filter_delay_fc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.filter_delay_fc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.filter_delay_fc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.filter_delay_fc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.filter_delay_fc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.filter_delay_fc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.filter_delay_fc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.filter_delay_fc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.filter_delay_fc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.filter_delay_fc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.filter_delay_fc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.filter_delay_fc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.filter_delay_fc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.filter_delay_fc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.filter_delay_fc_sptr__handle_call(self, *args, **kwargs)

filter_delay_fc_sptr_swigregister = _filter_swig.filter_delay_fc_sptr_swigregister
filter_delay_fc_sptr_swigregister(filter_delay_fc_sptr)

filter_delay_fc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
filter_delay_fc = filter_delay_fc.make;

class fir_filter_ccc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::fir_filter_ccc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> fir_filter_ccc_sptr
        __init__(self, fir_filter_ccc p) -> fir_filter_ccc_sptr
        """
        this = _filter_swig.new_fir_filter_ccc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> fir_filter_ccc"""
        return _filter_swig.fir_filter_ccc_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_fir_filter_ccc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr"""
        return _filter_swig.fir_filter_ccc_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.fir_filter_ccc_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.fir_filter_ccc_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.fir_filter_ccc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.fir_filter_ccc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.fir_filter_ccc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.fir_filter_ccc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.fir_filter_ccc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.fir_filter_ccc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.fir_filter_ccc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.fir_filter_ccc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.fir_filter_ccc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.fir_filter_ccc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.fir_filter_ccc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.fir_filter_ccc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.fir_filter_ccc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.fir_filter_ccc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.fir_filter_ccc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.fir_filter_ccc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.fir_filter_ccc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.fir_filter_ccc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.fir_filter_ccc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.fir_filter_ccc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.fir_filter_ccc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.fir_filter_ccc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.fir_filter_ccc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.fir_filter_ccc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.fir_filter_ccc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.fir_filter_ccc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.fir_filter_ccc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.fir_filter_ccc_sptr__handle_call(self, *args, **kwargs)

fir_filter_ccc_sptr_swigregister = _filter_swig.fir_filter_ccc_sptr_swigregister
fir_filter_ccc_sptr_swigregister(fir_filter_ccc_sptr)

fir_filter_ccc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fir_filter_ccc = fir_filter_ccc.make;

class fir_filter_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::fir_filter_ccf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> fir_filter_ccf_sptr
        __init__(self, fir_filter_ccf p) -> fir_filter_ccf_sptr
        """
        this = _filter_swig.new_fir_filter_ccf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> fir_filter_ccf"""
        return _filter_swig.fir_filter_ccf_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_fir_filter_ccf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, int decimation, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
        return _filter_swig.fir_filter_ccf_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.fir_filter_ccf_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.fir_filter_ccf_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.fir_filter_ccf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.fir_filter_ccf_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.fir_filter_ccf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.fir_filter_ccf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.fir_filter_ccf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.fir_filter_ccf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.fir_filter_ccf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.fir_filter_ccf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.fir_filter_ccf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.fir_filter_ccf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.fir_filter_ccf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.fir_filter_ccf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.fir_filter_ccf_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.fir_filter_ccf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.fir_filter_ccf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.fir_filter_ccf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.fir_filter_ccf_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.fir_filter_ccf_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.fir_filter_ccf_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.fir_filter_ccf_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.fir_filter_ccf_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.fir_filter_ccf_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.fir_filter_ccf_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.fir_filter_ccf_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.fir_filter_ccf_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.fir_filter_ccf_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.fir_filter_ccf_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.fir_filter_ccf_sptr__handle_call(self, *args, **kwargs)

fir_filter_ccf_sptr_swigregister = _filter_swig.fir_filter_ccf_sptr_swigregister
fir_filter_ccf_sptr_swigregister(fir_filter_ccf_sptr)

fir_filter_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fir_filter_ccf = fir_filter_ccf.make;

class fir_filter_fcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::fir_filter_fcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> fir_filter_fcc_sptr
        __init__(self, fir_filter_fcc p) -> fir_filter_fcc_sptr
        """
        this = _filter_swig.new_fir_filter_fcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> fir_filter_fcc"""
        return _filter_swig.fir_filter_fcc_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_fir_filter_fcc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr"""
        return _filter_swig.fir_filter_fcc_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.fir_filter_fcc_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.fir_filter_fcc_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.fir_filter_fcc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.fir_filter_fcc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.fir_filter_fcc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.fir_filter_fcc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.fir_filter_fcc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.fir_filter_fcc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.fir_filter_fcc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.fir_filter_fcc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.fir_filter_fcc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.fir_filter_fcc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.fir_filter_fcc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.fir_filter_fcc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.fir_filter_fcc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.fir_filter_fcc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.fir_filter_fcc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.fir_filter_fcc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.fir_filter_fcc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.fir_filter_fcc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.fir_filter_fcc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.fir_filter_fcc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.fir_filter_fcc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.fir_filter_fcc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.fir_filter_fcc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.fir_filter_fcc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.fir_filter_fcc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.fir_filter_fcc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.fir_filter_fcc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.fir_filter_fcc_sptr__handle_call(self, *args, **kwargs)

fir_filter_fcc_sptr_swigregister = _filter_swig.fir_filter_fcc_sptr_swigregister
fir_filter_fcc_sptr_swigregister(fir_filter_fcc_sptr)

fir_filter_fcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fir_filter_fcc = fir_filter_fcc.make;

class fir_filter_fff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::fir_filter_fff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> fir_filter_fff_sptr
        __init__(self, fir_filter_fff p) -> fir_filter_fff_sptr
        """
        this = _filter_swig.new_fir_filter_fff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> fir_filter_fff"""
        return _filter_swig.fir_filter_fff_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_fir_filter_fff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, int decimation, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
        return _filter_swig.fir_filter_fff_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.fir_filter_fff_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.fir_filter_fff_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.fir_filter_fff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.fir_filter_fff_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.fir_filter_fff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.fir_filter_fff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.fir_filter_fff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.fir_filter_fff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.fir_filter_fff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.fir_filter_fff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.fir_filter_fff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.fir_filter_fff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.fir_filter_fff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.fir_filter_fff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.fir_filter_fff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.fir_filter_fff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.fir_filter_fff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.fir_filter_fff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.fir_filter_fff_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.fir_filter_fff_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.fir_filter_fff_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.fir_filter_fff_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.fir_filter_fff_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.fir_filter_fff_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.fir_filter_fff_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.fir_filter_fff_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.fir_filter_fff_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.fir_filter_fff_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.fir_filter_fff_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.fir_filter_fff_sptr__handle_call(self, *args, **kwargs)

fir_filter_fff_sptr_swigregister = _filter_swig.fir_filter_fff_sptr_swigregister
fir_filter_fff_sptr_swigregister(fir_filter_fff_sptr)

fir_filter_fff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fir_filter_fff = fir_filter_fff.make;

class fir_filter_fsf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::fir_filter_fsf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> fir_filter_fsf_sptr
        __init__(self, fir_filter_fsf p) -> fir_filter_fsf_sptr
        """
        this = _filter_swig.new_fir_filter_fsf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> fir_filter_fsf"""
        return _filter_swig.fir_filter_fsf_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_fir_filter_fsf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, int decimation, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
        return _filter_swig.fir_filter_fsf_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.fir_filter_fsf_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.fir_filter_fsf_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.fir_filter_fsf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.fir_filter_fsf_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.fir_filter_fsf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.fir_filter_fsf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.fir_filter_fsf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.fir_filter_fsf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.fir_filter_fsf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.fir_filter_fsf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.fir_filter_fsf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.fir_filter_fsf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.fir_filter_fsf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.fir_filter_fsf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.fir_filter_fsf_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.fir_filter_fsf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.fir_filter_fsf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.fir_filter_fsf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.fir_filter_fsf_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.fir_filter_fsf_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.fir_filter_fsf_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.fir_filter_fsf_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.fir_filter_fsf_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.fir_filter_fsf_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.fir_filter_fsf_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.fir_filter_fsf_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.fir_filter_fsf_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.fir_filter_fsf_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.fir_filter_fsf_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.fir_filter_fsf_sptr__handle_call(self, *args, **kwargs)

fir_filter_fsf_sptr_swigregister = _filter_swig.fir_filter_fsf_sptr_swigregister
fir_filter_fsf_sptr_swigregister(fir_filter_fsf_sptr)

fir_filter_fsf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fir_filter_fsf = fir_filter_fsf.make;

class fir_filter_scc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::fir_filter_scc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> fir_filter_scc_sptr
        __init__(self, fir_filter_scc p) -> fir_filter_scc_sptr
        """
        this = _filter_swig.new_fir_filter_scc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> fir_filter_scc"""
        return _filter_swig.fir_filter_scc_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_fir_filter_scc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr"""
        return _filter_swig.fir_filter_scc_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.fir_filter_scc_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.fir_filter_scc_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.fir_filter_scc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.fir_filter_scc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.fir_filter_scc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.fir_filter_scc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.fir_filter_scc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.fir_filter_scc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.fir_filter_scc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.fir_filter_scc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.fir_filter_scc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.fir_filter_scc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.fir_filter_scc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.fir_filter_scc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.fir_filter_scc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.fir_filter_scc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.fir_filter_scc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.fir_filter_scc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.fir_filter_scc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.fir_filter_scc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.fir_filter_scc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.fir_filter_scc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.fir_filter_scc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.fir_filter_scc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.fir_filter_scc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.fir_filter_scc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.fir_filter_scc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.fir_filter_scc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.fir_filter_scc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.fir_filter_scc_sptr__handle_call(self, *args, **kwargs)

fir_filter_scc_sptr_swigregister = _filter_swig.fir_filter_scc_sptr_swigregister
fir_filter_scc_sptr_swigregister(fir_filter_scc_sptr)

fir_filter_scc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fir_filter_scc = fir_filter_scc.make;

class fft_filter_ccc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::fft_filter_ccc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> fft_filter_ccc_sptr
        __init__(self, fft_filter_ccc p) -> fft_filter_ccc_sptr
        """
        this = _filter_swig.new_fft_filter_ccc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> fft_filter_ccc"""
        return _filter_swig.fft_filter_ccc_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_fft_filter_ccc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps, 
            int nthreads = 1) -> sptr
        """
        return _filter_swig.fft_filter_ccc_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.fft_filter_ccc_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.fft_filter_ccc_sptr_taps(self)

    def set_nthreads(self, *args, **kwargs):
        """set_nthreads(self, int n)"""
        return _filter_swig.fft_filter_ccc_sptr_set_nthreads(self, *args, **kwargs)

    def nthreads(self):
        """nthreads(self) -> int"""
        return _filter_swig.fft_filter_ccc_sptr_nthreads(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.fft_filter_ccc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.fft_filter_ccc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.fft_filter_ccc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.fft_filter_ccc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.fft_filter_ccc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.fft_filter_ccc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.fft_filter_ccc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.fft_filter_ccc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.fft_filter_ccc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.fft_filter_ccc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.fft_filter_ccc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.fft_filter_ccc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.fft_filter_ccc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.fft_filter_ccc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.fft_filter_ccc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.fft_filter_ccc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.fft_filter_ccc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.fft_filter_ccc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.fft_filter_ccc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.fft_filter_ccc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.fft_filter_ccc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.fft_filter_ccc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.fft_filter_ccc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.fft_filter_ccc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.fft_filter_ccc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.fft_filter_ccc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.fft_filter_ccc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.fft_filter_ccc_sptr__handle_call(self, *args, **kwargs)

fft_filter_ccc_sptr_swigregister = _filter_swig.fft_filter_ccc_sptr_swigregister
fft_filter_ccc_sptr_swigregister(fft_filter_ccc_sptr)

fft_filter_ccc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fft_filter_ccc = fft_filter_ccc.make;

class fft_filter_fff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::fft_filter_fff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> fft_filter_fff_sptr
        __init__(self, fft_filter_fff p) -> fft_filter_fff_sptr
        """
        this = _filter_swig.new_fft_filter_fff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> fft_filter_fff"""
        return _filter_swig.fft_filter_fff_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_fft_filter_fff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, int decimation, std::vector<(float,std::allocator<(float)>)> taps, 
            int nthreads = 1) -> sptr
        """
        return _filter_swig.fft_filter_fff_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.fft_filter_fff_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.fft_filter_fff_sptr_taps(self)

    def set_nthreads(self, *args, **kwargs):
        """set_nthreads(self, int n)"""
        return _filter_swig.fft_filter_fff_sptr_set_nthreads(self, *args, **kwargs)

    def nthreads(self):
        """nthreads(self) -> int"""
        return _filter_swig.fft_filter_fff_sptr_nthreads(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.fft_filter_fff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.fft_filter_fff_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.fft_filter_fff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.fft_filter_fff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.fft_filter_fff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.fft_filter_fff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.fft_filter_fff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.fft_filter_fff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.fft_filter_fff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.fft_filter_fff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.fft_filter_fff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.fft_filter_fff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.fft_filter_fff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.fft_filter_fff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.fft_filter_fff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.fft_filter_fff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.fft_filter_fff_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.fft_filter_fff_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.fft_filter_fff_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.fft_filter_fff_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.fft_filter_fff_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.fft_filter_fff_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.fft_filter_fff_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.fft_filter_fff_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.fft_filter_fff_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.fft_filter_fff_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.fft_filter_fff_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.fft_filter_fff_sptr__handle_call(self, *args, **kwargs)

fft_filter_fff_sptr_swigregister = _filter_swig.fft_filter_fff_sptr_swigregister
fft_filter_fff_sptr_swigregister(fft_filter_fff_sptr)

fft_filter_fff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fft_filter_fff = fft_filter_fff.make;

class fractional_interpolator_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::fractional_interpolator_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> fractional_interpolator_cc_sptr
        __init__(self, fractional_interpolator_cc p) -> fractional_interpolator_cc_sptr
        """
        this = _filter_swig.new_fractional_interpolator_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> fractional_interpolator_cc"""
        return _filter_swig.fractional_interpolator_cc_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_fractional_interpolator_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, float phase_shift, float interp_ratio) -> sptr"""
        return _filter_swig.fractional_interpolator_cc_sptr_make(self, *args, **kwargs)

    def mu(self):
        """mu(self) -> float"""
        return _filter_swig.fractional_interpolator_cc_sptr_mu(self)

    def interp_ratio(self):
        """interp_ratio(self) -> float"""
        return _filter_swig.fractional_interpolator_cc_sptr_interp_ratio(self)

    def set_mu(self, *args, **kwargs):
        """set_mu(self, float mu)"""
        return _filter_swig.fractional_interpolator_cc_sptr_set_mu(self, *args, **kwargs)

    def set_interp_ratio(self, *args, **kwargs):
        """set_interp_ratio(self, float interp_ratio)"""
        return _filter_swig.fractional_interpolator_cc_sptr_set_interp_ratio(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.fractional_interpolator_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.fractional_interpolator_cc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.fractional_interpolator_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.fractional_interpolator_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.fractional_interpolator_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.fractional_interpolator_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.fractional_interpolator_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.fractional_interpolator_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.fractional_interpolator_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.fractional_interpolator_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.fractional_interpolator_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.fractional_interpolator_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.fractional_interpolator_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.fractional_interpolator_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.fractional_interpolator_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.fractional_interpolator_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.fractional_interpolator_cc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.fractional_interpolator_cc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.fractional_interpolator_cc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.fractional_interpolator_cc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.fractional_interpolator_cc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.fractional_interpolator_cc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.fractional_interpolator_cc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.fractional_interpolator_cc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.fractional_interpolator_cc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.fractional_interpolator_cc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.fractional_interpolator_cc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.fractional_interpolator_cc_sptr__handle_call(self, *args, **kwargs)

fractional_interpolator_cc_sptr_swigregister = _filter_swig.fractional_interpolator_cc_sptr_swigregister
fractional_interpolator_cc_sptr_swigregister(fractional_interpolator_cc_sptr)

fractional_interpolator_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fractional_interpolator_cc = fractional_interpolator_cc.make;

class fractional_interpolator_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::fractional_interpolator_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> fractional_interpolator_ff_sptr
        __init__(self, fractional_interpolator_ff p) -> fractional_interpolator_ff_sptr
        """
        this = _filter_swig.new_fractional_interpolator_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> fractional_interpolator_ff"""
        return _filter_swig.fractional_interpolator_ff_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_fractional_interpolator_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, float phase_shift, float interp_ratio) -> sptr"""
        return _filter_swig.fractional_interpolator_ff_sptr_make(self, *args, **kwargs)

    def mu(self):
        """mu(self) -> float"""
        return _filter_swig.fractional_interpolator_ff_sptr_mu(self)

    def interp_ratio(self):
        """interp_ratio(self) -> float"""
        return _filter_swig.fractional_interpolator_ff_sptr_interp_ratio(self)

    def set_mu(self, *args, **kwargs):
        """set_mu(self, float mu)"""
        return _filter_swig.fractional_interpolator_ff_sptr_set_mu(self, *args, **kwargs)

    def set_interp_ratio(self, *args, **kwargs):
        """set_interp_ratio(self, float interp_ratio)"""
        return _filter_swig.fractional_interpolator_ff_sptr_set_interp_ratio(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.fractional_interpolator_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.fractional_interpolator_ff_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.fractional_interpolator_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.fractional_interpolator_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.fractional_interpolator_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.fractional_interpolator_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.fractional_interpolator_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.fractional_interpolator_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.fractional_interpolator_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.fractional_interpolator_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.fractional_interpolator_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.fractional_interpolator_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.fractional_interpolator_ff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.fractional_interpolator_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.fractional_interpolator_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.fractional_interpolator_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.fractional_interpolator_ff_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.fractional_interpolator_ff_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.fractional_interpolator_ff_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.fractional_interpolator_ff_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.fractional_interpolator_ff_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.fractional_interpolator_ff_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.fractional_interpolator_ff_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.fractional_interpolator_ff_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.fractional_interpolator_ff_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.fractional_interpolator_ff_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.fractional_interpolator_ff_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.fractional_interpolator_ff_sptr__handle_call(self, *args, **kwargs)

fractional_interpolator_ff_sptr_swigregister = _filter_swig.fractional_interpolator_ff_sptr_swigregister
fractional_interpolator_ff_sptr_swigregister(fractional_interpolator_ff_sptr)

fractional_interpolator_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fractional_interpolator_ff = fractional_interpolator_ff.make;

class freq_xlating_fir_filter_ccc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::freq_xlating_fir_filter_ccc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> freq_xlating_fir_filter_ccc_sptr
        __init__(self, freq_xlating_fir_filter_ccc p) -> freq_xlating_fir_filter_ccc_sptr
        """
        this = _filter_swig.new_freq_xlating_fir_filter_ccc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> freq_xlating_fir_filter_ccc"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_freq_xlating_fir_filter_ccc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps, 
            double center_freq, 
            double sampling_freq) -> sptr
        """
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_make(self, *args, **kwargs)

    def set_center_freq(self, *args, **kwargs):
        """set_center_freq(self, double center_freq)"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_set_center_freq(self, *args, **kwargs)

    def center_freq(self):
        """center_freq(self) -> double"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_center_freq(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.freq_xlating_fir_filter_ccc_sptr__handle_call(self, *args, **kwargs)

freq_xlating_fir_filter_ccc_sptr_swigregister = _filter_swig.freq_xlating_fir_filter_ccc_sptr_swigregister
freq_xlating_fir_filter_ccc_sptr_swigregister(freq_xlating_fir_filter_ccc_sptr)

freq_xlating_fir_filter_ccc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
freq_xlating_fir_filter_ccc = freq_xlating_fir_filter_ccc.make;

class freq_xlating_fir_filter_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::freq_xlating_fir_filter_ccf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> freq_xlating_fir_filter_ccf_sptr
        __init__(self, freq_xlating_fir_filter_ccf p) -> freq_xlating_fir_filter_ccf_sptr
        """
        this = _filter_swig.new_freq_xlating_fir_filter_ccf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> freq_xlating_fir_filter_ccf"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_freq_xlating_fir_filter_ccf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, int decimation, std::vector<(float,std::allocator<(float)>)> taps, 
            double center_freq, double sampling_freq) -> sptr
        """
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_make(self, *args, **kwargs)

    def set_center_freq(self, *args, **kwargs):
        """set_center_freq(self, double center_freq)"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_set_center_freq(self, *args, **kwargs)

    def center_freq(self):
        """center_freq(self) -> double"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_center_freq(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.freq_xlating_fir_filter_ccf_sptr__handle_call(self, *args, **kwargs)

freq_xlating_fir_filter_ccf_sptr_swigregister = _filter_swig.freq_xlating_fir_filter_ccf_sptr_swigregister
freq_xlating_fir_filter_ccf_sptr_swigregister(freq_xlating_fir_filter_ccf_sptr)

freq_xlating_fir_filter_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
freq_xlating_fir_filter_ccf = freq_xlating_fir_filter_ccf.make;

class freq_xlating_fir_filter_fcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::freq_xlating_fir_filter_fcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> freq_xlating_fir_filter_fcc_sptr
        __init__(self, freq_xlating_fir_filter_fcc p) -> freq_xlating_fir_filter_fcc_sptr
        """
        this = _filter_swig.new_freq_xlating_fir_filter_fcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> freq_xlating_fir_filter_fcc"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_freq_xlating_fir_filter_fcc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps, 
            double center_freq, 
            double sampling_freq) -> sptr
        """
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_make(self, *args, **kwargs)

    def set_center_freq(self, *args, **kwargs):
        """set_center_freq(self, double center_freq)"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_set_center_freq(self, *args, **kwargs)

    def center_freq(self):
        """center_freq(self) -> double"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_center_freq(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.freq_xlating_fir_filter_fcc_sptr__handle_call(self, *args, **kwargs)

freq_xlating_fir_filter_fcc_sptr_swigregister = _filter_swig.freq_xlating_fir_filter_fcc_sptr_swigregister
freq_xlating_fir_filter_fcc_sptr_swigregister(freq_xlating_fir_filter_fcc_sptr)

freq_xlating_fir_filter_fcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
freq_xlating_fir_filter_fcc = freq_xlating_fir_filter_fcc.make;

class freq_xlating_fir_filter_fcf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::freq_xlating_fir_filter_fcf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> freq_xlating_fir_filter_fcf_sptr
        __init__(self, freq_xlating_fir_filter_fcf p) -> freq_xlating_fir_filter_fcf_sptr
        """
        this = _filter_swig.new_freq_xlating_fir_filter_fcf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> freq_xlating_fir_filter_fcf"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_freq_xlating_fir_filter_fcf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, int decimation, std::vector<(float,std::allocator<(float)>)> taps, 
            double center_freq, double sampling_freq) -> sptr
        """
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_make(self, *args, **kwargs)

    def set_center_freq(self, *args, **kwargs):
        """set_center_freq(self, double center_freq)"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_set_center_freq(self, *args, **kwargs)

    def center_freq(self):
        """center_freq(self) -> double"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_center_freq(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.freq_xlating_fir_filter_fcf_sptr__handle_call(self, *args, **kwargs)

freq_xlating_fir_filter_fcf_sptr_swigregister = _filter_swig.freq_xlating_fir_filter_fcf_sptr_swigregister
freq_xlating_fir_filter_fcf_sptr_swigregister(freq_xlating_fir_filter_fcf_sptr)

freq_xlating_fir_filter_fcf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
freq_xlating_fir_filter_fcf = freq_xlating_fir_filter_fcf.make;

class freq_xlating_fir_filter_scf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::freq_xlating_fir_filter_scf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> freq_xlating_fir_filter_scf_sptr
        __init__(self, freq_xlating_fir_filter_scf p) -> freq_xlating_fir_filter_scf_sptr
        """
        this = _filter_swig.new_freq_xlating_fir_filter_scf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> freq_xlating_fir_filter_scf"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_freq_xlating_fir_filter_scf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, int decimation, std::vector<(float,std::allocator<(float)>)> taps, 
            double center_freq, double sampling_freq) -> sptr
        """
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_make(self, *args, **kwargs)

    def set_center_freq(self, *args, **kwargs):
        """set_center_freq(self, double center_freq)"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_set_center_freq(self, *args, **kwargs)

    def center_freq(self):
        """center_freq(self) -> double"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_center_freq(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.freq_xlating_fir_filter_scf_sptr__handle_call(self, *args, **kwargs)

freq_xlating_fir_filter_scf_sptr_swigregister = _filter_swig.freq_xlating_fir_filter_scf_sptr_swigregister
freq_xlating_fir_filter_scf_sptr_swigregister(freq_xlating_fir_filter_scf_sptr)

freq_xlating_fir_filter_scf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
freq_xlating_fir_filter_scf = freq_xlating_fir_filter_scf.make;

class freq_xlating_fir_filter_scc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::freq_xlating_fir_filter_scc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> freq_xlating_fir_filter_scc_sptr
        __init__(self, freq_xlating_fir_filter_scc p) -> freq_xlating_fir_filter_scc_sptr
        """
        this = _filter_swig.new_freq_xlating_fir_filter_scc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> freq_xlating_fir_filter_scc"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_freq_xlating_fir_filter_scc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps, 
            double center_freq, 
            double sampling_freq) -> sptr
        """
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_make(self, *args, **kwargs)

    def set_center_freq(self, *args, **kwargs):
        """set_center_freq(self, double center_freq)"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_set_center_freq(self, *args, **kwargs)

    def center_freq(self):
        """center_freq(self) -> double"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_center_freq(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.freq_xlating_fir_filter_scc_sptr__handle_call(self, *args, **kwargs)

freq_xlating_fir_filter_scc_sptr_swigregister = _filter_swig.freq_xlating_fir_filter_scc_sptr_swigregister
freq_xlating_fir_filter_scc_sptr_swigregister(freq_xlating_fir_filter_scc_sptr)

freq_xlating_fir_filter_scc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
freq_xlating_fir_filter_scc = freq_xlating_fir_filter_scc.make;

class hilbert_fc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::hilbert_fc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> hilbert_fc_sptr
        __init__(self, hilbert_fc p) -> hilbert_fc_sptr
        """
        this = _filter_swig.new_hilbert_fc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> hilbert_fc"""
        return _filter_swig.hilbert_fc_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_hilbert_fc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, unsigned int ntaps) -> sptr"""
        return _filter_swig.hilbert_fc_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.hilbert_fc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.hilbert_fc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.hilbert_fc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.hilbert_fc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.hilbert_fc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.hilbert_fc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.hilbert_fc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.hilbert_fc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.hilbert_fc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.hilbert_fc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.hilbert_fc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.hilbert_fc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.hilbert_fc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.hilbert_fc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.hilbert_fc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.hilbert_fc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.hilbert_fc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.hilbert_fc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.hilbert_fc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.hilbert_fc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.hilbert_fc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.hilbert_fc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.hilbert_fc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.hilbert_fc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.hilbert_fc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.hilbert_fc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.hilbert_fc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.hilbert_fc_sptr__handle_call(self, *args, **kwargs)

hilbert_fc_sptr_swigregister = _filter_swig.hilbert_fc_sptr_swigregister
hilbert_fc_sptr_swigregister(hilbert_fc_sptr)

hilbert_fc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
hilbert_fc = hilbert_fc.make;

class iir_filter_ffd_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::iir_filter_ffd)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> iir_filter_ffd_sptr
        __init__(self, iir_filter_ffd p) -> iir_filter_ffd_sptr
        """
        this = _filter_swig.new_iir_filter_ffd_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> iir_filter_ffd"""
        return _filter_swig.iir_filter_ffd_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_iir_filter_ffd_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, std::vector<(double,std::allocator<(double)>)> fftaps, 
            std::vector<(double,std::allocator<(double)>)> fbtaps) -> sptr
        """
        return _filter_swig.iir_filter_ffd_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """
        set_taps(self, std::vector<(double,std::allocator<(double)>)> fftaps, 
            std::vector<(double,std::allocator<(double)>)> fbtaps)
        """
        return _filter_swig.iir_filter_ffd_sptr_set_taps(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.iir_filter_ffd_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.iir_filter_ffd_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.iir_filter_ffd_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.iir_filter_ffd_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.iir_filter_ffd_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.iir_filter_ffd_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.iir_filter_ffd_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.iir_filter_ffd_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.iir_filter_ffd_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.iir_filter_ffd_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.iir_filter_ffd_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.iir_filter_ffd_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.iir_filter_ffd_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.iir_filter_ffd_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.iir_filter_ffd_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.iir_filter_ffd_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.iir_filter_ffd_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.iir_filter_ffd_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.iir_filter_ffd_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.iir_filter_ffd_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.iir_filter_ffd_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.iir_filter_ffd_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.iir_filter_ffd_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.iir_filter_ffd_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.iir_filter_ffd_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.iir_filter_ffd_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.iir_filter_ffd_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.iir_filter_ffd_sptr__handle_call(self, *args, **kwargs)

iir_filter_ffd_sptr_swigregister = _filter_swig.iir_filter_ffd_sptr_swigregister
iir_filter_ffd_sptr_swigregister(iir_filter_ffd_sptr)

iir_filter_ffd_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
iir_filter_ffd = iir_filter_ffd.make;

class interp_fir_filter_ccc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::interp_fir_filter_ccc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> interp_fir_filter_ccc_sptr
        __init__(self, interp_fir_filter_ccc p) -> interp_fir_filter_ccc_sptr
        """
        this = _filter_swig.new_interp_fir_filter_ccc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> interp_fir_filter_ccc"""
        return _filter_swig.interp_fir_filter_ccc_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_interp_fir_filter_ccc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, unsigned int interpolation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr"""
        return _filter_swig.interp_fir_filter_ccc_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.interp_fir_filter_ccc_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.interp_fir_filter_ccc_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.interp_fir_filter_ccc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.interp_fir_filter_ccc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.interp_fir_filter_ccc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.interp_fir_filter_ccc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.interp_fir_filter_ccc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.interp_fir_filter_ccc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.interp_fir_filter_ccc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.interp_fir_filter_ccc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.interp_fir_filter_ccc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.interp_fir_filter_ccc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.interp_fir_filter_ccc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.interp_fir_filter_ccc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.interp_fir_filter_ccc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.interp_fir_filter_ccc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.interp_fir_filter_ccc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.interp_fir_filter_ccc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.interp_fir_filter_ccc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.interp_fir_filter_ccc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.interp_fir_filter_ccc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.interp_fir_filter_ccc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.interp_fir_filter_ccc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.interp_fir_filter_ccc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.interp_fir_filter_ccc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.interp_fir_filter_ccc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.interp_fir_filter_ccc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.interp_fir_filter_ccc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.interp_fir_filter_ccc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.interp_fir_filter_ccc_sptr__handle_call(self, *args, **kwargs)

interp_fir_filter_ccc_sptr_swigregister = _filter_swig.interp_fir_filter_ccc_sptr_swigregister
interp_fir_filter_ccc_sptr_swigregister(interp_fir_filter_ccc_sptr)

interp_fir_filter_ccc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
interp_fir_filter_ccc = interp_fir_filter_ccc.make;

class interp_fir_filter_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::interp_fir_filter_ccf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> interp_fir_filter_ccf_sptr
        __init__(self, interp_fir_filter_ccf p) -> interp_fir_filter_ccf_sptr
        """
        this = _filter_swig.new_interp_fir_filter_ccf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> interp_fir_filter_ccf"""
        return _filter_swig.interp_fir_filter_ccf_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_interp_fir_filter_ccf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, unsigned int interpolation, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
        return _filter_swig.interp_fir_filter_ccf_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.interp_fir_filter_ccf_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.interp_fir_filter_ccf_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.interp_fir_filter_ccf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.interp_fir_filter_ccf_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.interp_fir_filter_ccf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.interp_fir_filter_ccf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.interp_fir_filter_ccf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.interp_fir_filter_ccf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.interp_fir_filter_ccf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.interp_fir_filter_ccf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.interp_fir_filter_ccf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.interp_fir_filter_ccf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.interp_fir_filter_ccf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.interp_fir_filter_ccf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.interp_fir_filter_ccf_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.interp_fir_filter_ccf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.interp_fir_filter_ccf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.interp_fir_filter_ccf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.interp_fir_filter_ccf_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.interp_fir_filter_ccf_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.interp_fir_filter_ccf_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.interp_fir_filter_ccf_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.interp_fir_filter_ccf_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.interp_fir_filter_ccf_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.interp_fir_filter_ccf_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.interp_fir_filter_ccf_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.interp_fir_filter_ccf_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.interp_fir_filter_ccf_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.interp_fir_filter_ccf_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.interp_fir_filter_ccf_sptr__handle_call(self, *args, **kwargs)

interp_fir_filter_ccf_sptr_swigregister = _filter_swig.interp_fir_filter_ccf_sptr_swigregister
interp_fir_filter_ccf_sptr_swigregister(interp_fir_filter_ccf_sptr)

interp_fir_filter_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
interp_fir_filter_ccf = interp_fir_filter_ccf.make;

class interp_fir_filter_fcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::interp_fir_filter_fcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> interp_fir_filter_fcc_sptr
        __init__(self, interp_fir_filter_fcc p) -> interp_fir_filter_fcc_sptr
        """
        this = _filter_swig.new_interp_fir_filter_fcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> interp_fir_filter_fcc"""
        return _filter_swig.interp_fir_filter_fcc_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_interp_fir_filter_fcc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, unsigned int interpolation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr"""
        return _filter_swig.interp_fir_filter_fcc_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.interp_fir_filter_fcc_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.interp_fir_filter_fcc_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.interp_fir_filter_fcc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.interp_fir_filter_fcc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.interp_fir_filter_fcc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.interp_fir_filter_fcc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.interp_fir_filter_fcc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.interp_fir_filter_fcc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.interp_fir_filter_fcc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.interp_fir_filter_fcc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.interp_fir_filter_fcc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.interp_fir_filter_fcc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.interp_fir_filter_fcc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.interp_fir_filter_fcc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.interp_fir_filter_fcc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.interp_fir_filter_fcc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.interp_fir_filter_fcc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.interp_fir_filter_fcc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.interp_fir_filter_fcc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.interp_fir_filter_fcc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.interp_fir_filter_fcc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.interp_fir_filter_fcc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.interp_fir_filter_fcc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.interp_fir_filter_fcc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.interp_fir_filter_fcc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.interp_fir_filter_fcc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.interp_fir_filter_fcc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.interp_fir_filter_fcc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.interp_fir_filter_fcc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.interp_fir_filter_fcc_sptr__handle_call(self, *args, **kwargs)

interp_fir_filter_fcc_sptr_swigregister = _filter_swig.interp_fir_filter_fcc_sptr_swigregister
interp_fir_filter_fcc_sptr_swigregister(interp_fir_filter_fcc_sptr)

interp_fir_filter_fcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
interp_fir_filter_fcc = interp_fir_filter_fcc.make;

class interp_fir_filter_fff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::interp_fir_filter_fff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> interp_fir_filter_fff_sptr
        __init__(self, interp_fir_filter_fff p) -> interp_fir_filter_fff_sptr
        """
        this = _filter_swig.new_interp_fir_filter_fff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> interp_fir_filter_fff"""
        return _filter_swig.interp_fir_filter_fff_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_interp_fir_filter_fff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, unsigned int interpolation, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
        return _filter_swig.interp_fir_filter_fff_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.interp_fir_filter_fff_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.interp_fir_filter_fff_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.interp_fir_filter_fff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.interp_fir_filter_fff_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.interp_fir_filter_fff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.interp_fir_filter_fff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.interp_fir_filter_fff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.interp_fir_filter_fff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.interp_fir_filter_fff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.interp_fir_filter_fff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.interp_fir_filter_fff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.interp_fir_filter_fff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.interp_fir_filter_fff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.interp_fir_filter_fff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.interp_fir_filter_fff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.interp_fir_filter_fff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.interp_fir_filter_fff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.interp_fir_filter_fff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.interp_fir_filter_fff_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.interp_fir_filter_fff_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.interp_fir_filter_fff_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.interp_fir_filter_fff_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.interp_fir_filter_fff_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.interp_fir_filter_fff_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.interp_fir_filter_fff_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.interp_fir_filter_fff_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.interp_fir_filter_fff_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.interp_fir_filter_fff_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.interp_fir_filter_fff_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.interp_fir_filter_fff_sptr__handle_call(self, *args, **kwargs)

interp_fir_filter_fff_sptr_swigregister = _filter_swig.interp_fir_filter_fff_sptr_swigregister
interp_fir_filter_fff_sptr_swigregister(interp_fir_filter_fff_sptr)

interp_fir_filter_fff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
interp_fir_filter_fff = interp_fir_filter_fff.make;

class interp_fir_filter_fsf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::interp_fir_filter_fsf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> interp_fir_filter_fsf_sptr
        __init__(self, interp_fir_filter_fsf p) -> interp_fir_filter_fsf_sptr
        """
        this = _filter_swig.new_interp_fir_filter_fsf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> interp_fir_filter_fsf"""
        return _filter_swig.interp_fir_filter_fsf_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_interp_fir_filter_fsf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, unsigned int interpolation, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
        return _filter_swig.interp_fir_filter_fsf_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.interp_fir_filter_fsf_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.interp_fir_filter_fsf_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.interp_fir_filter_fsf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.interp_fir_filter_fsf_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.interp_fir_filter_fsf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.interp_fir_filter_fsf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.interp_fir_filter_fsf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.interp_fir_filter_fsf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.interp_fir_filter_fsf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.interp_fir_filter_fsf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.interp_fir_filter_fsf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.interp_fir_filter_fsf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.interp_fir_filter_fsf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.interp_fir_filter_fsf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.interp_fir_filter_fsf_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.interp_fir_filter_fsf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.interp_fir_filter_fsf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.interp_fir_filter_fsf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.interp_fir_filter_fsf_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.interp_fir_filter_fsf_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.interp_fir_filter_fsf_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.interp_fir_filter_fsf_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.interp_fir_filter_fsf_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.interp_fir_filter_fsf_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.interp_fir_filter_fsf_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.interp_fir_filter_fsf_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.interp_fir_filter_fsf_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.interp_fir_filter_fsf_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.interp_fir_filter_fsf_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.interp_fir_filter_fsf_sptr__handle_call(self, *args, **kwargs)

interp_fir_filter_fsf_sptr_swigregister = _filter_swig.interp_fir_filter_fsf_sptr_swigregister
interp_fir_filter_fsf_sptr_swigregister(interp_fir_filter_fsf_sptr)

interp_fir_filter_fsf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
interp_fir_filter_fsf = interp_fir_filter_fsf.make;

class interp_fir_filter_scc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::interp_fir_filter_scc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> interp_fir_filter_scc_sptr
        __init__(self, interp_fir_filter_scc p) -> interp_fir_filter_scc_sptr
        """
        this = _filter_swig.new_interp_fir_filter_scc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> interp_fir_filter_scc"""
        return _filter_swig.interp_fir_filter_scc_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_interp_fir_filter_scc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, unsigned int interpolation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr"""
        return _filter_swig.interp_fir_filter_scc_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.interp_fir_filter_scc_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.interp_fir_filter_scc_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.interp_fir_filter_scc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.interp_fir_filter_scc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.interp_fir_filter_scc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.interp_fir_filter_scc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.interp_fir_filter_scc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.interp_fir_filter_scc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.interp_fir_filter_scc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.interp_fir_filter_scc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.interp_fir_filter_scc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.interp_fir_filter_scc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.interp_fir_filter_scc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.interp_fir_filter_scc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.interp_fir_filter_scc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.interp_fir_filter_scc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.interp_fir_filter_scc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.interp_fir_filter_scc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.interp_fir_filter_scc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.interp_fir_filter_scc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.interp_fir_filter_scc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.interp_fir_filter_scc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.interp_fir_filter_scc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.interp_fir_filter_scc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.interp_fir_filter_scc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.interp_fir_filter_scc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.interp_fir_filter_scc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.interp_fir_filter_scc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.interp_fir_filter_scc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.interp_fir_filter_scc_sptr__handle_call(self, *args, **kwargs)

interp_fir_filter_scc_sptr_swigregister = _filter_swig.interp_fir_filter_scc_sptr_swigregister
interp_fir_filter_scc_sptr_swigregister(interp_fir_filter_scc_sptr)

interp_fir_filter_scc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
interp_fir_filter_scc = interp_fir_filter_scc.make;

class pfb_arb_resampler_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::pfb_arb_resampler_ccf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> pfb_arb_resampler_ccf_sptr
        __init__(self, pfb_arb_resampler_ccf p) -> pfb_arb_resampler_ccf_sptr
        """
        this = _filter_swig.new_pfb_arb_resampler_ccf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> pfb_arb_resampler_ccf"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_pfb_arb_resampler_ccf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, float rate, std::vector<(float,std::allocator<(float)>)> taps, 
            unsigned int filter_size = 32) -> sptr
        """
        return _filter_swig.pfb_arb_resampler_ccf_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> __dummy_11__"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_taps(self)

    def print_taps(self):
        """print_taps(self)"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_print_taps(self)

    def set_rate(self, *args, **kwargs):
        """set_rate(self, float rate)"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_set_rate(self, *args, **kwargs)

    def set_phase(self, *args, **kwargs):
        """set_phase(self, float ph)"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_set_phase(self, *args, **kwargs)

    def phase(self):
        """phase(self) -> float"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_phase(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.pfb_arb_resampler_ccf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.pfb_arb_resampler_ccf_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.pfb_arb_resampler_ccf_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.pfb_arb_resampler_ccf_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.pfb_arb_resampler_ccf_sptr__handle_call(self, *args, **kwargs)

pfb_arb_resampler_ccf_sptr_swigregister = _filter_swig.pfb_arb_resampler_ccf_sptr_swigregister
pfb_arb_resampler_ccf_sptr_swigregister(pfb_arb_resampler_ccf_sptr)

pfb_arb_resampler_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pfb_arb_resampler_ccf = pfb_arb_resampler_ccf.make;

class pfb_arb_resampler_fff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::pfb_arb_resampler_fff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> pfb_arb_resampler_fff_sptr
        __init__(self, pfb_arb_resampler_fff p) -> pfb_arb_resampler_fff_sptr
        """
        this = _filter_swig.new_pfb_arb_resampler_fff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> pfb_arb_resampler_fff"""
        return _filter_swig.pfb_arb_resampler_fff_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_pfb_arb_resampler_fff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, float rate, std::vector<(float,std::allocator<(float)>)> taps, 
            unsigned int filter_size = 32) -> sptr
        """
        return _filter_swig.pfb_arb_resampler_fff_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> __dummy_11__"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_taps(self)

    def print_taps(self):
        """print_taps(self)"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_print_taps(self)

    def set_rate(self, *args, **kwargs):
        """set_rate(self, float rate)"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_set_rate(self, *args, **kwargs)

    def set_phase(self, *args, **kwargs):
        """set_phase(self, float ph)"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_set_phase(self, *args, **kwargs)

    def phase(self):
        """phase(self) -> float"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_phase(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.pfb_arb_resampler_fff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.pfb_arb_resampler_fff_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.pfb_arb_resampler_fff_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.pfb_arb_resampler_fff_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.pfb_arb_resampler_fff_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.pfb_arb_resampler_fff_sptr__handle_call(self, *args, **kwargs)

pfb_arb_resampler_fff_sptr_swigregister = _filter_swig.pfb_arb_resampler_fff_sptr_swigregister
pfb_arb_resampler_fff_sptr_swigregister(pfb_arb_resampler_fff_sptr)

pfb_arb_resampler_fff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pfb_arb_resampler_fff = pfb_arb_resampler_fff.make;

class pfb_channelizer_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::pfb_channelizer_ccf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> pfb_channelizer_ccf_sptr
        __init__(self, pfb_channelizer_ccf p) -> pfb_channelizer_ccf_sptr
        """
        this = _filter_swig.new_pfb_channelizer_ccf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> pfb_channelizer_ccf"""
        return _filter_swig.pfb_channelizer_ccf_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_pfb_channelizer_ccf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, unsigned int numchans, std::vector<(float,std::allocator<(float)>)> taps, 
            float oversample_rate) -> sptr
        """
        return _filter_swig.pfb_channelizer_ccf_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.pfb_channelizer_ccf_sptr_set_taps(self, *args, **kwargs)

    def print_taps(self):
        """print_taps(self)"""
        return _filter_swig.pfb_channelizer_ccf_sptr_print_taps(self)

    def taps(self):
        """taps(self) -> __dummy_11__"""
        return _filter_swig.pfb_channelizer_ccf_sptr_taps(self)

    def set_channel_map(self, *args, **kwargs):
        """set_channel_map(self, std::vector<(int,std::allocator<(int)>)> map)"""
        return _filter_swig.pfb_channelizer_ccf_sptr_set_channel_map(self, *args, **kwargs)

    def channel_map(self):
        """channel_map(self) -> std::vector<(int,std::allocator<(int)>)>"""
        return _filter_swig.pfb_channelizer_ccf_sptr_channel_map(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.pfb_channelizer_ccf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.pfb_channelizer_ccf_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.pfb_channelizer_ccf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.pfb_channelizer_ccf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.pfb_channelizer_ccf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.pfb_channelizer_ccf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.pfb_channelizer_ccf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.pfb_channelizer_ccf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.pfb_channelizer_ccf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.pfb_channelizer_ccf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.pfb_channelizer_ccf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.pfb_channelizer_ccf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.pfb_channelizer_ccf_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.pfb_channelizer_ccf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.pfb_channelizer_ccf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.pfb_channelizer_ccf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.pfb_channelizer_ccf_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.pfb_channelizer_ccf_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.pfb_channelizer_ccf_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.pfb_channelizer_ccf_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.pfb_channelizer_ccf_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.pfb_channelizer_ccf_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.pfb_channelizer_ccf_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.pfb_channelizer_ccf_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.pfb_channelizer_ccf_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.pfb_channelizer_ccf_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.pfb_channelizer_ccf_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.pfb_channelizer_ccf_sptr__handle_call(self, *args, **kwargs)

pfb_channelizer_ccf_sptr_swigregister = _filter_swig.pfb_channelizer_ccf_sptr_swigregister
pfb_channelizer_ccf_sptr_swigregister(pfb_channelizer_ccf_sptr)

pfb_channelizer_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pfb_channelizer_ccf = pfb_channelizer_ccf.make;

class pfb_decimator_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::pfb_decimator_ccf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> pfb_decimator_ccf_sptr
        __init__(self, pfb_decimator_ccf p) -> pfb_decimator_ccf_sptr
        """
        this = _filter_swig.new_pfb_decimator_ccf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> pfb_decimator_ccf"""
        return _filter_swig.pfb_decimator_ccf_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_pfb_decimator_ccf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, unsigned int decim, std::vector<(float,std::allocator<(float)>)> taps, 
            unsigned int channel) -> sptr
        """
        return _filter_swig.pfb_decimator_ccf_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.pfb_decimator_ccf_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> __dummy_11__"""
        return _filter_swig.pfb_decimator_ccf_sptr_taps(self)

    def print_taps(self):
        """print_taps(self)"""
        return _filter_swig.pfb_decimator_ccf_sptr_print_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.pfb_decimator_ccf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.pfb_decimator_ccf_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.pfb_decimator_ccf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.pfb_decimator_ccf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.pfb_decimator_ccf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.pfb_decimator_ccf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.pfb_decimator_ccf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.pfb_decimator_ccf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.pfb_decimator_ccf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.pfb_decimator_ccf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.pfb_decimator_ccf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.pfb_decimator_ccf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.pfb_decimator_ccf_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.pfb_decimator_ccf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.pfb_decimator_ccf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.pfb_decimator_ccf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.pfb_decimator_ccf_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.pfb_decimator_ccf_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.pfb_decimator_ccf_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.pfb_decimator_ccf_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.pfb_decimator_ccf_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.pfb_decimator_ccf_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.pfb_decimator_ccf_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.pfb_decimator_ccf_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.pfb_decimator_ccf_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.pfb_decimator_ccf_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.pfb_decimator_ccf_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.pfb_decimator_ccf_sptr__handle_call(self, *args, **kwargs)

pfb_decimator_ccf_sptr_swigregister = _filter_swig.pfb_decimator_ccf_sptr_swigregister
pfb_decimator_ccf_sptr_swigregister(pfb_decimator_ccf_sptr)

pfb_decimator_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pfb_decimator_ccf = pfb_decimator_ccf.make;

class pfb_interpolator_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::pfb_interpolator_ccf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> pfb_interpolator_ccf_sptr
        __init__(self, pfb_interpolator_ccf p) -> pfb_interpolator_ccf_sptr
        """
        this = _filter_swig.new_pfb_interpolator_ccf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> pfb_interpolator_ccf"""
        return _filter_swig.pfb_interpolator_ccf_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_pfb_interpolator_ccf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, unsigned int interp, std::vector<(float,std::allocator<(float)>)> taps) -> sptr"""
        return _filter_swig.pfb_interpolator_ccf_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.pfb_interpolator_ccf_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> __dummy_11__"""
        return _filter_swig.pfb_interpolator_ccf_sptr_taps(self)

    def print_taps(self):
        """print_taps(self)"""
        return _filter_swig.pfb_interpolator_ccf_sptr_print_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.pfb_interpolator_ccf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.pfb_interpolator_ccf_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.pfb_interpolator_ccf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.pfb_interpolator_ccf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.pfb_interpolator_ccf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.pfb_interpolator_ccf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.pfb_interpolator_ccf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.pfb_interpolator_ccf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.pfb_interpolator_ccf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.pfb_interpolator_ccf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.pfb_interpolator_ccf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.pfb_interpolator_ccf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.pfb_interpolator_ccf_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.pfb_interpolator_ccf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.pfb_interpolator_ccf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.pfb_interpolator_ccf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.pfb_interpolator_ccf_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.pfb_interpolator_ccf_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.pfb_interpolator_ccf_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.pfb_interpolator_ccf_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.pfb_interpolator_ccf_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.pfb_interpolator_ccf_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.pfb_interpolator_ccf_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.pfb_interpolator_ccf_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.pfb_interpolator_ccf_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.pfb_interpolator_ccf_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.pfb_interpolator_ccf_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.pfb_interpolator_ccf_sptr__handle_call(self, *args, **kwargs)

pfb_interpolator_ccf_sptr_swigregister = _filter_swig.pfb_interpolator_ccf_sptr_swigregister
pfb_interpolator_ccf_sptr_swigregister(pfb_interpolator_ccf_sptr)

pfb_interpolator_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pfb_interpolator_ccf = pfb_interpolator_ccf.make;

class pfb_synthesizer_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::pfb_synthesizer_ccf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> pfb_synthesizer_ccf_sptr
        __init__(self, pfb_synthesizer_ccf p) -> pfb_synthesizer_ccf_sptr
        """
        this = _filter_swig.new_pfb_synthesizer_ccf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> pfb_synthesizer_ccf"""
        return _filter_swig.pfb_synthesizer_ccf_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_pfb_synthesizer_ccf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, unsigned int numchans, std::vector<(float,std::allocator<(float)>)> taps, 
            bool twox = False) -> sptr
        """
        return _filter_swig.pfb_synthesizer_ccf_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_set_taps(self, *args, **kwargs)

    def print_taps(self):
        """print_taps(self)"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_print_taps(self)

    def taps(self):
        """taps(self) -> __dummy_11__"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_taps(self)

    def set_channel_map(self, *args, **kwargs):
        """set_channel_map(self, std::vector<(int,std::allocator<(int)>)> map)"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_set_channel_map(self, *args, **kwargs)

    def channel_map(self):
        """channel_map(self) -> std::vector<(int,std::allocator<(int)>)>"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_channel_map(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.pfb_synthesizer_ccf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.pfb_synthesizer_ccf_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.pfb_synthesizer_ccf_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.pfb_synthesizer_ccf_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.pfb_synthesizer_ccf_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.pfb_synthesizer_ccf_sptr__handle_call(self, *args, **kwargs)

pfb_synthesizer_ccf_sptr_swigregister = _filter_swig.pfb_synthesizer_ccf_sptr_swigregister
pfb_synthesizer_ccf_sptr_swigregister(pfb_synthesizer_ccf_sptr)

pfb_synthesizer_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pfb_synthesizer_ccf = pfb_synthesizer_ccf.make;

class rational_resampler_base_ccc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::rational_resampler_base_ccc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rational_resampler_base_ccc_sptr
        __init__(self, rational_resampler_base_ccc p) -> rational_resampler_base_ccc_sptr
        """
        this = _filter_swig.new_rational_resampler_base_ccc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> rational_resampler_base_ccc"""
        return _filter_swig.rational_resampler_base_ccc_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_rational_resampler_base_ccc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, unsigned int interpolation, unsigned int decimation, 
            std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr
        """
        return _filter_swig.rational_resampler_base_ccc_sptr_make(self, *args, **kwargs)

    def interpolation(self):
        """interpolation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_ccc_sptr_interpolation(self)

    def decimation(self):
        """decimation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_ccc_sptr_decimation(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.rational_resampler_base_ccc_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.rational_resampler_base_ccc_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.rational_resampler_base_ccc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.rational_resampler_base_ccc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_ccc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.rational_resampler_base_ccc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.rational_resampler_base_ccc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.rational_resampler_base_ccc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.rational_resampler_base_ccc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.rational_resampler_base_ccc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.rational_resampler_base_ccc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.rational_resampler_base_ccc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.rational_resampler_base_ccc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.rational_resampler_base_ccc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.rational_resampler_base_ccc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.rational_resampler_base_ccc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.rational_resampler_base_ccc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.rational_resampler_base_ccc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.rational_resampler_base_ccc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.rational_resampler_base_ccc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.rational_resampler_base_ccc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.rational_resampler_base_ccc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.rational_resampler_base_ccc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.rational_resampler_base_ccc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.rational_resampler_base_ccc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.rational_resampler_base_ccc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.rational_resampler_base_ccc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.rational_resampler_base_ccc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.rational_resampler_base_ccc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.rational_resampler_base_ccc_sptr__handle_call(self, *args, **kwargs)

rational_resampler_base_ccc_sptr_swigregister = _filter_swig.rational_resampler_base_ccc_sptr_swigregister
rational_resampler_base_ccc_sptr_swigregister(rational_resampler_base_ccc_sptr)

rational_resampler_base_ccc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rational_resampler_base_ccc = rational_resampler_base_ccc.make;

class rational_resampler_base_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::rational_resampler_base_ccf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rational_resampler_base_ccf_sptr
        __init__(self, rational_resampler_base_ccf p) -> rational_resampler_base_ccf_sptr
        """
        this = _filter_swig.new_rational_resampler_base_ccf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> rational_resampler_base_ccf"""
        return _filter_swig.rational_resampler_base_ccf_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_rational_resampler_base_ccf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, unsigned int interpolation, unsigned int decimation, 
            std::vector<(float,std::allocator<(float)>)> taps) -> sptr
        """
        return _filter_swig.rational_resampler_base_ccf_sptr_make(self, *args, **kwargs)

    def interpolation(self):
        """interpolation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_ccf_sptr_interpolation(self)

    def decimation(self):
        """decimation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_ccf_sptr_decimation(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.rational_resampler_base_ccf_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.rational_resampler_base_ccf_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.rational_resampler_base_ccf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.rational_resampler_base_ccf_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_ccf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.rational_resampler_base_ccf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.rational_resampler_base_ccf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.rational_resampler_base_ccf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.rational_resampler_base_ccf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.rational_resampler_base_ccf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.rational_resampler_base_ccf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.rational_resampler_base_ccf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.rational_resampler_base_ccf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.rational_resampler_base_ccf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.rational_resampler_base_ccf_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.rational_resampler_base_ccf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.rational_resampler_base_ccf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.rational_resampler_base_ccf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.rational_resampler_base_ccf_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.rational_resampler_base_ccf_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.rational_resampler_base_ccf_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.rational_resampler_base_ccf_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.rational_resampler_base_ccf_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.rational_resampler_base_ccf_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.rational_resampler_base_ccf_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.rational_resampler_base_ccf_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.rational_resampler_base_ccf_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.rational_resampler_base_ccf_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.rational_resampler_base_ccf_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.rational_resampler_base_ccf_sptr__handle_call(self, *args, **kwargs)

rational_resampler_base_ccf_sptr_swigregister = _filter_swig.rational_resampler_base_ccf_sptr_swigregister
rational_resampler_base_ccf_sptr_swigregister(rational_resampler_base_ccf_sptr)

rational_resampler_base_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rational_resampler_base_ccf = rational_resampler_base_ccf.make;

class rational_resampler_base_fcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::rational_resampler_base_fcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rational_resampler_base_fcc_sptr
        __init__(self, rational_resampler_base_fcc p) -> rational_resampler_base_fcc_sptr
        """
        this = _filter_swig.new_rational_resampler_base_fcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> rational_resampler_base_fcc"""
        return _filter_swig.rational_resampler_base_fcc_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_rational_resampler_base_fcc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, unsigned int interpolation, unsigned int decimation, 
            std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr
        """
        return _filter_swig.rational_resampler_base_fcc_sptr_make(self, *args, **kwargs)

    def interpolation(self):
        """interpolation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_fcc_sptr_interpolation(self)

    def decimation(self):
        """decimation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_fcc_sptr_decimation(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.rational_resampler_base_fcc_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.rational_resampler_base_fcc_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.rational_resampler_base_fcc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.rational_resampler_base_fcc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_fcc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.rational_resampler_base_fcc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.rational_resampler_base_fcc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.rational_resampler_base_fcc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.rational_resampler_base_fcc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.rational_resampler_base_fcc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.rational_resampler_base_fcc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.rational_resampler_base_fcc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.rational_resampler_base_fcc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.rational_resampler_base_fcc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.rational_resampler_base_fcc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.rational_resampler_base_fcc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.rational_resampler_base_fcc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.rational_resampler_base_fcc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.rational_resampler_base_fcc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.rational_resampler_base_fcc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.rational_resampler_base_fcc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.rational_resampler_base_fcc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.rational_resampler_base_fcc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.rational_resampler_base_fcc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.rational_resampler_base_fcc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.rational_resampler_base_fcc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.rational_resampler_base_fcc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.rational_resampler_base_fcc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.rational_resampler_base_fcc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.rational_resampler_base_fcc_sptr__handle_call(self, *args, **kwargs)

rational_resampler_base_fcc_sptr_swigregister = _filter_swig.rational_resampler_base_fcc_sptr_swigregister
rational_resampler_base_fcc_sptr_swigregister(rational_resampler_base_fcc_sptr)

rational_resampler_base_fcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rational_resampler_base_fcc = rational_resampler_base_fcc.make;

class rational_resampler_base_fff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::rational_resampler_base_fff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rational_resampler_base_fff_sptr
        __init__(self, rational_resampler_base_fff p) -> rational_resampler_base_fff_sptr
        """
        this = _filter_swig.new_rational_resampler_base_fff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> rational_resampler_base_fff"""
        return _filter_swig.rational_resampler_base_fff_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_rational_resampler_base_fff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, unsigned int interpolation, unsigned int decimation, 
            std::vector<(float,std::allocator<(float)>)> taps) -> sptr
        """
        return _filter_swig.rational_resampler_base_fff_sptr_make(self, *args, **kwargs)

    def interpolation(self):
        """interpolation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_fff_sptr_interpolation(self)

    def decimation(self):
        """decimation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_fff_sptr_decimation(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.rational_resampler_base_fff_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.rational_resampler_base_fff_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.rational_resampler_base_fff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.rational_resampler_base_fff_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_fff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.rational_resampler_base_fff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.rational_resampler_base_fff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.rational_resampler_base_fff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.rational_resampler_base_fff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.rational_resampler_base_fff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.rational_resampler_base_fff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.rational_resampler_base_fff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.rational_resampler_base_fff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.rational_resampler_base_fff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.rational_resampler_base_fff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.rational_resampler_base_fff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.rational_resampler_base_fff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.rational_resampler_base_fff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.rational_resampler_base_fff_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.rational_resampler_base_fff_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.rational_resampler_base_fff_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.rational_resampler_base_fff_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.rational_resampler_base_fff_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.rational_resampler_base_fff_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.rational_resampler_base_fff_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.rational_resampler_base_fff_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.rational_resampler_base_fff_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.rational_resampler_base_fff_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.rational_resampler_base_fff_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.rational_resampler_base_fff_sptr__handle_call(self, *args, **kwargs)

rational_resampler_base_fff_sptr_swigregister = _filter_swig.rational_resampler_base_fff_sptr_swigregister
rational_resampler_base_fff_sptr_swigregister(rational_resampler_base_fff_sptr)

rational_resampler_base_fff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rational_resampler_base_fff = rational_resampler_base_fff.make;

class rational_resampler_base_fsf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::rational_resampler_base_fsf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rational_resampler_base_fsf_sptr
        __init__(self, rational_resampler_base_fsf p) -> rational_resampler_base_fsf_sptr
        """
        this = _filter_swig.new_rational_resampler_base_fsf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> rational_resampler_base_fsf"""
        return _filter_swig.rational_resampler_base_fsf_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_rational_resampler_base_fsf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, unsigned int interpolation, unsigned int decimation, 
            std::vector<(float,std::allocator<(float)>)> taps) -> sptr
        """
        return _filter_swig.rational_resampler_base_fsf_sptr_make(self, *args, **kwargs)

    def interpolation(self):
        """interpolation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_fsf_sptr_interpolation(self)

    def decimation(self):
        """decimation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_fsf_sptr_decimation(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(float,std::allocator<(float)>)> taps)"""
        return _filter_swig.rational_resampler_base_fsf_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _filter_swig.rational_resampler_base_fsf_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.rational_resampler_base_fsf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.rational_resampler_base_fsf_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_fsf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.rational_resampler_base_fsf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.rational_resampler_base_fsf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.rational_resampler_base_fsf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.rational_resampler_base_fsf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.rational_resampler_base_fsf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.rational_resampler_base_fsf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.rational_resampler_base_fsf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.rational_resampler_base_fsf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.rational_resampler_base_fsf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.rational_resampler_base_fsf_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.rational_resampler_base_fsf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.rational_resampler_base_fsf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.rational_resampler_base_fsf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.rational_resampler_base_fsf_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.rational_resampler_base_fsf_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.rational_resampler_base_fsf_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.rational_resampler_base_fsf_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.rational_resampler_base_fsf_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.rational_resampler_base_fsf_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.rational_resampler_base_fsf_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.rational_resampler_base_fsf_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.rational_resampler_base_fsf_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.rational_resampler_base_fsf_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.rational_resampler_base_fsf_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.rational_resampler_base_fsf_sptr__handle_call(self, *args, **kwargs)

rational_resampler_base_fsf_sptr_swigregister = _filter_swig.rational_resampler_base_fsf_sptr_swigregister
rational_resampler_base_fsf_sptr_swigregister(rational_resampler_base_fsf_sptr)

rational_resampler_base_fsf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rational_resampler_base_fsf = rational_resampler_base_fsf.make;

class rational_resampler_base_scc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::rational_resampler_base_scc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rational_resampler_base_scc_sptr
        __init__(self, rational_resampler_base_scc p) -> rational_resampler_base_scc_sptr
        """
        this = _filter_swig.new_rational_resampler_base_scc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> rational_resampler_base_scc"""
        return _filter_swig.rational_resampler_base_scc_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_rational_resampler_base_scc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, unsigned int interpolation, unsigned int decimation, 
            std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> sptr
        """
        return _filter_swig.rational_resampler_base_scc_sptr_make(self, *args, **kwargs)

    def interpolation(self):
        """interpolation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_scc_sptr_interpolation(self)

    def decimation(self):
        """decimation(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_scc_sptr_decimation(self)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.rational_resampler_base_scc_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.rational_resampler_base_scc_sptr_taps(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.rational_resampler_base_scc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.rational_resampler_base_scc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.rational_resampler_base_scc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.rational_resampler_base_scc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.rational_resampler_base_scc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.rational_resampler_base_scc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.rational_resampler_base_scc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.rational_resampler_base_scc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.rational_resampler_base_scc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.rational_resampler_base_scc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.rational_resampler_base_scc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.rational_resampler_base_scc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.rational_resampler_base_scc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.rational_resampler_base_scc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.rational_resampler_base_scc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.rational_resampler_base_scc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.rational_resampler_base_scc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.rational_resampler_base_scc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.rational_resampler_base_scc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.rational_resampler_base_scc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.rational_resampler_base_scc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.rational_resampler_base_scc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.rational_resampler_base_scc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.rational_resampler_base_scc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.rational_resampler_base_scc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.rational_resampler_base_scc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.rational_resampler_base_scc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.rational_resampler_base_scc_sptr__handle_call(self, *args, **kwargs)

rational_resampler_base_scc_sptr_swigregister = _filter_swig.rational_resampler_base_scc_sptr_swigregister
rational_resampler_base_scc_sptr_swigregister(rational_resampler_base_scc_sptr)

rational_resampler_base_scc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rational_resampler_base_scc = rational_resampler_base_scc.make;

class single_pole_iir_filter_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::single_pole_iir_filter_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> single_pole_iir_filter_cc_sptr
        __init__(self, single_pole_iir_filter_cc p) -> single_pole_iir_filter_cc_sptr
        """
        this = _filter_swig.new_single_pole_iir_filter_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> single_pole_iir_filter_cc"""
        return _filter_swig.single_pole_iir_filter_cc_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_single_pole_iir_filter_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, double alpha, unsigned int vlen = 1) -> sptr"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, double alpha)"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_set_taps(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.single_pole_iir_filter_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.single_pole_iir_filter_cc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.single_pole_iir_filter_cc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.single_pole_iir_filter_cc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.single_pole_iir_filter_cc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.single_pole_iir_filter_cc_sptr__handle_call(self, *args, **kwargs)

single_pole_iir_filter_cc_sptr_swigregister = _filter_swig.single_pole_iir_filter_cc_sptr_swigregister
single_pole_iir_filter_cc_sptr_swigregister(single_pole_iir_filter_cc_sptr)

single_pole_iir_filter_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
single_pole_iir_filter_cc = single_pole_iir_filter_cc.make;

class single_pole_iir_filter_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::single_pole_iir_filter_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> single_pole_iir_filter_ff_sptr
        __init__(self, single_pole_iir_filter_ff p) -> single_pole_iir_filter_ff_sptr
        """
        this = _filter_swig.new_single_pole_iir_filter_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> single_pole_iir_filter_ff"""
        return _filter_swig.single_pole_iir_filter_ff_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_single_pole_iir_filter_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, double alpha, unsigned int vlen = 1) -> sptr"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_make(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, double alpha)"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_set_taps(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _filter_swig.single_pole_iir_filter_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _filter_swig.single_pole_iir_filter_ff_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.single_pole_iir_filter_ff_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.single_pole_iir_filter_ff_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.single_pole_iir_filter_ff_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.single_pole_iir_filter_ff_sptr__handle_call(self, *args, **kwargs)

single_pole_iir_filter_ff_sptr_swigregister = _filter_swig.single_pole_iir_filter_ff_sptr_swigregister
single_pole_iir_filter_ff_sptr_swigregister(single_pole_iir_filter_ff_sptr)

single_pole_iir_filter_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
single_pole_iir_filter_ff = single_pole_iir_filter_ff.make;

class channel_model_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::filter::channel_model)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> channel_model_sptr
        __init__(self, channel_model p) -> channel_model_sptr
        """
        this = _filter_swig.new_channel_model_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> channel_model"""
        return _filter_swig.channel_model_sptr___deref__(self)

    __swig_destroy__ = _filter_swig.delete_channel_model_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, double noise_voltage = 0.0, double frequency_offset = 0.0, 
            double epsilon = 1.0, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps = std::vector< gr_complex >(1,1), 
            double noise_seed = 0) -> sptr
        """
        return _filter_swig.channel_model_sptr_make(self, *args, **kwargs)

    def set_noise_voltage(self, *args, **kwargs):
        """set_noise_voltage(self, double noise_voltage)"""
        return _filter_swig.channel_model_sptr_set_noise_voltage(self, *args, **kwargs)

    def set_frequency_offset(self, *args, **kwargs):
        """set_frequency_offset(self, double frequency_offset)"""
        return _filter_swig.channel_model_sptr_set_frequency_offset(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _filter_swig.channel_model_sptr_set_taps(self, *args, **kwargs)

    def set_timing_offset(self, *args, **kwargs):
        """set_timing_offset(self, double epsilon)"""
        return _filter_swig.channel_model_sptr_set_timing_offset(self, *args, **kwargs)

    def noise_voltage(self):
        """noise_voltage(self) -> double"""
        return _filter_swig.channel_model_sptr_noise_voltage(self)

    def frequency_offset(self):
        """frequency_offset(self) -> double"""
        return _filter_swig.channel_model_sptr_frequency_offset(self)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _filter_swig.channel_model_sptr_taps(self)

    def timing_offset(self):
        """timing_offset(self) -> double"""
        return _filter_swig.channel_model_sptr_timing_offset(self)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _filter_swig.channel_model_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _filter_swig.channel_model_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _filter_swig.channel_model_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _filter_swig.channel_model_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _filter_swig.channel_model_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _filter_swig.channel_model_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _filter_swig.channel_model_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _filter_swig.channel_model_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _filter_swig.channel_model_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _filter_swig.channel_model_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _filter_swig.channel_model_sptr__handle_call(self, *args, **kwargs)

channel_model_sptr_swigregister = _filter_swig.channel_model_sptr_swigregister
channel_model_sptr_swigregister(channel_model_sptr)

channel_model_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
channel_model = channel_model.make;



