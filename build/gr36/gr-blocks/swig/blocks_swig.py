# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_blocks_swig', [dirname(__file__)])
        except ImportError:
            import _blocks_swig
            return _blocks_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_blocks_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _blocks_swig = swig_import_helper()
    del swig_import_helper
else:
    import _blocks_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import gras

class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _blocks_swig.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _blocks_swig.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """incr(self, size_t n = 1) -> SwigPyIterator"""
        return _blocks_swig.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """decr(self, size_t n = 1) -> SwigPyIterator"""
        return _blocks_swig.SwigPyIterator_decr(self, n)

    def distance(self, *args, **kwargs):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _blocks_swig.SwigPyIterator_distance(self, *args, **kwargs)

    def equal(self, *args, **kwargs):
        """equal(self, SwigPyIterator x) -> bool"""
        return _blocks_swig.SwigPyIterator_equal(self, *args, **kwargs)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _blocks_swig.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _blocks_swig.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _blocks_swig.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _blocks_swig.SwigPyIterator_previous(self)

    def advance(self, *args, **kwargs):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _blocks_swig.SwigPyIterator_advance(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _blocks_swig.SwigPyIterator___eq__(self, *args, **kwargs)

    def __ne__(self, *args, **kwargs):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _blocks_swig.SwigPyIterator___ne__(self, *args, **kwargs)

    def __iadd__(self, *args, **kwargs):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _blocks_swig.SwigPyIterator___iadd__(self, *args, **kwargs)

    def __isub__(self, *args, **kwargs):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _blocks_swig.SwigPyIterator___isub__(self, *args, **kwargs)

    def __add__(self, *args, **kwargs):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _blocks_swig.SwigPyIterator___add__(self, *args, **kwargs)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _blocks_swig.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _blocks_swig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import GRAS_Element
GR_MSB_FIRST = _blocks_swig.GR_MSB_FIRST
GR_LSB_FIRST = _blocks_swig.GR_LSB_FIRST
class add_ff(object):
    """Proxy of C++ gr::blocks::add_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.add_ff_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> add_ff"""
        this = _blocks_swig.new_add_ff()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_add_ff
    __del__ = lambda self : None;
add_ff_swigregister = _blocks_swig.add_ff_swigregister
add_ff_swigregister(add_ff)

def add_ff_make(vlen = 1):
  """add_ff_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.add_ff_make(vlen)

class add_ss(object):
    """Proxy of C++ gr::blocks::add_ss class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.add_ss_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> add_ss"""
        this = _blocks_swig.new_add_ss()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_add_ss
    __del__ = lambda self : None;
add_ss_swigregister = _blocks_swig.add_ss_swigregister
add_ss_swigregister(add_ss)

def add_ss_make(vlen = 1):
  """add_ss_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.add_ss_make(vlen)

class add_ii(object):
    """Proxy of C++ gr::blocks::add_ii class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.add_ii_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> add_ii"""
        this = _blocks_swig.new_add_ii()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_add_ii
    __del__ = lambda self : None;
add_ii_swigregister = _blocks_swig.add_ii_swigregister
add_ii_swigregister(add_ii)

def add_ii_make(vlen = 1):
  """add_ii_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.add_ii_make(vlen)

class add_cc(object):
    """Proxy of C++ gr::blocks::add_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.add_cc_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> add_cc"""
        this = _blocks_swig.new_add_cc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_add_cc
    __del__ = lambda self : None;
add_cc_swigregister = _blocks_swig.add_cc_swigregister
add_cc_swigregister(add_cc)

def add_cc_make(vlen = 1):
  """add_cc_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.add_cc_make(vlen)

class add_const_ff(object):
    """Proxy of C++ gr::blocks::add_const_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(float k) -> sptr"""
        return _blocks_swig.add_const_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """k(self) -> float"""
        return _blocks_swig.add_const_ff_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, float k)"""
        return _blocks_swig.add_const_ff_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_add_const_ff
    __del__ = lambda self : None;
add_const_ff_swigregister = _blocks_swig.add_const_ff_swigregister
add_const_ff_swigregister(add_const_ff)

def add_const_ff_make(*args, **kwargs):
  """add_const_ff_make(float k) -> sptr"""
  return _blocks_swig.add_const_ff_make(*args, **kwargs)

class add_const_ss(object):
    """Proxy of C++ gr::blocks::add_const_ss class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(short k) -> sptr"""
        return _blocks_swig.add_const_ss_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """k(self) -> short"""
        return _blocks_swig.add_const_ss_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, short k)"""
        return _blocks_swig.add_const_ss_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_add_const_ss
    __del__ = lambda self : None;
add_const_ss_swigregister = _blocks_swig.add_const_ss_swigregister
add_const_ss_swigregister(add_const_ss)

def add_const_ss_make(*args, **kwargs):
  """add_const_ss_make(short k) -> sptr"""
  return _blocks_swig.add_const_ss_make(*args, **kwargs)

class add_const_ii(object):
    """Proxy of C++ gr::blocks::add_const_ii class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int k) -> sptr"""
        return _blocks_swig.add_const_ii_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """k(self) -> int"""
        return _blocks_swig.add_const_ii_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, int k)"""
        return _blocks_swig.add_const_ii_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_add_const_ii
    __del__ = lambda self : None;
add_const_ii_swigregister = _blocks_swig.add_const_ii_swigregister
add_const_ii_swigregister(add_const_ii)

def add_const_ii_make(*args, **kwargs):
  """add_const_ii_make(int k) -> sptr"""
  return _blocks_swig.add_const_ii_make(*args, **kwargs)

class add_const_cc(object):
    """Proxy of C++ gr::blocks::add_const_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(gr_complex k) -> sptr"""
        return _blocks_swig.add_const_cc_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """k(self) -> gr_complex"""
        return _blocks_swig.add_const_cc_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, gr_complex k)"""
        return _blocks_swig.add_const_cc_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_add_const_cc
    __del__ = lambda self : None;
add_const_cc_swigregister = _blocks_swig.add_const_cc_swigregister
add_const_cc_swigregister(add_const_cc)

def add_const_cc_make(*args, **kwargs):
  """add_const_cc_make(gr_complex k) -> sptr"""
  return _blocks_swig.add_const_cc_make(*args, **kwargs)

class add_const_vff(object):
    """Proxy of C++ gr::blocks::add_const_vff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(std::vector<(float,std::allocator<(float)>)> k) -> sptr"""
        return _blocks_swig.add_const_vff_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """k(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _blocks_swig.add_const_vff_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, std::vector<(float,std::allocator<(float)>)> k)"""
        return _blocks_swig.add_const_vff_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_add_const_vff
    __del__ = lambda self : None;
add_const_vff_swigregister = _blocks_swig.add_const_vff_swigregister
add_const_vff_swigregister(add_const_vff)

def add_const_vff_make(*args, **kwargs):
  """add_const_vff_make(std::vector<(float,std::allocator<(float)>)> k) -> sptr"""
  return _blocks_swig.add_const_vff_make(*args, **kwargs)

class add_const_vss(object):
    """Proxy of C++ gr::blocks::add_const_vss class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(__dummy_2__ k) -> sptr"""
        return _blocks_swig.add_const_vss_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """k(self) -> __dummy_2__"""
        return _blocks_swig.add_const_vss_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, __dummy_2__ k)"""
        return _blocks_swig.add_const_vss_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_add_const_vss
    __del__ = lambda self : None;
add_const_vss_swigregister = _blocks_swig.add_const_vss_swigregister
add_const_vss_swigregister(add_const_vss)

def add_const_vss_make(*args, **kwargs):
  """add_const_vss_make(__dummy_2__ k) -> sptr"""
  return _blocks_swig.add_const_vss_make(*args, **kwargs)

class add_const_vii(object):
    """Proxy of C++ gr::blocks::add_const_vii class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(std::vector<(int,std::allocator<(int)>)> k) -> sptr"""
        return _blocks_swig.add_const_vii_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """k(self) -> std::vector<(int,std::allocator<(int)>)>"""
        return _blocks_swig.add_const_vii_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, std::vector<(int,std::allocator<(int)>)> k)"""
        return _blocks_swig.add_const_vii_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_add_const_vii
    __del__ = lambda self : None;
add_const_vii_swigregister = _blocks_swig.add_const_vii_swigregister
add_const_vii_swigregister(add_const_vii)

def add_const_vii_make(*args, **kwargs):
  """add_const_vii_make(std::vector<(int,std::allocator<(int)>)> k) -> sptr"""
  return _blocks_swig.add_const_vii_make(*args, **kwargs)

class add_const_vcc(object):
    """Proxy of C++ gr::blocks::add_const_vcc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(std::vector<(gr_complex,std::allocator<(gr_complex)>)> k) -> sptr"""
        return _blocks_swig.add_const_vcc_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """k(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _blocks_swig.add_const_vcc_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> k)"""
        return _blocks_swig.add_const_vcc_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_add_const_vcc
    __del__ = lambda self : None;
add_const_vcc_swigregister = _blocks_swig.add_const_vcc_swigregister
add_const_vcc_swigregister(add_const_vcc)

def add_const_vcc_make(*args, **kwargs):
  """add_const_vcc_make(std::vector<(gr_complex,std::allocator<(gr_complex)>)> k) -> sptr"""
  return _blocks_swig.add_const_vcc_make(*args, **kwargs)

class and_bb(object):
    """Proxy of C++ gr::blocks::and_bb class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.and_bb_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> and_bb"""
        this = _blocks_swig.new_and_bb()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_and_bb
    __del__ = lambda self : None;
and_bb_swigregister = _blocks_swig.and_bb_swigregister
and_bb_swigregister(and_bb)

def and_bb_make(vlen = 1):
  """and_bb_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.and_bb_make(vlen)

class and_ss(object):
    """Proxy of C++ gr::blocks::and_ss class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.and_ss_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> and_ss"""
        this = _blocks_swig.new_and_ss()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_and_ss
    __del__ = lambda self : None;
and_ss_swigregister = _blocks_swig.and_ss_swigregister
and_ss_swigregister(and_ss)

def and_ss_make(vlen = 1):
  """and_ss_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.and_ss_make(vlen)

class and_ii(object):
    """Proxy of C++ gr::blocks::and_ii class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.and_ii_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> and_ii"""
        this = _blocks_swig.new_and_ii()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_and_ii
    __del__ = lambda self : None;
and_ii_swigregister = _blocks_swig.and_ii_swigregister
and_ii_swigregister(and_ii)

def and_ii_make(vlen = 1):
  """and_ii_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.and_ii_make(vlen)

class and_const_bb(object):
    """Proxy of C++ gr::blocks::and_const_bb class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(unsigned char k) -> sptr"""
        return _blocks_swig.and_const_bb_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """k(self) -> unsigned char"""
        return _blocks_swig.and_const_bb_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, unsigned char k)"""
        return _blocks_swig.and_const_bb_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_and_const_bb
    __del__ = lambda self : None;
and_const_bb_swigregister = _blocks_swig.and_const_bb_swigregister
and_const_bb_swigregister(and_const_bb)

def and_const_bb_make(*args, **kwargs):
  """and_const_bb_make(unsigned char k) -> sptr"""
  return _blocks_swig.and_const_bb_make(*args, **kwargs)

class and_const_ss(object):
    """Proxy of C++ gr::blocks::and_const_ss class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(short k) -> sptr"""
        return _blocks_swig.and_const_ss_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """k(self) -> short"""
        return _blocks_swig.and_const_ss_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, short k)"""
        return _blocks_swig.and_const_ss_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_and_const_ss
    __del__ = lambda self : None;
and_const_ss_swigregister = _blocks_swig.and_const_ss_swigregister
and_const_ss_swigregister(and_const_ss)

def and_const_ss_make(*args, **kwargs):
  """and_const_ss_make(short k) -> sptr"""
  return _blocks_swig.and_const_ss_make(*args, **kwargs)

class and_const_ii(object):
    """Proxy of C++ gr::blocks::and_const_ii class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int k) -> sptr"""
        return _blocks_swig.and_const_ii_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """k(self) -> int"""
        return _blocks_swig.and_const_ii_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, int k)"""
        return _blocks_swig.and_const_ii_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_and_const_ii
    __del__ = lambda self : None;
and_const_ii_swigregister = _blocks_swig.and_const_ii_swigregister
and_const_ii_swigregister(and_const_ii)

def and_const_ii_make(*args, **kwargs):
  """and_const_ii_make(int k) -> sptr"""
  return _blocks_swig.and_const_ii_make(*args, **kwargs)

class char_to_float(object):
    """Proxy of C++ gr::blocks::char_to_float class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(vlen = 1, scale = 1.0):
        """make(size_t vlen = 1, float scale = 1.0) -> sptr"""
        return _blocks_swig.char_to_float_make(vlen, scale)

    make = staticmethod(make)
    def scale(self):
        """scale(self) -> float"""
        return _blocks_swig.char_to_float_scale(self)

    def set_scale(self, *args, **kwargs):
        """set_scale(self, float scale)"""
        return _blocks_swig.char_to_float_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_char_to_float
    __del__ = lambda self : None;
char_to_float_swigregister = _blocks_swig.char_to_float_swigregister
char_to_float_swigregister(char_to_float)

def char_to_float_make(vlen = 1, scale = 1.0):
  """char_to_float_make(size_t vlen = 1, float scale = 1.0) -> sptr"""
  return _blocks_swig.char_to_float_make(vlen, scale)

class char_to_short(object):
    """Proxy of C++ gr::blocks::char_to_short class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.char_to_short_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> char_to_short"""
        this = _blocks_swig.new_char_to_short()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_char_to_short
    __del__ = lambda self : None;
char_to_short_swigregister = _blocks_swig.char_to_short_swigregister
char_to_short_swigregister(char_to_short)

def char_to_short_make(vlen = 1):
  """char_to_short_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.char_to_short_make(vlen)

class complex_to_interleaved_short(object):
    """Proxy of C++ gr::blocks::complex_to_interleaved_short class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make():
        """make() -> sptr"""
        return _blocks_swig.complex_to_interleaved_short_make()

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> complex_to_interleaved_short"""
        this = _blocks_swig.new_complex_to_interleaved_short()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_complex_to_interleaved_short
    __del__ = lambda self : None;
complex_to_interleaved_short_swigregister = _blocks_swig.complex_to_interleaved_short_swigregister
complex_to_interleaved_short_swigregister(complex_to_interleaved_short)

def complex_to_interleaved_short_make():
  """complex_to_interleaved_short_make() -> sptr"""
  return _blocks_swig.complex_to_interleaved_short_make()

class complex_to_float(object):
    """Proxy of C++ gr::blocks::complex_to_float class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.complex_to_float_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> complex_to_float"""
        this = _blocks_swig.new_complex_to_float()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_complex_to_float
    __del__ = lambda self : None;
complex_to_float_swigregister = _blocks_swig.complex_to_float_swigregister
complex_to_float_swigregister(complex_to_float)

def complex_to_float_make(vlen = 1):
  """complex_to_float_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.complex_to_float_make(vlen)

class complex_to_real(object):
    """Proxy of C++ gr::blocks::complex_to_real class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.complex_to_real_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> complex_to_real"""
        this = _blocks_swig.new_complex_to_real()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_complex_to_real
    __del__ = lambda self : None;
complex_to_real_swigregister = _blocks_swig.complex_to_real_swigregister
complex_to_real_swigregister(complex_to_real)

def complex_to_real_make(vlen = 1):
  """complex_to_real_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.complex_to_real_make(vlen)

class complex_to_imag(object):
    """Proxy of C++ gr::blocks::complex_to_imag class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.complex_to_imag_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> complex_to_imag"""
        this = _blocks_swig.new_complex_to_imag()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_complex_to_imag
    __del__ = lambda self : None;
complex_to_imag_swigregister = _blocks_swig.complex_to_imag_swigregister
complex_to_imag_swigregister(complex_to_imag)

def complex_to_imag_make(vlen = 1):
  """complex_to_imag_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.complex_to_imag_make(vlen)

class complex_to_mag(object):
    """Proxy of C++ gr::blocks::complex_to_mag class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.complex_to_mag_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> complex_to_mag"""
        this = _blocks_swig.new_complex_to_mag()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_complex_to_mag
    __del__ = lambda self : None;
complex_to_mag_swigregister = _blocks_swig.complex_to_mag_swigregister
complex_to_mag_swigregister(complex_to_mag)

def complex_to_mag_make(vlen = 1):
  """complex_to_mag_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.complex_to_mag_make(vlen)

class complex_to_mag_squared(object):
    """Proxy of C++ gr::blocks::complex_to_mag_squared class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.complex_to_mag_squared_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> complex_to_mag_squared"""
        this = _blocks_swig.new_complex_to_mag_squared()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_complex_to_mag_squared
    __del__ = lambda self : None;
complex_to_mag_squared_swigregister = _blocks_swig.complex_to_mag_squared_swigregister
complex_to_mag_squared_swigregister(complex_to_mag_squared)

def complex_to_mag_squared_make(vlen = 1):
  """complex_to_mag_squared_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.complex_to_mag_squared_make(vlen)

class complex_to_arg(object):
    """Proxy of C++ gr::blocks::complex_to_arg class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.complex_to_arg_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> complex_to_arg"""
        this = _blocks_swig.new_complex_to_arg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_complex_to_arg
    __del__ = lambda self : None;
complex_to_arg_swigregister = _blocks_swig.complex_to_arg_swigregister
complex_to_arg_swigregister(complex_to_arg)

def complex_to_arg_make(vlen = 1):
  """complex_to_arg_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.complex_to_arg_make(vlen)

class conjugate_cc(object):
    """Proxy of C++ gr::blocks::conjugate_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make():
        """make() -> sptr"""
        return _blocks_swig.conjugate_cc_make()

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> conjugate_cc"""
        this = _blocks_swig.new_conjugate_cc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_conjugate_cc
    __del__ = lambda self : None;
conjugate_cc_swigregister = _blocks_swig.conjugate_cc_swigregister
conjugate_cc_swigregister(conjugate_cc)

def conjugate_cc_make():
  """conjugate_cc_make() -> sptr"""
  return _blocks_swig.conjugate_cc_make()

class deinterleave(object):
    """Proxy of C++ gr::blocks::deinterleave class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(size_t itemsize) -> sptr"""
        return _blocks_swig.deinterleave_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> deinterleave"""
        this = _blocks_swig.new_deinterleave()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_deinterleave
    __del__ = lambda self : None;
deinterleave_swigregister = _blocks_swig.deinterleave_swigregister
deinterleave_swigregister(deinterleave)

def deinterleave_make(*args, **kwargs):
  """deinterleave_make(size_t itemsize) -> sptr"""
  return _blocks_swig.deinterleave_make(*args, **kwargs)

class delay(object):
    """Proxy of C++ gr::blocks::delay class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(size_t itemsize, int delay) -> sptr"""
        return _blocks_swig.delay_make(*args, **kwargs)

    make = staticmethod(make)
    def dly(self):
        """dly(self) -> int"""
        return _blocks_swig.delay_dly(self)

    def set_dly(self, *args, **kwargs):
        """set_dly(self, int d)"""
        return _blocks_swig.delay_set_dly(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_delay
    __del__ = lambda self : None;
delay_swigregister = _blocks_swig.delay_swigregister
delay_swigregister(delay)

def delay_make(*args, **kwargs):
  """delay_make(size_t itemsize, int delay) -> sptr"""
  return _blocks_swig.delay_make(*args, **kwargs)

class file_source(object):
    """Proxy of C++ gr::blocks::file_source class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(size_t itemsize, char filename, bool repeat = False) -> sptr"""
        return _blocks_swig.file_source_make(*args, **kwargs)

    make = staticmethod(make)
    def seek(self, *args, **kwargs):
        """seek(self, long seek_point, int whence) -> bool"""
        return _blocks_swig.file_source_seek(self, *args, **kwargs)

    def open(self, *args, **kwargs):
        """open(self, char filename, bool repeat)"""
        return _blocks_swig.file_source_open(self, *args, **kwargs)

    def close(self):
        """close(self)"""
        return _blocks_swig.file_source_close(self)

    __swig_destroy__ = _blocks_swig.delete_file_source
    __del__ = lambda self : None;
file_source_swigregister = _blocks_swig.file_source_swigregister
file_source_swigregister(file_source)

def file_source_make(*args, **kwargs):
  """file_source_make(size_t itemsize, char filename, bool repeat = False) -> sptr"""
  return _blocks_swig.file_source_make(*args, **kwargs)

GR_FILE_BYTE = _blocks_swig.GR_FILE_BYTE
GR_FILE_CHAR = _blocks_swig.GR_FILE_CHAR
GR_FILE_SHORT = _blocks_swig.GR_FILE_SHORT
GR_FILE_INT = _blocks_swig.GR_FILE_INT
GR_FILE_LONG = _blocks_swig.GR_FILE_LONG
GR_FILE_LONG_LONG = _blocks_swig.GR_FILE_LONG_LONG
GR_FILE_FLOAT = _blocks_swig.GR_FILE_FLOAT
GR_FILE_DOUBLE = _blocks_swig.GR_FILE_DOUBLE
class file_meta_sink(object):
    """Proxy of C++ gr::blocks::file_meta_sink class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t itemsize, string filename, double samp_rate = 1, 
            double relative_rate = 1, gr_file_types type = GR_FILE_FLOAT, 
            bool complex = True, size_t max_segment_size = 1000000, 
            string extra_dict = "", 
            bool detached_header = False) -> sptr
        """
        return _blocks_swig.file_meta_sink_make(*args, **kwargs)

    make = staticmethod(make)
    def open(self, *args, **kwargs):
        """open(self, string filename) -> bool"""
        return _blocks_swig.file_meta_sink_open(self, *args, **kwargs)

    def close(self):
        """close(self)"""
        return _blocks_swig.file_meta_sink_close(self)

    def do_update(self):
        """do_update(self)"""
        return _blocks_swig.file_meta_sink_do_update(self)

    def set_unbuffered(self, *args, **kwargs):
        """set_unbuffered(self, bool unbuffered)"""
        return _blocks_swig.file_meta_sink_set_unbuffered(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_file_meta_sink
    __del__ = lambda self : None;
file_meta_sink_swigregister = _blocks_swig.file_meta_sink_swigregister
file_meta_sink_swigregister(file_meta_sink)
cvar = _blocks_swig.cvar
METADATA_VERSION = cvar.METADATA_VERSION
METADATA_HEADER_SIZE = cvar.METADATA_HEADER_SIZE

def file_meta_sink_make(*args, **kwargs):
  """
    file_meta_sink_make(size_t itemsize, string filename, double samp_rate = 1, 
        double relative_rate = 1, gr_file_types type = GR_FILE_FLOAT, 
        bool complex = True, size_t max_segment_size = 1000000, 
        string extra_dict = "", 
        bool detached_header = False) -> sptr
    """
  return _blocks_swig.file_meta_sink_make(*args, **kwargs)

class file_meta_source(object):
    """Proxy of C++ gr::blocks::file_meta_source class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(string filename, bool repeat = False, bool detached_header = False, 
            string hdr_filename = "") -> sptr
        """
        return _blocks_swig.file_meta_source_make(*args, **kwargs)

    make = staticmethod(make)
    def open(self, *args, **kwargs):
        """open(self, string filename, string hdr_filename = "") -> bool"""
        return _blocks_swig.file_meta_source_open(self, *args, **kwargs)

    def close(self):
        """close(self)"""
        return _blocks_swig.file_meta_source_close(self)

    def do_update(self):
        """do_update(self)"""
        return _blocks_swig.file_meta_source_do_update(self)

    __swig_destroy__ = _blocks_swig.delete_file_meta_source
    __del__ = lambda self : None;
file_meta_source_swigregister = _blocks_swig.file_meta_source_swigregister
file_meta_source_swigregister(file_meta_source)

def file_meta_source_make(*args, **kwargs):
  """
    file_meta_source_make(string filename, bool repeat = False, bool detached_header = False, 
        string hdr_filename = "") -> sptr
    """
  return _blocks_swig.file_meta_source_make(*args, **kwargs)

class divide_ff(object):
    """Proxy of C++ gr::blocks::divide_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.divide_ff_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> divide_ff"""
        this = _blocks_swig.new_divide_ff()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_divide_ff
    __del__ = lambda self : None;
divide_ff_swigregister = _blocks_swig.divide_ff_swigregister
divide_ff_swigregister(divide_ff)

def divide_ff_make(vlen = 1):
  """divide_ff_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.divide_ff_make(vlen)

class divide_ss(object):
    """Proxy of C++ gr::blocks::divide_ss class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.divide_ss_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> divide_ss"""
        this = _blocks_swig.new_divide_ss()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_divide_ss
    __del__ = lambda self : None;
divide_ss_swigregister = _blocks_swig.divide_ss_swigregister
divide_ss_swigregister(divide_ss)

def divide_ss_make(vlen = 1):
  """divide_ss_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.divide_ss_make(vlen)

class divide_ii(object):
    """Proxy of C++ gr::blocks::divide_ii class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.divide_ii_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> divide_ii"""
        this = _blocks_swig.new_divide_ii()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_divide_ii
    __del__ = lambda self : None;
divide_ii_swigregister = _blocks_swig.divide_ii_swigregister
divide_ii_swigregister(divide_ii)

def divide_ii_make(vlen = 1):
  """divide_ii_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.divide_ii_make(vlen)

class divide_cc(object):
    """Proxy of C++ gr::blocks::divide_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.divide_cc_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> divide_cc"""
        this = _blocks_swig.new_divide_cc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_divide_cc
    __del__ = lambda self : None;
divide_cc_swigregister = _blocks_swig.divide_cc_swigregister
divide_cc_swigregister(divide_cc)

def divide_cc_make(vlen = 1):
  """divide_cc_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.divide_cc_make(vlen)

class float_to_char(object):
    """Proxy of C++ gr::blocks::float_to_char class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(vlen = 1, scale = 1.0):
        """make(size_t vlen = 1, float scale = 1.0) -> sptr"""
        return _blocks_swig.float_to_char_make(vlen, scale)

    make = staticmethod(make)
    def scale(self):
        """scale(self) -> float"""
        return _blocks_swig.float_to_char_scale(self)

    def set_scale(self, *args, **kwargs):
        """set_scale(self, float scale)"""
        return _blocks_swig.float_to_char_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_float_to_char
    __del__ = lambda self : None;
float_to_char_swigregister = _blocks_swig.float_to_char_swigregister
float_to_char_swigregister(float_to_char)

def float_to_char_make(vlen = 1, scale = 1.0):
  """float_to_char_make(size_t vlen = 1, float scale = 1.0) -> sptr"""
  return _blocks_swig.float_to_char_make(vlen, scale)

class float_to_complex(object):
    """Proxy of C++ gr::blocks::float_to_complex class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.float_to_complex_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> float_to_complex"""
        this = _blocks_swig.new_float_to_complex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_float_to_complex
    __del__ = lambda self : None;
float_to_complex_swigregister = _blocks_swig.float_to_complex_swigregister
float_to_complex_swigregister(float_to_complex)

def float_to_complex_make(vlen = 1):
  """float_to_complex_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.float_to_complex_make(vlen)

class float_to_int(object):
    """Proxy of C++ gr::blocks::float_to_int class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(vlen = 1, scale = 1.0):
        """make(size_t vlen = 1, float scale = 1.0) -> sptr"""
        return _blocks_swig.float_to_int_make(vlen, scale)

    make = staticmethod(make)
    def scale(self):
        """scale(self) -> float"""
        return _blocks_swig.float_to_int_scale(self)

    def set_scale(self, *args, **kwargs):
        """set_scale(self, float scale)"""
        return _blocks_swig.float_to_int_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_float_to_int
    __del__ = lambda self : None;
float_to_int_swigregister = _blocks_swig.float_to_int_swigregister
float_to_int_swigregister(float_to_int)

def float_to_int_make(vlen = 1, scale = 1.0):
  """float_to_int_make(size_t vlen = 1, float scale = 1.0) -> sptr"""
  return _blocks_swig.float_to_int_make(vlen, scale)

class float_to_short(object):
    """Proxy of C++ gr::blocks::float_to_short class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(vlen = 1, scale = 1.0):
        """make(size_t vlen = 1, float scale = 1.0) -> sptr"""
        return _blocks_swig.float_to_short_make(vlen, scale)

    make = staticmethod(make)
    def scale(self):
        """scale(self) -> float"""
        return _blocks_swig.float_to_short_scale(self)

    def set_scale(self, *args, **kwargs):
        """set_scale(self, float scale)"""
        return _blocks_swig.float_to_short_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_float_to_short
    __del__ = lambda self : None;
float_to_short_swigregister = _blocks_swig.float_to_short_swigregister
float_to_short_swigregister(float_to_short)

def float_to_short_make(vlen = 1, scale = 1.0):
  """float_to_short_make(size_t vlen = 1, float scale = 1.0) -> sptr"""
  return _blocks_swig.float_to_short_make(vlen, scale)

class float_to_uchar(object):
    """Proxy of C++ gr::blocks::float_to_uchar class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make():
        """make() -> sptr"""
        return _blocks_swig.float_to_uchar_make()

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> float_to_uchar"""
        this = _blocks_swig.new_float_to_uchar()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_float_to_uchar
    __del__ = lambda self : None;
float_to_uchar_swigregister = _blocks_swig.float_to_uchar_swigregister
float_to_uchar_swigregister(float_to_uchar)

def float_to_uchar_make():
  """float_to_uchar_make() -> sptr"""
  return _blocks_swig.float_to_uchar_make()

class int_to_float(object):
    """Proxy of C++ gr::blocks::int_to_float class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(vlen = 1, scale = 1.0):
        """make(size_t vlen = 1, float scale = 1.0) -> sptr"""
        return _blocks_swig.int_to_float_make(vlen, scale)

    make = staticmethod(make)
    def scale(self):
        """scale(self) -> float"""
        return _blocks_swig.int_to_float_scale(self)

    def set_scale(self, *args, **kwargs):
        """set_scale(self, float scale)"""
        return _blocks_swig.int_to_float_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_int_to_float
    __del__ = lambda self : None;
int_to_float_swigregister = _blocks_swig.int_to_float_swigregister
int_to_float_swigregister(int_to_float)

def int_to_float_make(vlen = 1, scale = 1.0):
  """int_to_float_make(size_t vlen = 1, float scale = 1.0) -> sptr"""
  return _blocks_swig.int_to_float_make(vlen, scale)

class integrate_ss(object):
    """Proxy of C++ gr::blocks::integrate_ss class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int decim) -> sptr"""
        return _blocks_swig.integrate_ss_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> integrate_ss"""
        this = _blocks_swig.new_integrate_ss()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_integrate_ss
    __del__ = lambda self : None;
integrate_ss_swigregister = _blocks_swig.integrate_ss_swigregister
integrate_ss_swigregister(integrate_ss)

def integrate_ss_make(*args, **kwargs):
  """integrate_ss_make(int decim) -> sptr"""
  return _blocks_swig.integrate_ss_make(*args, **kwargs)

class integrate_ii(object):
    """Proxy of C++ gr::blocks::integrate_ii class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int decim) -> sptr"""
        return _blocks_swig.integrate_ii_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> integrate_ii"""
        this = _blocks_swig.new_integrate_ii()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_integrate_ii
    __del__ = lambda self : None;
integrate_ii_swigregister = _blocks_swig.integrate_ii_swigregister
integrate_ii_swigregister(integrate_ii)

def integrate_ii_make(*args, **kwargs):
  """integrate_ii_make(int decim) -> sptr"""
  return _blocks_swig.integrate_ii_make(*args, **kwargs)

class integrate_ff(object):
    """Proxy of C++ gr::blocks::integrate_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int decim) -> sptr"""
        return _blocks_swig.integrate_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> integrate_ff"""
        this = _blocks_swig.new_integrate_ff()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_integrate_ff
    __del__ = lambda self : None;
integrate_ff_swigregister = _blocks_swig.integrate_ff_swigregister
integrate_ff_swigregister(integrate_ff)

def integrate_ff_make(*args, **kwargs):
  """integrate_ff_make(int decim) -> sptr"""
  return _blocks_swig.integrate_ff_make(*args, **kwargs)

class integrate_cc(object):
    """Proxy of C++ gr::blocks::integrate_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int decim) -> sptr"""
        return _blocks_swig.integrate_cc_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> integrate_cc"""
        this = _blocks_swig.new_integrate_cc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_integrate_cc
    __del__ = lambda self : None;
integrate_cc_swigregister = _blocks_swig.integrate_cc_swigregister
integrate_cc_swigregister(integrate_cc)

def integrate_cc_make(*args, **kwargs):
  """integrate_cc_make(int decim) -> sptr"""
  return _blocks_swig.integrate_cc_make(*args, **kwargs)

class interleave(object):
    """Proxy of C++ gr::blocks::interleave class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(size_t itemsize) -> sptr"""
        return _blocks_swig.interleave_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> interleave"""
        this = _blocks_swig.new_interleave()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_interleave
    __del__ = lambda self : None;
interleave_swigregister = _blocks_swig.interleave_swigregister
interleave_swigregister(interleave)

def interleave_make(*args, **kwargs):
  """interleave_make(size_t itemsize) -> sptr"""
  return _blocks_swig.interleave_make(*args, **kwargs)

class interleaved_short_to_complex(object):
    """Proxy of C++ gr::blocks::interleaved_short_to_complex class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make():
        """make() -> sptr"""
        return _blocks_swig.interleaved_short_to_complex_make()

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> interleaved_short_to_complex"""
        this = _blocks_swig.new_interleaved_short_to_complex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_interleaved_short_to_complex
    __del__ = lambda self : None;
interleaved_short_to_complex_swigregister = _blocks_swig.interleaved_short_to_complex_swigregister
interleaved_short_to_complex_swigregister(interleaved_short_to_complex)

def interleaved_short_to_complex_make():
  """interleaved_short_to_complex_make() -> sptr"""
  return _blocks_swig.interleaved_short_to_complex_make()

class keep_m_in_n(object):
    """Proxy of C++ gr::blocks::keep_m_in_n class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(size_t itemsize, int m, int n, int offset) -> sptr"""
        return _blocks_swig.keep_m_in_n_make(*args, **kwargs)

    make = staticmethod(make)
    def set_m(self, *args, **kwargs):
        """set_m(self, int m)"""
        return _blocks_swig.keep_m_in_n_set_m(self, *args, **kwargs)

    def set_n(self, *args, **kwargs):
        """set_n(self, int n)"""
        return _blocks_swig.keep_m_in_n_set_n(self, *args, **kwargs)

    def set_offset(self, *args, **kwargs):
        """set_offset(self, int offset)"""
        return _blocks_swig.keep_m_in_n_set_offset(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_keep_m_in_n
    __del__ = lambda self : None;
keep_m_in_n_swigregister = _blocks_swig.keep_m_in_n_swigregister
keep_m_in_n_swigregister(keep_m_in_n)

def keep_m_in_n_make(*args, **kwargs):
  """keep_m_in_n_make(size_t itemsize, int m, int n, int offset) -> sptr"""
  return _blocks_swig.keep_m_in_n_make(*args, **kwargs)

class keep_one_in_n(object):
    """Proxy of C++ gr::blocks::keep_one_in_n class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(size_t itemsize, int n) -> sptr"""
        return _blocks_swig.keep_one_in_n_make(*args, **kwargs)

    make = staticmethod(make)
    def set_n(self, *args, **kwargs):
        """set_n(self, int n)"""
        return _blocks_swig.keep_one_in_n_set_n(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_keep_one_in_n
    __del__ = lambda self : None;
keep_one_in_n_swigregister = _blocks_swig.keep_one_in_n_swigregister
keep_one_in_n_swigregister(keep_one_in_n)

def keep_one_in_n_make(*args, **kwargs):
  """keep_one_in_n_make(size_t itemsize, int n) -> sptr"""
  return _blocks_swig.keep_one_in_n_make(*args, **kwargs)

class multiply_ss(object):
    """Proxy of C++ gr::blocks::multiply_ss class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.multiply_ss_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> multiply_ss"""
        this = _blocks_swig.new_multiply_ss()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_multiply_ss
    __del__ = lambda self : None;
multiply_ss_swigregister = _blocks_swig.multiply_ss_swigregister
multiply_ss_swigregister(multiply_ss)

def multiply_ss_make(vlen = 1):
  """multiply_ss_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.multiply_ss_make(vlen)

class multiply_ii(object):
    """Proxy of C++ gr::blocks::multiply_ii class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.multiply_ii_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> multiply_ii"""
        this = _blocks_swig.new_multiply_ii()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_multiply_ii
    __del__ = lambda self : None;
multiply_ii_swigregister = _blocks_swig.multiply_ii_swigregister
multiply_ii_swigregister(multiply_ii)

def multiply_ii_make(vlen = 1):
  """multiply_ii_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.multiply_ii_make(vlen)

class multiply_ff(object):
    """Proxy of C++ gr::blocks::multiply_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.multiply_ff_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> multiply_ff"""
        this = _blocks_swig.new_multiply_ff()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_multiply_ff
    __del__ = lambda self : None;
multiply_ff_swigregister = _blocks_swig.multiply_ff_swigregister
multiply_ff_swigregister(multiply_ff)

def multiply_ff_make(vlen = 1):
  """multiply_ff_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.multiply_ff_make(vlen)

class multiply_cc(object):
    """Proxy of C++ gr::blocks::multiply_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.multiply_cc_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> multiply_cc"""
        this = _blocks_swig.new_multiply_cc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_multiply_cc
    __del__ = lambda self : None;
multiply_cc_swigregister = _blocks_swig.multiply_cc_swigregister
multiply_cc_swigregister(multiply_cc)

def multiply_cc_make(vlen = 1):
  """multiply_cc_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.multiply_cc_make(vlen)

class multiply_conjugate_cc(object):
    """Proxy of C++ gr::blocks::multiply_conjugate_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.multiply_conjugate_cc_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> multiply_conjugate_cc"""
        this = _blocks_swig.new_multiply_conjugate_cc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_multiply_conjugate_cc
    __del__ = lambda self : None;
multiply_conjugate_cc_swigregister = _blocks_swig.multiply_conjugate_cc_swigregister
multiply_conjugate_cc_swigregister(multiply_conjugate_cc)

def multiply_conjugate_cc_make(vlen = 1):
  """multiply_conjugate_cc_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.multiply_conjugate_cc_make(vlen)

class multiply_const_ss(object):
    """Proxy of C++ gr::blocks::multiply_const_ss class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(short k) -> sptr"""
        return _blocks_swig.multiply_const_ss_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """k(self) -> short"""
        return _blocks_swig.multiply_const_ss_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, short k)"""
        return _blocks_swig.multiply_const_ss_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_multiply_const_ss
    __del__ = lambda self : None;
multiply_const_ss_swigregister = _blocks_swig.multiply_const_ss_swigregister
multiply_const_ss_swigregister(multiply_const_ss)

def multiply_const_ss_make(*args, **kwargs):
  """multiply_const_ss_make(short k) -> sptr"""
  return _blocks_swig.multiply_const_ss_make(*args, **kwargs)

class multiply_const_ii(object):
    """Proxy of C++ gr::blocks::multiply_const_ii class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int k) -> sptr"""
        return _blocks_swig.multiply_const_ii_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """k(self) -> int"""
        return _blocks_swig.multiply_const_ii_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, int k)"""
        return _blocks_swig.multiply_const_ii_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_multiply_const_ii
    __del__ = lambda self : None;
multiply_const_ii_swigregister = _blocks_swig.multiply_const_ii_swigregister
multiply_const_ii_swigregister(multiply_const_ii)

def multiply_const_ii_make(*args, **kwargs):
  """multiply_const_ii_make(int k) -> sptr"""
  return _blocks_swig.multiply_const_ii_make(*args, **kwargs)

class multiply_const_ff(object):
    """Proxy of C++ gr::blocks::multiply_const_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(float k, size_t vlen = 1) -> sptr"""
        return _blocks_swig.multiply_const_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """k(self) -> float"""
        return _blocks_swig.multiply_const_ff_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, float k)"""
        return _blocks_swig.multiply_const_ff_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_multiply_const_ff
    __del__ = lambda self : None;
multiply_const_ff_swigregister = _blocks_swig.multiply_const_ff_swigregister
multiply_const_ff_swigregister(multiply_const_ff)

def multiply_const_ff_make(*args, **kwargs):
  """multiply_const_ff_make(float k, size_t vlen = 1) -> sptr"""
  return _blocks_swig.multiply_const_ff_make(*args, **kwargs)

class multiply_const_cc(object):
    """Proxy of C++ gr::blocks::multiply_const_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(gr_complex k, size_t vlen = 1) -> sptr"""
        return _blocks_swig.multiply_const_cc_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """k(self) -> gr_complex"""
        return _blocks_swig.multiply_const_cc_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, gr_complex k)"""
        return _blocks_swig.multiply_const_cc_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_multiply_const_cc
    __del__ = lambda self : None;
multiply_const_cc_swigregister = _blocks_swig.multiply_const_cc_swigregister
multiply_const_cc_swigregister(multiply_const_cc)

def multiply_const_cc_make(*args, **kwargs):
  """multiply_const_cc_make(gr_complex k, size_t vlen = 1) -> sptr"""
  return _blocks_swig.multiply_const_cc_make(*args, **kwargs)

class multiply_const_vss(object):
    """Proxy of C++ gr::blocks::multiply_const_vss class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(__dummy_2__ k) -> sptr"""
        return _blocks_swig.multiply_const_vss_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """k(self) -> __dummy_2__"""
        return _blocks_swig.multiply_const_vss_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, __dummy_2__ k)"""
        return _blocks_swig.multiply_const_vss_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_multiply_const_vss
    __del__ = lambda self : None;
multiply_const_vss_swigregister = _blocks_swig.multiply_const_vss_swigregister
multiply_const_vss_swigregister(multiply_const_vss)

def multiply_const_vss_make(*args, **kwargs):
  """multiply_const_vss_make(__dummy_2__ k) -> sptr"""
  return _blocks_swig.multiply_const_vss_make(*args, **kwargs)

class multiply_const_vii(object):
    """Proxy of C++ gr::blocks::multiply_const_vii class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(std::vector<(int,std::allocator<(int)>)> k) -> sptr"""
        return _blocks_swig.multiply_const_vii_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """k(self) -> std::vector<(int,std::allocator<(int)>)>"""
        return _blocks_swig.multiply_const_vii_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, std::vector<(int,std::allocator<(int)>)> k)"""
        return _blocks_swig.multiply_const_vii_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_multiply_const_vii
    __del__ = lambda self : None;
multiply_const_vii_swigregister = _blocks_swig.multiply_const_vii_swigregister
multiply_const_vii_swigregister(multiply_const_vii)

def multiply_const_vii_make(*args, **kwargs):
  """multiply_const_vii_make(std::vector<(int,std::allocator<(int)>)> k) -> sptr"""
  return _blocks_swig.multiply_const_vii_make(*args, **kwargs)

class multiply_const_vff(object):
    """Proxy of C++ gr::blocks::multiply_const_vff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(std::vector<(float,std::allocator<(float)>)> k) -> sptr"""
        return _blocks_swig.multiply_const_vff_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """k(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _blocks_swig.multiply_const_vff_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, std::vector<(float,std::allocator<(float)>)> k)"""
        return _blocks_swig.multiply_const_vff_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_multiply_const_vff
    __del__ = lambda self : None;
multiply_const_vff_swigregister = _blocks_swig.multiply_const_vff_swigregister
multiply_const_vff_swigregister(multiply_const_vff)

def multiply_const_vff_make(*args, **kwargs):
  """multiply_const_vff_make(std::vector<(float,std::allocator<(float)>)> k) -> sptr"""
  return _blocks_swig.multiply_const_vff_make(*args, **kwargs)

class multiply_const_vcc(object):
    """Proxy of C++ gr::blocks::multiply_const_vcc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(std::vector<(gr_complex,std::allocator<(gr_complex)>)> k) -> sptr"""
        return _blocks_swig.multiply_const_vcc_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """k(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _blocks_swig.multiply_const_vcc_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> k)"""
        return _blocks_swig.multiply_const_vcc_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_multiply_const_vcc
    __del__ = lambda self : None;
multiply_const_vcc_swigregister = _blocks_swig.multiply_const_vcc_swigregister
multiply_const_vcc_swigregister(multiply_const_vcc)

def multiply_const_vcc_make(*args, **kwargs):
  """multiply_const_vcc_make(std::vector<(gr_complex,std::allocator<(gr_complex)>)> k) -> sptr"""
  return _blocks_swig.multiply_const_vcc_make(*args, **kwargs)

class nlog10_ff(object):
    """Proxy of C++ gr::blocks::nlog10_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(n = 1.0, vlen = 1, k = 0.0):
        """make(float n = 1.0, size_t vlen = 1, float k = 0.0) -> sptr"""
        return _blocks_swig.nlog10_ff_make(n, vlen, k)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> nlog10_ff"""
        this = _blocks_swig.new_nlog10_ff()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_nlog10_ff
    __del__ = lambda self : None;
nlog10_ff_swigregister = _blocks_swig.nlog10_ff_swigregister
nlog10_ff_swigregister(nlog10_ff)

def nlog10_ff_make(n = 1.0, vlen = 1, k = 0.0):
  """nlog10_ff_make(float n = 1.0, size_t vlen = 1, float k = 0.0) -> sptr"""
  return _blocks_swig.nlog10_ff_make(n, vlen, k)

class not_bb(object):
    """Proxy of C++ gr::blocks::not_bb class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.not_bb_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> not_bb"""
        this = _blocks_swig.new_not_bb()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_not_bb
    __del__ = lambda self : None;
not_bb_swigregister = _blocks_swig.not_bb_swigregister
not_bb_swigregister(not_bb)

def not_bb_make(vlen = 1):
  """not_bb_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.not_bb_make(vlen)

class not_ss(object):
    """Proxy of C++ gr::blocks::not_ss class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.not_ss_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> not_ss"""
        this = _blocks_swig.new_not_ss()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_not_ss
    __del__ = lambda self : None;
not_ss_swigregister = _blocks_swig.not_ss_swigregister
not_ss_swigregister(not_ss)

def not_ss_make(vlen = 1):
  """not_ss_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.not_ss_make(vlen)

class not_ii(object):
    """Proxy of C++ gr::blocks::not_ii class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.not_ii_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> not_ii"""
        this = _blocks_swig.new_not_ii()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_not_ii
    __del__ = lambda self : None;
not_ii_swigregister = _blocks_swig.not_ii_swigregister
not_ii_swigregister(not_ii)

def not_ii_make(vlen = 1):
  """not_ii_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.not_ii_make(vlen)

class patterned_interleaver(object):
    """Proxy of C++ gr::blocks::patterned_interleaver class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(size_t itemsize, std::vector<(int,std::allocator<(int)>)> pattern) -> sptr"""
        return _blocks_swig.patterned_interleaver_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> patterned_interleaver"""
        this = _blocks_swig.new_patterned_interleaver()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_patterned_interleaver
    __del__ = lambda self : None;
patterned_interleaver_swigregister = _blocks_swig.patterned_interleaver_swigregister
patterned_interleaver_swigregister(patterned_interleaver)

def patterned_interleaver_make(*args, **kwargs):
  """patterned_interleaver_make(size_t itemsize, std::vector<(int,std::allocator<(int)>)> pattern) -> sptr"""
  return _blocks_swig.patterned_interleaver_make(*args, **kwargs)

class packed_to_unpacked_bb(object):
    """Proxy of C++ gr::blocks::packed_to_unpacked_bb class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(unsigned int bits_per_chunk, gr_endianness_t endianness) -> sptr"""
        return _blocks_swig.packed_to_unpacked_bb_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> packed_to_unpacked_bb"""
        this = _blocks_swig.new_packed_to_unpacked_bb()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_packed_to_unpacked_bb
    __del__ = lambda self : None;
packed_to_unpacked_bb_swigregister = _blocks_swig.packed_to_unpacked_bb_swigregister
packed_to_unpacked_bb_swigregister(packed_to_unpacked_bb)

def packed_to_unpacked_bb_make(*args, **kwargs):
  """packed_to_unpacked_bb_make(unsigned int bits_per_chunk, gr_endianness_t endianness) -> sptr"""
  return _blocks_swig.packed_to_unpacked_bb_make(*args, **kwargs)

class packed_to_unpacked_ss(object):
    """Proxy of C++ gr::blocks::packed_to_unpacked_ss class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(unsigned int bits_per_chunk, gr_endianness_t endianness) -> sptr"""
        return _blocks_swig.packed_to_unpacked_ss_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> packed_to_unpacked_ss"""
        this = _blocks_swig.new_packed_to_unpacked_ss()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_packed_to_unpacked_ss
    __del__ = lambda self : None;
packed_to_unpacked_ss_swigregister = _blocks_swig.packed_to_unpacked_ss_swigregister
packed_to_unpacked_ss_swigregister(packed_to_unpacked_ss)

def packed_to_unpacked_ss_make(*args, **kwargs):
  """packed_to_unpacked_ss_make(unsigned int bits_per_chunk, gr_endianness_t endianness) -> sptr"""
  return _blocks_swig.packed_to_unpacked_ss_make(*args, **kwargs)

class packed_to_unpacked_ii(object):
    """Proxy of C++ gr::blocks::packed_to_unpacked_ii class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(unsigned int bits_per_chunk, gr_endianness_t endianness) -> sptr"""
        return _blocks_swig.packed_to_unpacked_ii_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> packed_to_unpacked_ii"""
        this = _blocks_swig.new_packed_to_unpacked_ii()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_packed_to_unpacked_ii
    __del__ = lambda self : None;
packed_to_unpacked_ii_swigregister = _blocks_swig.packed_to_unpacked_ii_swigregister
packed_to_unpacked_ii_swigregister(packed_to_unpacked_ii)

def packed_to_unpacked_ii_make(*args, **kwargs):
  """packed_to_unpacked_ii_make(unsigned int bits_per_chunk, gr_endianness_t endianness) -> sptr"""
  return _blocks_swig.packed_to_unpacked_ii_make(*args, **kwargs)

class peak_detector2_fb(object):
    """Proxy of C++ gr::blocks::peak_detector2_fb class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(threshold_factor_rise = 7, look_ahead = 1000, alpha = 0.001):
        """
        make(float threshold_factor_rise = 7, int look_ahead = 1000, 
            float alpha = 0.001) -> sptr
        """
        return _blocks_swig.peak_detector2_fb_make(threshold_factor_rise, look_ahead, alpha)

    make = staticmethod(make)
    def set_threshold_factor_rise(self, *args, **kwargs):
        """set_threshold_factor_rise(self, float thr)"""
        return _blocks_swig.peak_detector2_fb_set_threshold_factor_rise(self, *args, **kwargs)

    def set_look_ahead(self, *args, **kwargs):
        """set_look_ahead(self, int look)"""
        return _blocks_swig.peak_detector2_fb_set_look_ahead(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, int alpha)"""
        return _blocks_swig.peak_detector2_fb_set_alpha(self, *args, **kwargs)

    def threshold_factor_rise(self):
        """threshold_factor_rise(self) -> float"""
        return _blocks_swig.peak_detector2_fb_threshold_factor_rise(self)

    def look_ahead(self):
        """look_ahead(self) -> int"""
        return _blocks_swig.peak_detector2_fb_look_ahead(self)

    def alpha(self):
        """alpha(self) -> float"""
        return _blocks_swig.peak_detector2_fb_alpha(self)

    __swig_destroy__ = _blocks_swig.delete_peak_detector2_fb
    __del__ = lambda self : None;
peak_detector2_fb_swigregister = _blocks_swig.peak_detector2_fb_swigregister
peak_detector2_fb_swigregister(peak_detector2_fb)

def peak_detector2_fb_make(threshold_factor_rise = 7, look_ahead = 1000, alpha = 0.001):
  """
    peak_detector2_fb_make(float threshold_factor_rise = 7, int look_ahead = 1000, 
        float alpha = 0.001) -> sptr
    """
  return _blocks_swig.peak_detector2_fb_make(threshold_factor_rise, look_ahead, alpha)

class or_bb(object):
    """Proxy of C++ gr::blocks::or_bb class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.or_bb_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> or_bb"""
        this = _blocks_swig.new_or_bb()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_or_bb
    __del__ = lambda self : None;
or_bb_swigregister = _blocks_swig.or_bb_swigregister
or_bb_swigregister(or_bb)

def or_bb_make(vlen = 1):
  """or_bb_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.or_bb_make(vlen)

class or_ss(object):
    """Proxy of C++ gr::blocks::or_ss class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.or_ss_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> or_ss"""
        this = _blocks_swig.new_or_ss()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_or_ss
    __del__ = lambda self : None;
or_ss_swigregister = _blocks_swig.or_ss_swigregister
or_ss_swigregister(or_ss)

def or_ss_make(vlen = 1):
  """or_ss_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.or_ss_make(vlen)

class or_ii(object):
    """Proxy of C++ gr::blocks::or_ii class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.or_ii_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> or_ii"""
        this = _blocks_swig.new_or_ii()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_or_ii
    __del__ = lambda self : None;
or_ii_swigregister = _blocks_swig.or_ii_swigregister
or_ii_swigregister(or_ii)

def or_ii_make(vlen = 1):
  """or_ii_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.or_ii_make(vlen)

class regenerate_bb(object):
    """Proxy of C++ gr::blocks::regenerate_bb class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int period, unsigned int max_regen = 500) -> sptr"""
        return _blocks_swig.regenerate_bb_make(*args, **kwargs)

    make = staticmethod(make)
    def set_max_regen(self, *args, **kwargs):
        """set_max_regen(self, unsigned int regen)"""
        return _blocks_swig.regenerate_bb_set_max_regen(self, *args, **kwargs)

    def set_period(self, *args, **kwargs):
        """set_period(self, int period)"""
        return _blocks_swig.regenerate_bb_set_period(self, *args, **kwargs)

    def max_regen(self):
        """max_regen(self) -> unsigned int"""
        return _blocks_swig.regenerate_bb_max_regen(self)

    def period(self):
        """period(self) -> int"""
        return _blocks_swig.regenerate_bb_period(self)

    __swig_destroy__ = _blocks_swig.delete_regenerate_bb
    __del__ = lambda self : None;
regenerate_bb_swigregister = _blocks_swig.regenerate_bb_swigregister
regenerate_bb_swigregister(regenerate_bb)

def regenerate_bb_make(*args, **kwargs):
  """regenerate_bb_make(int period, unsigned int max_regen = 500) -> sptr"""
  return _blocks_swig.regenerate_bb_make(*args, **kwargs)

class repeat(object):
    """Proxy of C++ gr::blocks::repeat class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(size_t itemsize, int repeat) -> sptr"""
        return _blocks_swig.repeat_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> repeat"""
        this = _blocks_swig.new_repeat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_repeat
    __del__ = lambda self : None;
repeat_swigregister = _blocks_swig.repeat_swigregister
repeat_swigregister(repeat)

def repeat_make(*args, **kwargs):
  """repeat_make(size_t itemsize, int repeat) -> sptr"""
  return _blocks_swig.repeat_make(*args, **kwargs)

class rms_cf(object):
    """Proxy of C++ gr::blocks::rms_cf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(alpha = 0.0001):
        """make(double alpha = 0.0001) -> sptr"""
        return _blocks_swig.rms_cf_make(alpha)

    make = staticmethod(make)
    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _blocks_swig.rms_cf_set_alpha(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_rms_cf
    __del__ = lambda self : None;
rms_cf_swigregister = _blocks_swig.rms_cf_swigregister
rms_cf_swigregister(rms_cf)

def rms_cf_make(alpha = 0.0001):
  """rms_cf_make(double alpha = 0.0001) -> sptr"""
  return _blocks_swig.rms_cf_make(alpha)

class rms_ff(object):
    """Proxy of C++ gr::blocks::rms_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(alpha = 0.0001):
        """make(double alpha = 0.0001) -> sptr"""
        return _blocks_swig.rms_ff_make(alpha)

    make = staticmethod(make)
    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _blocks_swig.rms_ff_set_alpha(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_rms_ff
    __del__ = lambda self : None;
rms_ff_swigregister = _blocks_swig.rms_ff_swigregister
rms_ff_swigregister(rms_ff)

def rms_ff_make(alpha = 0.0001):
  """rms_ff_make(double alpha = 0.0001) -> sptr"""
  return _blocks_swig.rms_ff_make(alpha)

class short_to_char(object):
    """Proxy of C++ gr::blocks::short_to_char class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.short_to_char_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> short_to_char"""
        this = _blocks_swig.new_short_to_char()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_short_to_char
    __del__ = lambda self : None;
short_to_char_swigregister = _blocks_swig.short_to_char_swigregister
short_to_char_swigregister(short_to_char)

def short_to_char_make(vlen = 1):
  """short_to_char_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.short_to_char_make(vlen)

class short_to_float(object):
    """Proxy of C++ gr::blocks::short_to_float class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(vlen = 1, scale = 1.0):
        """make(size_t vlen = 1, float scale = 1.0) -> sptr"""
        return _blocks_swig.short_to_float_make(vlen, scale)

    make = staticmethod(make)
    def scale(self):
        """scale(self) -> float"""
        return _blocks_swig.short_to_float_scale(self)

    def set_scale(self, *args, **kwargs):
        """set_scale(self, float scale)"""
        return _blocks_swig.short_to_float_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_short_to_float
    __del__ = lambda self : None;
short_to_float_swigregister = _blocks_swig.short_to_float_swigregister
short_to_float_swigregister(short_to_float)

def short_to_float_make(vlen = 1, scale = 1.0):
  """short_to_float_make(size_t vlen = 1, float scale = 1.0) -> sptr"""
  return _blocks_swig.short_to_float_make(vlen, scale)

class stream_mux(object):
    """Proxy of C++ gr::blocks::stream_mux class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(size_t itemsize, std::vector<(int,std::allocator<(int)>)> lengths) -> sptr"""
        return _blocks_swig.stream_mux_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> stream_mux"""
        this = _blocks_swig.new_stream_mux()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_stream_mux
    __del__ = lambda self : None;
stream_mux_swigregister = _blocks_swig.stream_mux_swigregister
stream_mux_swigregister(stream_mux)

def stream_mux_make(*args, **kwargs):
  """stream_mux_make(size_t itemsize, std::vector<(int,std::allocator<(int)>)> lengths) -> sptr"""
  return _blocks_swig.stream_mux_make(*args, **kwargs)

class stream_to_streams(object):
    """Proxy of C++ gr::blocks::stream_to_streams class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(size_t itemsize, size_t nstreams) -> sptr"""
        return _blocks_swig.stream_to_streams_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> stream_to_streams"""
        this = _blocks_swig.new_stream_to_streams()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_stream_to_streams
    __del__ = lambda self : None;
stream_to_streams_swigregister = _blocks_swig.stream_to_streams_swigregister
stream_to_streams_swigregister(stream_to_streams)

def stream_to_streams_make(*args, **kwargs):
  """stream_to_streams_make(size_t itemsize, size_t nstreams) -> sptr"""
  return _blocks_swig.stream_to_streams_make(*args, **kwargs)

class stream_to_vector(object):
    """Proxy of C++ gr::blocks::stream_to_vector class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(size_t itemsize, size_t nitems_per_block) -> sptr"""
        return _blocks_swig.stream_to_vector_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> stream_to_vector"""
        this = _blocks_swig.new_stream_to_vector()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_stream_to_vector
    __del__ = lambda self : None;
stream_to_vector_swigregister = _blocks_swig.stream_to_vector_swigregister
stream_to_vector_swigregister(stream_to_vector)

def stream_to_vector_make(*args, **kwargs):
  """stream_to_vector_make(size_t itemsize, size_t nitems_per_block) -> sptr"""
  return _blocks_swig.stream_to_vector_make(*args, **kwargs)

class streams_to_stream(object):
    """Proxy of C++ gr::blocks::streams_to_stream class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(size_t itemsize, size_t nstreams) -> sptr"""
        return _blocks_swig.streams_to_stream_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> streams_to_stream"""
        this = _blocks_swig.new_streams_to_stream()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_streams_to_stream
    __del__ = lambda self : None;
streams_to_stream_swigregister = _blocks_swig.streams_to_stream_swigregister
streams_to_stream_swigregister(streams_to_stream)

def streams_to_stream_make(*args, **kwargs):
  """streams_to_stream_make(size_t itemsize, size_t nstreams) -> sptr"""
  return _blocks_swig.streams_to_stream_make(*args, **kwargs)

class streams_to_vector(object):
    """Proxy of C++ gr::blocks::streams_to_vector class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(size_t itemsize, size_t nstreams) -> sptr"""
        return _blocks_swig.streams_to_vector_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> streams_to_vector"""
        this = _blocks_swig.new_streams_to_vector()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_streams_to_vector
    __del__ = lambda self : None;
streams_to_vector_swigregister = _blocks_swig.streams_to_vector_swigregister
streams_to_vector_swigregister(streams_to_vector)

def streams_to_vector_make(*args, **kwargs):
  """streams_to_vector_make(size_t itemsize, size_t nstreams) -> sptr"""
  return _blocks_swig.streams_to_vector_make(*args, **kwargs)

class stretch_ff(object):
    """Proxy of C++ gr::blocks::stretch_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(float lo, size_t vlen = 1) -> sptr"""
        return _blocks_swig.stretch_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def lo(self):
        """lo(self) -> float"""
        return _blocks_swig.stretch_ff_lo(self)

    def set_lo(self, *args, **kwargs):
        """set_lo(self, float lo)"""
        return _blocks_swig.stretch_ff_set_lo(self, *args, **kwargs)

    def vlen(self):
        """vlen(self) -> size_t"""
        return _blocks_swig.stretch_ff_vlen(self)

    __swig_destroy__ = _blocks_swig.delete_stretch_ff
    __del__ = lambda self : None;
stretch_ff_swigregister = _blocks_swig.stretch_ff_swigregister
stretch_ff_swigregister(stretch_ff)

def stretch_ff_make(*args, **kwargs):
  """stretch_ff_make(float lo, size_t vlen = 1) -> sptr"""
  return _blocks_swig.stretch_ff_make(*args, **kwargs)

class sub_ff(object):
    """Proxy of C++ gr::blocks::sub_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.sub_ff_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> sub_ff"""
        this = _blocks_swig.new_sub_ff()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_sub_ff
    __del__ = lambda self : None;
sub_ff_swigregister = _blocks_swig.sub_ff_swigregister
sub_ff_swigregister(sub_ff)

def sub_ff_make(vlen = 1):
  """sub_ff_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.sub_ff_make(vlen)

class sub_ss(object):
    """Proxy of C++ gr::blocks::sub_ss class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.sub_ss_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> sub_ss"""
        this = _blocks_swig.new_sub_ss()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_sub_ss
    __del__ = lambda self : None;
sub_ss_swigregister = _blocks_swig.sub_ss_swigregister
sub_ss_swigregister(sub_ss)

def sub_ss_make(vlen = 1):
  """sub_ss_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.sub_ss_make(vlen)

class sub_ii(object):
    """Proxy of C++ gr::blocks::sub_ii class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.sub_ii_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> sub_ii"""
        this = _blocks_swig.new_sub_ii()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_sub_ii
    __del__ = lambda self : None;
sub_ii_swigregister = _blocks_swig.sub_ii_swigregister
sub_ii_swigregister(sub_ii)

def sub_ii_make(vlen = 1):
  """sub_ii_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.sub_ii_make(vlen)

class sub_cc(object):
    """Proxy of C++ gr::blocks::sub_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.sub_cc_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> sub_cc"""
        this = _blocks_swig.new_sub_cc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_sub_cc
    __del__ = lambda self : None;
sub_cc_swigregister = _blocks_swig.sub_cc_swigregister
sub_cc_swigregister(sub_cc)

def sub_cc_make(vlen = 1):
  """sub_cc_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.sub_cc_make(vlen)

class threshold_ff(object):
    """Proxy of C++ gr::blocks::threshold_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(float lo, float hi, float initial_state = 0) -> sptr"""
        return _blocks_swig.threshold_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def lo(self):
        """lo(self) -> float"""
        return _blocks_swig.threshold_ff_lo(self)

    def set_lo(self, *args, **kwargs):
        """set_lo(self, float lo)"""
        return _blocks_swig.threshold_ff_set_lo(self, *args, **kwargs)

    def hi(self):
        """hi(self) -> float"""
        return _blocks_swig.threshold_ff_hi(self)

    def set_hi(self, *args, **kwargs):
        """set_hi(self, float hi)"""
        return _blocks_swig.threshold_ff_set_hi(self, *args, **kwargs)

    def last_state(self):
        """last_state(self) -> float"""
        return _blocks_swig.threshold_ff_last_state(self)

    def set_last_state(self, *args, **kwargs):
        """set_last_state(self, float last_state)"""
        return _blocks_swig.threshold_ff_set_last_state(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig.delete_threshold_ff
    __del__ = lambda self : None;
threshold_ff_swigregister = _blocks_swig.threshold_ff_swigregister
threshold_ff_swigregister(threshold_ff)

def threshold_ff_make(*args, **kwargs):
  """threshold_ff_make(float lo, float hi, float initial_state = 0) -> sptr"""
  return _blocks_swig.threshold_ff_make(*args, **kwargs)

class throttle(object):
    """Proxy of C++ gr::blocks::throttle class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(size_t itemsize, double samples_per_sec) -> sptr"""
        return _blocks_swig.throttle_make(*args, **kwargs)

    make = staticmethod(make)
    def set_sample_rate(self, *args, **kwargs):
        """set_sample_rate(self, double rate)"""
        return _blocks_swig.throttle_set_sample_rate(self, *args, **kwargs)

    def sample_rate(self):
        """sample_rate(self) -> double"""
        return _blocks_swig.throttle_sample_rate(self)

    __swig_destroy__ = _blocks_swig.delete_throttle
    __del__ = lambda self : None;
throttle_swigregister = _blocks_swig.throttle_swigregister
throttle_swigregister(throttle)

def throttle_make(*args, **kwargs):
  """throttle_make(size_t itemsize, double samples_per_sec) -> sptr"""
  return _blocks_swig.throttle_make(*args, **kwargs)

class transcendental(object):
    """Proxy of C++ gr::blocks::transcendental class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(string name, string type = "float") -> sptr"""
        return _blocks_swig.transcendental_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> transcendental"""
        this = _blocks_swig.new_transcendental()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_transcendental
    __del__ = lambda self : None;
transcendental_swigregister = _blocks_swig.transcendental_swigregister
transcendental_swigregister(transcendental)

def transcendental_make(*args, **kwargs):
  """transcendental_make(string name, string type = "float") -> sptr"""
  return _blocks_swig.transcendental_make(*args, **kwargs)

class uchar_to_float(object):
    """Proxy of C++ gr::blocks::uchar_to_float class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make():
        """make() -> sptr"""
        return _blocks_swig.uchar_to_float_make()

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> uchar_to_float"""
        this = _blocks_swig.new_uchar_to_float()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_uchar_to_float
    __del__ = lambda self : None;
uchar_to_float_swigregister = _blocks_swig.uchar_to_float_swigregister
uchar_to_float_swigregister(uchar_to_float)

def uchar_to_float_make():
  """uchar_to_float_make() -> sptr"""
  return _blocks_swig.uchar_to_float_make()

class unpacked_to_packed_bb(object):
    """Proxy of C++ gr::blocks::unpacked_to_packed_bb class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(unsigned int bits_per_chunk, gr_endianness_t endianness) -> sptr"""
        return _blocks_swig.unpacked_to_packed_bb_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> unpacked_to_packed_bb"""
        this = _blocks_swig.new_unpacked_to_packed_bb()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_unpacked_to_packed_bb
    __del__ = lambda self : None;
unpacked_to_packed_bb_swigregister = _blocks_swig.unpacked_to_packed_bb_swigregister
unpacked_to_packed_bb_swigregister(unpacked_to_packed_bb)

def unpacked_to_packed_bb_make(*args, **kwargs):
  """unpacked_to_packed_bb_make(unsigned int bits_per_chunk, gr_endianness_t endianness) -> sptr"""
  return _blocks_swig.unpacked_to_packed_bb_make(*args, **kwargs)

class unpacked_to_packed_ss(object):
    """Proxy of C++ gr::blocks::unpacked_to_packed_ss class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(unsigned int bits_per_chunk, gr_endianness_t endianness) -> sptr"""
        return _blocks_swig.unpacked_to_packed_ss_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> unpacked_to_packed_ss"""
        this = _blocks_swig.new_unpacked_to_packed_ss()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_unpacked_to_packed_ss
    __del__ = lambda self : None;
unpacked_to_packed_ss_swigregister = _blocks_swig.unpacked_to_packed_ss_swigregister
unpacked_to_packed_ss_swigregister(unpacked_to_packed_ss)

def unpacked_to_packed_ss_make(*args, **kwargs):
  """unpacked_to_packed_ss_make(unsigned int bits_per_chunk, gr_endianness_t endianness) -> sptr"""
  return _blocks_swig.unpacked_to_packed_ss_make(*args, **kwargs)

class unpacked_to_packed_ii(object):
    """Proxy of C++ gr::blocks::unpacked_to_packed_ii class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(unsigned int bits_per_chunk, gr_endianness_t endianness) -> sptr"""
        return _blocks_swig.unpacked_to_packed_ii_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> unpacked_to_packed_ii"""
        this = _blocks_swig.new_unpacked_to_packed_ii()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_unpacked_to_packed_ii
    __del__ = lambda self : None;
unpacked_to_packed_ii_swigregister = _blocks_swig.unpacked_to_packed_ii_swigregister
unpacked_to_packed_ii_swigregister(unpacked_to_packed_ii)

def unpacked_to_packed_ii_make(*args, **kwargs):
  """unpacked_to_packed_ii_make(unsigned int bits_per_chunk, gr_endianness_t endianness) -> sptr"""
  return _blocks_swig.unpacked_to_packed_ii_make(*args, **kwargs)

class vector_to_stream(object):
    """Proxy of C++ gr::blocks::vector_to_stream class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(size_t itemsize, size_t nitems_per_block) -> sptr"""
        return _blocks_swig.vector_to_stream_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> vector_to_stream"""
        this = _blocks_swig.new_vector_to_stream()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_vector_to_stream
    __del__ = lambda self : None;
vector_to_stream_swigregister = _blocks_swig.vector_to_stream_swigregister
vector_to_stream_swigregister(vector_to_stream)

def vector_to_stream_make(*args, **kwargs):
  """vector_to_stream_make(size_t itemsize, size_t nitems_per_block) -> sptr"""
  return _blocks_swig.vector_to_stream_make(*args, **kwargs)

class vector_to_streams(object):
    """Proxy of C++ gr::blocks::vector_to_streams class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(size_t itemsize, size_t nstreams) -> sptr"""
        return _blocks_swig.vector_to_streams_make(*args, **kwargs)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> vector_to_streams"""
        this = _blocks_swig.new_vector_to_streams()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_vector_to_streams
    __del__ = lambda self : None;
vector_to_streams_swigregister = _blocks_swig.vector_to_streams_swigregister
vector_to_streams_swigregister(vector_to_streams)

def vector_to_streams_make(*args, **kwargs):
  """vector_to_streams_make(size_t itemsize, size_t nstreams) -> sptr"""
  return _blocks_swig.vector_to_streams_make(*args, **kwargs)

class xor_bb(object):
    """Proxy of C++ gr::blocks::xor_bb class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.xor_bb_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> xor_bb"""
        this = _blocks_swig.new_xor_bb()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_xor_bb
    __del__ = lambda self : None;
xor_bb_swigregister = _blocks_swig.xor_bb_swigregister
xor_bb_swigregister(xor_bb)

def xor_bb_make(vlen = 1):
  """xor_bb_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.xor_bb_make(vlen)

class xor_ss(object):
    """Proxy of C++ gr::blocks::xor_ss class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.xor_ss_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> xor_ss"""
        this = _blocks_swig.new_xor_ss()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_xor_ss
    __del__ = lambda self : None;
xor_ss_swigregister = _blocks_swig.xor_ss_swigregister
xor_ss_swigregister(xor_ss)

def xor_ss_make(vlen = 1):
  """xor_ss_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.xor_ss_make(vlen)

class xor_ii(object):
    """Proxy of C++ gr::blocks::xor_ii class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make(vlen = 1):
        """make(size_t vlen = 1) -> sptr"""
        return _blocks_swig.xor_ii_make(vlen)

    make = staticmethod(make)
    def __init__(self): 
        """__init__(self) -> xor_ii"""
        this = _blocks_swig.new_xor_ii()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blocks_swig.delete_xor_ii
    __del__ = lambda self : None;
xor_ii_swigregister = _blocks_swig.xor_ii_swigregister
xor_ii_swigregister(xor_ii)

def xor_ii_make(vlen = 1):
  """xor_ii_make(size_t vlen = 1) -> sptr"""
  return _blocks_swig.xor_ii_make(vlen)

class add_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> add_ff_sptr
        __init__(self, add_ff p) -> add_ff_sptr
        """
        this = _blocks_swig.new_add_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> add_ff"""
        return _blocks_swig.add_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_add_ff_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.add_ff_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_ff_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.add_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.add_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.add_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.add_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.add_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.add_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.add_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.add_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.add_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.add_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.add_ff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.add_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.add_ff_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.add_ff_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.add_ff_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.add_ff_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.add_ff_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.add_ff_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.add_ff_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.add_ff_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.add_ff_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.add_ff_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.add_ff_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.add_ff_sptr__handle_call(self, *args, **kwargs)

add_ff_sptr_swigregister = _blocks_swig.add_ff_sptr_swigregister
add_ff_sptr_swigregister(add_ff_sptr)

add_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_ff = add_ff.make;

class add_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> add_ss_sptr
        __init__(self, add_ss p) -> add_ss_sptr
        """
        this = _blocks_swig.new_add_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> add_ss"""
        return _blocks_swig.add_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_add_ss_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.add_ss_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_ss_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.add_ss_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.add_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.add_ss_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.add_ss_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.add_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.add_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.add_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.add_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.add_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.add_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.add_ss_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.add_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.add_ss_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.add_ss_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.add_ss_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.add_ss_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.add_ss_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.add_ss_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.add_ss_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.add_ss_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.add_ss_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.add_ss_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.add_ss_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.add_ss_sptr__handle_call(self, *args, **kwargs)

add_ss_sptr_swigregister = _blocks_swig.add_ss_sptr_swigregister
add_ss_sptr_swigregister(add_ss_sptr)

add_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_ss = add_ss.make;

class add_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> add_ii_sptr
        __init__(self, add_ii p) -> add_ii_sptr
        """
        this = _blocks_swig.new_add_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> add_ii"""
        return _blocks_swig.add_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_add_ii_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.add_ii_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_ii_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.add_ii_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.add_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.add_ii_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.add_ii_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.add_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.add_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.add_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.add_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.add_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.add_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.add_ii_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.add_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.add_ii_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.add_ii_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.add_ii_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.add_ii_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.add_ii_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.add_ii_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.add_ii_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.add_ii_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.add_ii_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.add_ii_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.add_ii_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.add_ii_sptr__handle_call(self, *args, **kwargs)

add_ii_sptr_swigregister = _blocks_swig.add_ii_sptr_swigregister
add_ii_sptr_swigregister(add_ii_sptr)

add_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_ii = add_ii.make;

class add_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> add_cc_sptr
        __init__(self, add_cc p) -> add_cc_sptr
        """
        this = _blocks_swig.new_add_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> add_cc"""
        return _blocks_swig.add_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_add_cc_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.add_cc_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_cc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.add_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.add_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.add_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.add_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.add_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.add_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.add_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.add_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.add_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.add_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.add_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.add_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.add_cc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.add_cc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.add_cc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.add_cc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.add_cc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.add_cc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.add_cc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.add_cc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.add_cc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.add_cc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.add_cc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.add_cc_sptr__handle_call(self, *args, **kwargs)

add_cc_sptr_swigregister = _blocks_swig.add_cc_sptr_swigregister
add_cc_sptr_swigregister(add_cc_sptr)

add_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_cc = add_cc.make;

class add_const_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> add_const_ff_sptr
        __init__(self, add_const_ff p) -> add_const_ff_sptr
        """
        this = _blocks_swig.new_add_const_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> add_const_ff"""
        return _blocks_swig.add_const_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_add_const_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, float k) -> sptr"""
        return _blocks_swig.add_const_ff_sptr_make(self, *args, **kwargs)

    def k(self):
        """k(self) -> float"""
        return _blocks_swig.add_const_ff_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, float k)"""
        return _blocks_swig.add_const_ff_sptr_set_k(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_const_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_const_ff_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.add_const_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.add_const_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.add_const_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.add_const_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.add_const_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.add_const_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.add_const_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.add_const_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.add_const_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.add_const_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.add_const_ff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_const_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.add_const_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_const_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.add_const_ff_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.add_const_ff_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.add_const_ff_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.add_const_ff_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.add_const_ff_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.add_const_ff_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.add_const_ff_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.add_const_ff_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.add_const_ff_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.add_const_ff_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.add_const_ff_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.add_const_ff_sptr__handle_call(self, *args, **kwargs)

add_const_ff_sptr_swigregister = _blocks_swig.add_const_ff_sptr_swigregister
add_const_ff_sptr_swigregister(add_const_ff_sptr)

add_const_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_ff = add_const_ff.make;

class add_const_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> add_const_ss_sptr
        __init__(self, add_const_ss p) -> add_const_ss_sptr
        """
        this = _blocks_swig.new_add_const_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> add_const_ss"""
        return _blocks_swig.add_const_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_add_const_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, short k) -> sptr"""
        return _blocks_swig.add_const_ss_sptr_make(self, *args, **kwargs)

    def k(self):
        """k(self) -> short"""
        return _blocks_swig.add_const_ss_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, short k)"""
        return _blocks_swig.add_const_ss_sptr_set_k(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_const_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_const_ss_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.add_const_ss_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.add_const_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.add_const_ss_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.add_const_ss_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.add_const_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.add_const_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.add_const_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.add_const_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.add_const_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.add_const_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.add_const_ss_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_const_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.add_const_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_const_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.add_const_ss_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.add_const_ss_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.add_const_ss_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.add_const_ss_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.add_const_ss_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.add_const_ss_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.add_const_ss_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.add_const_ss_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.add_const_ss_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.add_const_ss_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.add_const_ss_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.add_const_ss_sptr__handle_call(self, *args, **kwargs)

add_const_ss_sptr_swigregister = _blocks_swig.add_const_ss_sptr_swigregister
add_const_ss_sptr_swigregister(add_const_ss_sptr)

add_const_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_ss = add_const_ss.make;

class add_const_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> add_const_ii_sptr
        __init__(self, add_const_ii p) -> add_const_ii_sptr
        """
        this = _blocks_swig.new_add_const_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> add_const_ii"""
        return _blocks_swig.add_const_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_add_const_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, int k) -> sptr"""
        return _blocks_swig.add_const_ii_sptr_make(self, *args, **kwargs)

    def k(self):
        """k(self) -> int"""
        return _blocks_swig.add_const_ii_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, int k)"""
        return _blocks_swig.add_const_ii_sptr_set_k(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_const_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_const_ii_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.add_const_ii_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.add_const_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.add_const_ii_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.add_const_ii_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.add_const_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.add_const_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.add_const_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.add_const_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.add_const_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.add_const_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.add_const_ii_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_const_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.add_const_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_const_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.add_const_ii_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.add_const_ii_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.add_const_ii_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.add_const_ii_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.add_const_ii_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.add_const_ii_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.add_const_ii_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.add_const_ii_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.add_const_ii_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.add_const_ii_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.add_const_ii_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.add_const_ii_sptr__handle_call(self, *args, **kwargs)

add_const_ii_sptr_swigregister = _blocks_swig.add_const_ii_sptr_swigregister
add_const_ii_sptr_swigregister(add_const_ii_sptr)

add_const_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_ii = add_const_ii.make;

class add_const_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> add_const_cc_sptr
        __init__(self, add_const_cc p) -> add_const_cc_sptr
        """
        this = _blocks_swig.new_add_const_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> add_const_cc"""
        return _blocks_swig.add_const_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_add_const_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, gr_complex k) -> sptr"""
        return _blocks_swig.add_const_cc_sptr_make(self, *args, **kwargs)

    def k(self):
        """k(self) -> gr_complex"""
        return _blocks_swig.add_const_cc_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, gr_complex k)"""
        return _blocks_swig.add_const_cc_sptr_set_k(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_const_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_const_cc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.add_const_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.add_const_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.add_const_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.add_const_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.add_const_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.add_const_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.add_const_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.add_const_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.add_const_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.add_const_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.add_const_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_const_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.add_const_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_const_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.add_const_cc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.add_const_cc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.add_const_cc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.add_const_cc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.add_const_cc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.add_const_cc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.add_const_cc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.add_const_cc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.add_const_cc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.add_const_cc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.add_const_cc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.add_const_cc_sptr__handle_call(self, *args, **kwargs)

add_const_cc_sptr_swigregister = _blocks_swig.add_const_cc_sptr_swigregister
add_const_cc_sptr_swigregister(add_const_cc_sptr)

add_const_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_cc = add_const_cc.make;

class add_const_vff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_vff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> add_const_vff_sptr
        __init__(self, add_const_vff p) -> add_const_vff_sptr
        """
        this = _blocks_swig.new_add_const_vff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> add_const_vff"""
        return _blocks_swig.add_const_vff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_add_const_vff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, std::vector<(float,std::allocator<(float)>)> k) -> sptr"""
        return _blocks_swig.add_const_vff_sptr_make(self, *args, **kwargs)

    def k(self):
        """k(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _blocks_swig.add_const_vff_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, std::vector<(float,std::allocator<(float)>)> k)"""
        return _blocks_swig.add_const_vff_sptr_set_k(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_const_vff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_const_vff_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.add_const_vff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.add_const_vff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.add_const_vff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.add_const_vff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.add_const_vff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.add_const_vff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.add_const_vff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.add_const_vff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.add_const_vff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.add_const_vff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.add_const_vff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_const_vff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.add_const_vff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_const_vff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.add_const_vff_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.add_const_vff_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.add_const_vff_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.add_const_vff_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.add_const_vff_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.add_const_vff_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.add_const_vff_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.add_const_vff_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.add_const_vff_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.add_const_vff_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.add_const_vff_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.add_const_vff_sptr__handle_call(self, *args, **kwargs)

add_const_vff_sptr_swigregister = _blocks_swig.add_const_vff_sptr_swigregister
add_const_vff_sptr_swigregister(add_const_vff_sptr)

add_const_vff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_vff = add_const_vff.make;

class add_const_vss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_vss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> add_const_vss_sptr
        __init__(self, add_const_vss p) -> add_const_vss_sptr
        """
        this = _blocks_swig.new_add_const_vss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> add_const_vss"""
        return _blocks_swig.add_const_vss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_add_const_vss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, __dummy_2__ k) -> sptr"""
        return _blocks_swig.add_const_vss_sptr_make(self, *args, **kwargs)

    def k(self):
        """k(self) -> __dummy_2__"""
        return _blocks_swig.add_const_vss_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, __dummy_2__ k)"""
        return _blocks_swig.add_const_vss_sptr_set_k(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_const_vss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_const_vss_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.add_const_vss_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.add_const_vss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.add_const_vss_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.add_const_vss_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.add_const_vss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.add_const_vss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.add_const_vss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.add_const_vss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.add_const_vss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.add_const_vss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.add_const_vss_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_const_vss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.add_const_vss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_const_vss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.add_const_vss_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.add_const_vss_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.add_const_vss_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.add_const_vss_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.add_const_vss_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.add_const_vss_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.add_const_vss_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.add_const_vss_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.add_const_vss_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.add_const_vss_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.add_const_vss_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.add_const_vss_sptr__handle_call(self, *args, **kwargs)

add_const_vss_sptr_swigregister = _blocks_swig.add_const_vss_sptr_swigregister
add_const_vss_sptr_swigregister(add_const_vss_sptr)

add_const_vss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_vss = add_const_vss.make;

class add_const_vii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_vii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> add_const_vii_sptr
        __init__(self, add_const_vii p) -> add_const_vii_sptr
        """
        this = _blocks_swig.new_add_const_vii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> add_const_vii"""
        return _blocks_swig.add_const_vii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_add_const_vii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, std::vector<(int,std::allocator<(int)>)> k) -> sptr"""
        return _blocks_swig.add_const_vii_sptr_make(self, *args, **kwargs)

    def k(self):
        """k(self) -> std::vector<(int,std::allocator<(int)>)>"""
        return _blocks_swig.add_const_vii_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, std::vector<(int,std::allocator<(int)>)> k)"""
        return _blocks_swig.add_const_vii_sptr_set_k(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_const_vii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_const_vii_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.add_const_vii_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.add_const_vii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.add_const_vii_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.add_const_vii_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.add_const_vii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.add_const_vii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.add_const_vii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.add_const_vii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.add_const_vii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.add_const_vii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.add_const_vii_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_const_vii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.add_const_vii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_const_vii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.add_const_vii_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.add_const_vii_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.add_const_vii_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.add_const_vii_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.add_const_vii_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.add_const_vii_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.add_const_vii_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.add_const_vii_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.add_const_vii_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.add_const_vii_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.add_const_vii_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.add_const_vii_sptr__handle_call(self, *args, **kwargs)

add_const_vii_sptr_swigregister = _blocks_swig.add_const_vii_sptr_swigregister
add_const_vii_sptr_swigregister(add_const_vii_sptr)

add_const_vii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_vii = add_const_vii.make;

class add_const_vcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_vcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> add_const_vcc_sptr
        __init__(self, add_const_vcc p) -> add_const_vcc_sptr
        """
        this = _blocks_swig.new_add_const_vcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> add_const_vcc"""
        return _blocks_swig.add_const_vcc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_add_const_vcc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> k) -> sptr"""
        return _blocks_swig.add_const_vcc_sptr_make(self, *args, **kwargs)

    def k(self):
        """k(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _blocks_swig.add_const_vcc_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> k)"""
        return _blocks_swig.add_const_vcc_sptr_set_k(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_const_vcc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.add_const_vcc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.add_const_vcc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.add_const_vcc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.add_const_vcc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.add_const_vcc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.add_const_vcc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.add_const_vcc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.add_const_vcc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.add_const_vcc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.add_const_vcc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.add_const_vcc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.add_const_vcc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_const_vcc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.add_const_vcc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.add_const_vcc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.add_const_vcc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.add_const_vcc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.add_const_vcc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.add_const_vcc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.add_const_vcc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.add_const_vcc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.add_const_vcc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.add_const_vcc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.add_const_vcc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.add_const_vcc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.add_const_vcc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.add_const_vcc_sptr__handle_call(self, *args, **kwargs)

add_const_vcc_sptr_swigregister = _blocks_swig.add_const_vcc_sptr_swigregister
add_const_vcc_sptr_swigregister(add_const_vcc_sptr)

add_const_vcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_vcc = add_const_vcc.make;

class and_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::and_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> and_bb_sptr
        __init__(self, and_bb p) -> and_bb_sptr
        """
        this = _blocks_swig.new_and_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> and_bb"""
        return _blocks_swig.and_bb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_and_bb_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.and_bb_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.and_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.and_bb_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.and_bb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.and_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.and_bb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.and_bb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.and_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.and_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.and_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.and_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.and_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.and_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.and_bb_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.and_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.and_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.and_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.and_bb_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.and_bb_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.and_bb_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.and_bb_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.and_bb_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.and_bb_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.and_bb_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.and_bb_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.and_bb_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.and_bb_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.and_bb_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.and_bb_sptr__handle_call(self, *args, **kwargs)

and_bb_sptr_swigregister = _blocks_swig.and_bb_sptr_swigregister
and_bb_sptr_swigregister(and_bb_sptr)

and_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
and_bb = and_bb.make;

class and_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::and_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> and_ss_sptr
        __init__(self, and_ss p) -> and_ss_sptr
        """
        this = _blocks_swig.new_and_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> and_ss"""
        return _blocks_swig.and_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_and_ss_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.and_ss_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.and_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.and_ss_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.and_ss_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.and_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.and_ss_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.and_ss_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.and_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.and_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.and_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.and_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.and_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.and_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.and_ss_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.and_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.and_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.and_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.and_ss_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.and_ss_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.and_ss_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.and_ss_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.and_ss_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.and_ss_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.and_ss_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.and_ss_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.and_ss_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.and_ss_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.and_ss_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.and_ss_sptr__handle_call(self, *args, **kwargs)

and_ss_sptr_swigregister = _blocks_swig.and_ss_sptr_swigregister
and_ss_sptr_swigregister(and_ss_sptr)

and_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
and_ss = and_ss.make;

class and_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::and_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> and_ii_sptr
        __init__(self, and_ii p) -> and_ii_sptr
        """
        this = _blocks_swig.new_and_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> and_ii"""
        return _blocks_swig.and_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_and_ii_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.and_ii_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.and_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.and_ii_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.and_ii_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.and_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.and_ii_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.and_ii_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.and_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.and_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.and_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.and_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.and_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.and_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.and_ii_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.and_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.and_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.and_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.and_ii_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.and_ii_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.and_ii_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.and_ii_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.and_ii_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.and_ii_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.and_ii_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.and_ii_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.and_ii_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.and_ii_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.and_ii_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.and_ii_sptr__handle_call(self, *args, **kwargs)

and_ii_sptr_swigregister = _blocks_swig.and_ii_sptr_swigregister
and_ii_sptr_swigregister(and_ii_sptr)

and_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
and_ii = and_ii.make;

class and_const_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::and_const_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> and_const_bb_sptr
        __init__(self, and_const_bb p) -> and_const_bb_sptr
        """
        this = _blocks_swig.new_and_const_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> and_const_bb"""
        return _blocks_swig.and_const_bb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_and_const_bb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, unsigned char k) -> sptr"""
        return _blocks_swig.and_const_bb_sptr_make(self, *args, **kwargs)

    def k(self):
        """k(self) -> unsigned char"""
        return _blocks_swig.and_const_bb_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, unsigned char k)"""
        return _blocks_swig.and_const_bb_sptr_set_k(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.and_const_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.and_const_bb_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.and_const_bb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.and_const_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.and_const_bb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.and_const_bb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.and_const_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.and_const_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.and_const_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.and_const_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.and_const_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.and_const_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.and_const_bb_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.and_const_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.and_const_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.and_const_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.and_const_bb_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.and_const_bb_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.and_const_bb_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.and_const_bb_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.and_const_bb_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.and_const_bb_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.and_const_bb_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.and_const_bb_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.and_const_bb_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.and_const_bb_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.and_const_bb_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.and_const_bb_sptr__handle_call(self, *args, **kwargs)

and_const_bb_sptr_swigregister = _blocks_swig.and_const_bb_sptr_swigregister
and_const_bb_sptr_swigregister(and_const_bb_sptr)

and_const_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
and_const_bb = and_const_bb.make;

class and_const_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::and_const_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> and_const_ss_sptr
        __init__(self, and_const_ss p) -> and_const_ss_sptr
        """
        this = _blocks_swig.new_and_const_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> and_const_ss"""
        return _blocks_swig.and_const_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_and_const_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, short k) -> sptr"""
        return _blocks_swig.and_const_ss_sptr_make(self, *args, **kwargs)

    def k(self):
        """k(self) -> short"""
        return _blocks_swig.and_const_ss_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, short k)"""
        return _blocks_swig.and_const_ss_sptr_set_k(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.and_const_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.and_const_ss_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.and_const_ss_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.and_const_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.and_const_ss_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.and_const_ss_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.and_const_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.and_const_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.and_const_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.and_const_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.and_const_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.and_const_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.and_const_ss_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.and_const_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.and_const_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.and_const_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.and_const_ss_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.and_const_ss_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.and_const_ss_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.and_const_ss_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.and_const_ss_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.and_const_ss_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.and_const_ss_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.and_const_ss_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.and_const_ss_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.and_const_ss_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.and_const_ss_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.and_const_ss_sptr__handle_call(self, *args, **kwargs)

and_const_ss_sptr_swigregister = _blocks_swig.and_const_ss_sptr_swigregister
and_const_ss_sptr_swigregister(and_const_ss_sptr)

and_const_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
and_const_ss = and_const_ss.make;

class and_const_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::and_const_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> and_const_ii_sptr
        __init__(self, and_const_ii p) -> and_const_ii_sptr
        """
        this = _blocks_swig.new_and_const_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> and_const_ii"""
        return _blocks_swig.and_const_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_and_const_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, int k) -> sptr"""
        return _blocks_swig.and_const_ii_sptr_make(self, *args, **kwargs)

    def k(self):
        """k(self) -> int"""
        return _blocks_swig.and_const_ii_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, int k)"""
        return _blocks_swig.and_const_ii_sptr_set_k(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.and_const_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.and_const_ii_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.and_const_ii_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.and_const_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.and_const_ii_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.and_const_ii_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.and_const_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.and_const_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.and_const_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.and_const_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.and_const_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.and_const_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.and_const_ii_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.and_const_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.and_const_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.and_const_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.and_const_ii_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.and_const_ii_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.and_const_ii_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.and_const_ii_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.and_const_ii_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.and_const_ii_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.and_const_ii_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.and_const_ii_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.and_const_ii_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.and_const_ii_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.and_const_ii_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.and_const_ii_sptr__handle_call(self, *args, **kwargs)

and_const_ii_sptr_swigregister = _blocks_swig.and_const_ii_sptr_swigregister
and_const_ii_sptr_swigregister(and_const_ii_sptr)

and_const_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
and_const_ii = and_const_ii.make;

class char_to_float_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::char_to_float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> char_to_float_sptr
        __init__(self, char_to_float p) -> char_to_float_sptr
        """
        this = _blocks_swig.new_char_to_float_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> char_to_float"""
        return _blocks_swig.char_to_float_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_char_to_float_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1, scale = 1.0):
        """make(self, size_t vlen = 1, float scale = 1.0) -> sptr"""
        return _blocks_swig.char_to_float_sptr_make(self, vlen, scale)

    def scale(self):
        """scale(self) -> float"""
        return _blocks_swig.char_to_float_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """set_scale(self, float scale)"""
        return _blocks_swig.char_to_float_sptr_set_scale(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.char_to_float_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.char_to_float_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.char_to_float_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.char_to_float_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.char_to_float_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.char_to_float_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.char_to_float_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.char_to_float_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.char_to_float_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.char_to_float_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.char_to_float_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.char_to_float_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.char_to_float_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.char_to_float_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.char_to_float_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.char_to_float_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.char_to_float_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.char_to_float_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.char_to_float_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.char_to_float_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.char_to_float_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.char_to_float_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.char_to_float_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.char_to_float_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.char_to_float_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.char_to_float_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.char_to_float_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.char_to_float_sptr__handle_call(self, *args, **kwargs)

char_to_float_sptr_swigregister = _blocks_swig.char_to_float_sptr_swigregister
char_to_float_sptr_swigregister(char_to_float_sptr)

char_to_float_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
char_to_float = char_to_float.make;

class char_to_short_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::char_to_short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> char_to_short_sptr
        __init__(self, char_to_short p) -> char_to_short_sptr
        """
        this = _blocks_swig.new_char_to_short_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> char_to_short"""
        return _blocks_swig.char_to_short_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_char_to_short_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.char_to_short_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.char_to_short_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.char_to_short_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.char_to_short_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.char_to_short_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.char_to_short_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.char_to_short_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.char_to_short_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.char_to_short_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.char_to_short_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.char_to_short_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.char_to_short_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.char_to_short_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.char_to_short_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.char_to_short_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.char_to_short_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.char_to_short_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.char_to_short_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.char_to_short_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.char_to_short_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.char_to_short_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.char_to_short_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.char_to_short_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.char_to_short_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.char_to_short_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.char_to_short_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.char_to_short_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.char_to_short_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.char_to_short_sptr__handle_call(self, *args, **kwargs)

char_to_short_sptr_swigregister = _blocks_swig.char_to_short_sptr_swigregister
char_to_short_sptr_swigregister(char_to_short_sptr)

char_to_short_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
char_to_short = char_to_short.make;

class complex_to_interleaved_short_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_interleaved_short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> complex_to_interleaved_short_sptr
        __init__(self, complex_to_interleaved_short p) -> complex_to_interleaved_short_sptr
        """
        this = _blocks_swig.new_complex_to_interleaved_short_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> complex_to_interleaved_short"""
        return _blocks_swig.complex_to_interleaved_short_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_complex_to_interleaved_short_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(self) -> sptr"""
        return _blocks_swig.complex_to_interleaved_short_sptr_make(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.complex_to_interleaved_short_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.complex_to_interleaved_short_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.complex_to_interleaved_short_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.complex_to_interleaved_short_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.complex_to_interleaved_short_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.complex_to_interleaved_short_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.complex_to_interleaved_short_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.complex_to_interleaved_short_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.complex_to_interleaved_short_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.complex_to_interleaved_short_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.complex_to_interleaved_short_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.complex_to_interleaved_short_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.complex_to_interleaved_short_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.complex_to_interleaved_short_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.complex_to_interleaved_short_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.complex_to_interleaved_short_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.complex_to_interleaved_short_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.complex_to_interleaved_short_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.complex_to_interleaved_short_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.complex_to_interleaved_short_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.complex_to_interleaved_short_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.complex_to_interleaved_short_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.complex_to_interleaved_short_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.complex_to_interleaved_short_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.complex_to_interleaved_short_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.complex_to_interleaved_short_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.complex_to_interleaved_short_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.complex_to_interleaved_short_sptr__handle_call(self, *args, **kwargs)

complex_to_interleaved_short_sptr_swigregister = _blocks_swig.complex_to_interleaved_short_sptr_swigregister
complex_to_interleaved_short_sptr_swigregister(complex_to_interleaved_short_sptr)

complex_to_interleaved_short_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_interleaved_short = complex_to_interleaved_short.make;

class complex_to_float_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> complex_to_float_sptr
        __init__(self, complex_to_float p) -> complex_to_float_sptr
        """
        this = _blocks_swig.new_complex_to_float_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> complex_to_float"""
        return _blocks_swig.complex_to_float_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_complex_to_float_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.complex_to_float_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.complex_to_float_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.complex_to_float_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.complex_to_float_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.complex_to_float_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.complex_to_float_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.complex_to_float_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.complex_to_float_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.complex_to_float_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.complex_to_float_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.complex_to_float_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.complex_to_float_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.complex_to_float_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.complex_to_float_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.complex_to_float_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.complex_to_float_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.complex_to_float_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.complex_to_float_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.complex_to_float_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.complex_to_float_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.complex_to_float_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.complex_to_float_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.complex_to_float_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.complex_to_float_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.complex_to_float_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.complex_to_float_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.complex_to_float_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.complex_to_float_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.complex_to_float_sptr__handle_call(self, *args, **kwargs)

complex_to_float_sptr_swigregister = _blocks_swig.complex_to_float_sptr_swigregister
complex_to_float_sptr_swigregister(complex_to_float_sptr)

complex_to_float_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_float = complex_to_float.make;

class complex_to_real_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_real)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> complex_to_real_sptr
        __init__(self, complex_to_real p) -> complex_to_real_sptr
        """
        this = _blocks_swig.new_complex_to_real_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> complex_to_real"""
        return _blocks_swig.complex_to_real_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_complex_to_real_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.complex_to_real_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.complex_to_real_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.complex_to_real_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.complex_to_real_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.complex_to_real_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.complex_to_real_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.complex_to_real_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.complex_to_real_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.complex_to_real_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.complex_to_real_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.complex_to_real_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.complex_to_real_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.complex_to_real_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.complex_to_real_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.complex_to_real_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.complex_to_real_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.complex_to_real_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.complex_to_real_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.complex_to_real_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.complex_to_real_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.complex_to_real_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.complex_to_real_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.complex_to_real_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.complex_to_real_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.complex_to_real_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.complex_to_real_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.complex_to_real_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.complex_to_real_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.complex_to_real_sptr__handle_call(self, *args, **kwargs)

complex_to_real_sptr_swigregister = _blocks_swig.complex_to_real_sptr_swigregister
complex_to_real_sptr_swigregister(complex_to_real_sptr)

complex_to_real_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_real = complex_to_real.make;

class complex_to_imag_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_imag)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> complex_to_imag_sptr
        __init__(self, complex_to_imag p) -> complex_to_imag_sptr
        """
        this = _blocks_swig.new_complex_to_imag_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> complex_to_imag"""
        return _blocks_swig.complex_to_imag_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_complex_to_imag_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.complex_to_imag_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.complex_to_imag_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.complex_to_imag_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.complex_to_imag_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.complex_to_imag_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.complex_to_imag_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.complex_to_imag_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.complex_to_imag_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.complex_to_imag_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.complex_to_imag_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.complex_to_imag_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.complex_to_imag_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.complex_to_imag_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.complex_to_imag_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.complex_to_imag_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.complex_to_imag_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.complex_to_imag_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.complex_to_imag_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.complex_to_imag_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.complex_to_imag_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.complex_to_imag_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.complex_to_imag_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.complex_to_imag_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.complex_to_imag_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.complex_to_imag_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.complex_to_imag_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.complex_to_imag_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.complex_to_imag_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.complex_to_imag_sptr__handle_call(self, *args, **kwargs)

complex_to_imag_sptr_swigregister = _blocks_swig.complex_to_imag_sptr_swigregister
complex_to_imag_sptr_swigregister(complex_to_imag_sptr)

complex_to_imag_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_imag = complex_to_imag.make;

class complex_to_mag_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_mag)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> complex_to_mag_sptr
        __init__(self, complex_to_mag p) -> complex_to_mag_sptr
        """
        this = _blocks_swig.new_complex_to_mag_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> complex_to_mag"""
        return _blocks_swig.complex_to_mag_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_complex_to_mag_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.complex_to_mag_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.complex_to_mag_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.complex_to_mag_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.complex_to_mag_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.complex_to_mag_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.complex_to_mag_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.complex_to_mag_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.complex_to_mag_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.complex_to_mag_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.complex_to_mag_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.complex_to_mag_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.complex_to_mag_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.complex_to_mag_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.complex_to_mag_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.complex_to_mag_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.complex_to_mag_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.complex_to_mag_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.complex_to_mag_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.complex_to_mag_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.complex_to_mag_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.complex_to_mag_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.complex_to_mag_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.complex_to_mag_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.complex_to_mag_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.complex_to_mag_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.complex_to_mag_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.complex_to_mag_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.complex_to_mag_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.complex_to_mag_sptr__handle_call(self, *args, **kwargs)

complex_to_mag_sptr_swigregister = _blocks_swig.complex_to_mag_sptr_swigregister
complex_to_mag_sptr_swigregister(complex_to_mag_sptr)

complex_to_mag_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_mag = complex_to_mag.make;

class complex_to_mag_squared_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_mag_squared)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> complex_to_mag_squared_sptr
        __init__(self, complex_to_mag_squared p) -> complex_to_mag_squared_sptr
        """
        this = _blocks_swig.new_complex_to_mag_squared_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> complex_to_mag_squared"""
        return _blocks_swig.complex_to_mag_squared_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_complex_to_mag_squared_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.complex_to_mag_squared_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.complex_to_mag_squared_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.complex_to_mag_squared_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.complex_to_mag_squared_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.complex_to_mag_squared_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.complex_to_mag_squared_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.complex_to_mag_squared_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.complex_to_mag_squared_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.complex_to_mag_squared_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.complex_to_mag_squared_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.complex_to_mag_squared_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.complex_to_mag_squared_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.complex_to_mag_squared_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.complex_to_mag_squared_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.complex_to_mag_squared_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.complex_to_mag_squared_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.complex_to_mag_squared_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.complex_to_mag_squared_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.complex_to_mag_squared_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.complex_to_mag_squared_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.complex_to_mag_squared_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.complex_to_mag_squared_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.complex_to_mag_squared_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.complex_to_mag_squared_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.complex_to_mag_squared_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.complex_to_mag_squared_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.complex_to_mag_squared_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.complex_to_mag_squared_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.complex_to_mag_squared_sptr__handle_call(self, *args, **kwargs)

complex_to_mag_squared_sptr_swigregister = _blocks_swig.complex_to_mag_squared_sptr_swigregister
complex_to_mag_squared_sptr_swigregister(complex_to_mag_squared_sptr)

complex_to_mag_squared_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_mag_squared = complex_to_mag_squared.make;

class complex_to_arg_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_arg)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> complex_to_arg_sptr
        __init__(self, complex_to_arg p) -> complex_to_arg_sptr
        """
        this = _blocks_swig.new_complex_to_arg_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> complex_to_arg"""
        return _blocks_swig.complex_to_arg_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_complex_to_arg_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.complex_to_arg_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.complex_to_arg_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.complex_to_arg_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.complex_to_arg_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.complex_to_arg_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.complex_to_arg_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.complex_to_arg_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.complex_to_arg_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.complex_to_arg_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.complex_to_arg_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.complex_to_arg_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.complex_to_arg_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.complex_to_arg_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.complex_to_arg_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.complex_to_arg_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.complex_to_arg_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.complex_to_arg_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.complex_to_arg_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.complex_to_arg_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.complex_to_arg_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.complex_to_arg_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.complex_to_arg_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.complex_to_arg_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.complex_to_arg_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.complex_to_arg_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.complex_to_arg_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.complex_to_arg_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.complex_to_arg_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.complex_to_arg_sptr__handle_call(self, *args, **kwargs)

complex_to_arg_sptr_swigregister = _blocks_swig.complex_to_arg_sptr_swigregister
complex_to_arg_sptr_swigregister(complex_to_arg_sptr)

complex_to_arg_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_arg = complex_to_arg.make;

class conjugate_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::conjugate_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> conjugate_cc_sptr
        __init__(self, conjugate_cc p) -> conjugate_cc_sptr
        """
        this = _blocks_swig.new_conjugate_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> conjugate_cc"""
        return _blocks_swig.conjugate_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_conjugate_cc_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(self) -> sptr"""
        return _blocks_swig.conjugate_cc_sptr_make(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.conjugate_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.conjugate_cc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.conjugate_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.conjugate_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.conjugate_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.conjugate_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.conjugate_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.conjugate_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.conjugate_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.conjugate_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.conjugate_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.conjugate_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.conjugate_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.conjugate_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.conjugate_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.conjugate_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.conjugate_cc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.conjugate_cc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.conjugate_cc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.conjugate_cc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.conjugate_cc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.conjugate_cc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.conjugate_cc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.conjugate_cc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.conjugate_cc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.conjugate_cc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.conjugate_cc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.conjugate_cc_sptr__handle_call(self, *args, **kwargs)

conjugate_cc_sptr_swigregister = _blocks_swig.conjugate_cc_sptr_swigregister
conjugate_cc_sptr_swigregister(conjugate_cc_sptr)

conjugate_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
conjugate_cc = conjugate_cc.make;

class deinterleave_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::deinterleave)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> deinterleave_sptr
        __init__(self, deinterleave p) -> deinterleave_sptr
        """
        this = _blocks_swig.new_deinterleave_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> deinterleave"""
        return _blocks_swig.deinterleave_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_deinterleave_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, size_t itemsize) -> sptr"""
        return _blocks_swig.deinterleave_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.deinterleave_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.deinterleave_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.deinterleave_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.deinterleave_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.deinterleave_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.deinterleave_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.deinterleave_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.deinterleave_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.deinterleave_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.deinterleave_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.deinterleave_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.deinterleave_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.deinterleave_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.deinterleave_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.deinterleave_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.deinterleave_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.deinterleave_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.deinterleave_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.deinterleave_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.deinterleave_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.deinterleave_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.deinterleave_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.deinterleave_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.deinterleave_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.deinterleave_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.deinterleave_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.deinterleave_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.deinterleave_sptr__handle_call(self, *args, **kwargs)

deinterleave_sptr_swigregister = _blocks_swig.deinterleave_sptr_swigregister
deinterleave_sptr_swigregister(deinterleave_sptr)

deinterleave_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
deinterleave = deinterleave.make;

class delay_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::delay)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> delay_sptr
        __init__(self, delay p) -> delay_sptr
        """
        this = _blocks_swig.new_delay_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> delay"""
        return _blocks_swig.delay_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_delay_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, size_t itemsize, int delay) -> sptr"""
        return _blocks_swig.delay_sptr_make(self, *args, **kwargs)

    def dly(self):
        """dly(self) -> int"""
        return _blocks_swig.delay_sptr_dly(self)

    def set_dly(self, *args, **kwargs):
        """set_dly(self, int d)"""
        return _blocks_swig.delay_sptr_set_dly(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.delay_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.delay_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.delay_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.delay_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.delay_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.delay_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.delay_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.delay_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.delay_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.delay_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.delay_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.delay_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.delay_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.delay_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.delay_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.delay_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.delay_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.delay_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.delay_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.delay_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.delay_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.delay_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.delay_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.delay_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.delay_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.delay_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.delay_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.delay_sptr__handle_call(self, *args, **kwargs)

delay_sptr_swigregister = _blocks_swig.delay_sptr_swigregister
delay_sptr_swigregister(delay_sptr)

delay_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
delay = delay.make;

class divide_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::divide_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> divide_ff_sptr
        __init__(self, divide_ff p) -> divide_ff_sptr
        """
        this = _blocks_swig.new_divide_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> divide_ff"""
        return _blocks_swig.divide_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_divide_ff_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.divide_ff_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.divide_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.divide_ff_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.divide_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.divide_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.divide_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.divide_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.divide_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.divide_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.divide_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.divide_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.divide_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.divide_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.divide_ff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.divide_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.divide_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.divide_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.divide_ff_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.divide_ff_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.divide_ff_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.divide_ff_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.divide_ff_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.divide_ff_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.divide_ff_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.divide_ff_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.divide_ff_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.divide_ff_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.divide_ff_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.divide_ff_sptr__handle_call(self, *args, **kwargs)

divide_ff_sptr_swigregister = _blocks_swig.divide_ff_sptr_swigregister
divide_ff_sptr_swigregister(divide_ff_sptr)

divide_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
divide_ff = divide_ff.make;

class divide_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::divide_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> divide_ss_sptr
        __init__(self, divide_ss p) -> divide_ss_sptr
        """
        this = _blocks_swig.new_divide_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> divide_ss"""
        return _blocks_swig.divide_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_divide_ss_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.divide_ss_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.divide_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.divide_ss_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.divide_ss_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.divide_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.divide_ss_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.divide_ss_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.divide_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.divide_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.divide_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.divide_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.divide_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.divide_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.divide_ss_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.divide_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.divide_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.divide_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.divide_ss_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.divide_ss_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.divide_ss_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.divide_ss_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.divide_ss_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.divide_ss_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.divide_ss_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.divide_ss_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.divide_ss_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.divide_ss_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.divide_ss_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.divide_ss_sptr__handle_call(self, *args, **kwargs)

divide_ss_sptr_swigregister = _blocks_swig.divide_ss_sptr_swigregister
divide_ss_sptr_swigregister(divide_ss_sptr)

divide_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
divide_ss = divide_ss.make;

class divide_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::divide_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> divide_ii_sptr
        __init__(self, divide_ii p) -> divide_ii_sptr
        """
        this = _blocks_swig.new_divide_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> divide_ii"""
        return _blocks_swig.divide_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_divide_ii_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.divide_ii_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.divide_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.divide_ii_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.divide_ii_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.divide_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.divide_ii_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.divide_ii_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.divide_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.divide_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.divide_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.divide_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.divide_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.divide_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.divide_ii_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.divide_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.divide_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.divide_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.divide_ii_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.divide_ii_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.divide_ii_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.divide_ii_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.divide_ii_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.divide_ii_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.divide_ii_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.divide_ii_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.divide_ii_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.divide_ii_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.divide_ii_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.divide_ii_sptr__handle_call(self, *args, **kwargs)

divide_ii_sptr_swigregister = _blocks_swig.divide_ii_sptr_swigregister
divide_ii_sptr_swigregister(divide_ii_sptr)

divide_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
divide_ii = divide_ii.make;

class divide_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::divide_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> divide_cc_sptr
        __init__(self, divide_cc p) -> divide_cc_sptr
        """
        this = _blocks_swig.new_divide_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> divide_cc"""
        return _blocks_swig.divide_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_divide_cc_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.divide_cc_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.divide_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.divide_cc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.divide_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.divide_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.divide_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.divide_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.divide_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.divide_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.divide_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.divide_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.divide_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.divide_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.divide_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.divide_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.divide_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.divide_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.divide_cc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.divide_cc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.divide_cc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.divide_cc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.divide_cc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.divide_cc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.divide_cc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.divide_cc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.divide_cc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.divide_cc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.divide_cc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.divide_cc_sptr__handle_call(self, *args, **kwargs)

divide_cc_sptr_swigregister = _blocks_swig.divide_cc_sptr_swigregister
divide_cc_sptr_swigregister(divide_cc_sptr)

divide_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
divide_cc = divide_cc.make;

class file_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::file_source)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> file_source_sptr
        __init__(self, file_source p) -> file_source_sptr
        """
        this = _blocks_swig.new_file_source_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> file_source"""
        return _blocks_swig.file_source_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_file_source_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, size_t itemsize, char filename, bool repeat = False) -> sptr"""
        return _blocks_swig.file_source_sptr_make(self, *args, **kwargs)

    def seek(self, *args, **kwargs):
        """seek(self, long seek_point, int whence) -> bool"""
        return _blocks_swig.file_source_sptr_seek(self, *args, **kwargs)

    def open(self, *args, **kwargs):
        """open(self, char filename, bool repeat)"""
        return _blocks_swig.file_source_sptr_open(self, *args, **kwargs)

    def close(self):
        """close(self)"""
        return _blocks_swig.file_source_sptr_close(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.file_source_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.file_source_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.file_source_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.file_source_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.file_source_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.file_source_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.file_source_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.file_source_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.file_source_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.file_source_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.file_source_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.file_source_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.file_source_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.file_source_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.file_source_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.file_source_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.file_source_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.file_source_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.file_source_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.file_source_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.file_source_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.file_source_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.file_source_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.file_source_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.file_source_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.file_source_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.file_source_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.file_source_sptr__handle_call(self, *args, **kwargs)

file_source_sptr_swigregister = _blocks_swig.file_source_sptr_swigregister
file_source_sptr_swigregister(file_source_sptr)

file_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
file_source = file_source.make;

class file_meta_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::file_meta_sink)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> file_meta_sink_sptr
        __init__(self, file_meta_sink p) -> file_meta_sink_sptr
        """
        this = _blocks_swig.new_file_meta_sink_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> file_meta_sink"""
        return _blocks_swig.file_meta_sink_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_file_meta_sink_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, size_t itemsize, string filename, double samp_rate = 1, 
            double relative_rate = 1, gr_file_types type = GR_FILE_FLOAT, 
            bool complex = True, size_t max_segment_size = 1000000, 
            string extra_dict = "", 
            bool detached_header = False) -> sptr
        """
        return _blocks_swig.file_meta_sink_sptr_make(self, *args, **kwargs)

    def open(self, *args, **kwargs):
        """open(self, string filename) -> bool"""
        return _blocks_swig.file_meta_sink_sptr_open(self, *args, **kwargs)

    def close(self):
        """close(self)"""
        return _blocks_swig.file_meta_sink_sptr_close(self)

    def do_update(self):
        """do_update(self)"""
        return _blocks_swig.file_meta_sink_sptr_do_update(self)

    def set_unbuffered(self, *args, **kwargs):
        """set_unbuffered(self, bool unbuffered)"""
        return _blocks_swig.file_meta_sink_sptr_set_unbuffered(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.file_meta_sink_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.file_meta_sink_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.file_meta_sink_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.file_meta_sink_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.file_meta_sink_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.file_meta_sink_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.file_meta_sink_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.file_meta_sink_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.file_meta_sink_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.file_meta_sink_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.file_meta_sink_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.file_meta_sink_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.file_meta_sink_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.file_meta_sink_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.file_meta_sink_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.file_meta_sink_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.file_meta_sink_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.file_meta_sink_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.file_meta_sink_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.file_meta_sink_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.file_meta_sink_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.file_meta_sink_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.file_meta_sink_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.file_meta_sink_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.file_meta_sink_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.file_meta_sink_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.file_meta_sink_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.file_meta_sink_sptr__handle_call(self, *args, **kwargs)

file_meta_sink_sptr_swigregister = _blocks_swig.file_meta_sink_sptr_swigregister
file_meta_sink_sptr_swigregister(file_meta_sink_sptr)

file_meta_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
file_meta_sink = file_meta_sink.make;

class file_meta_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::file_meta_source)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> file_meta_source_sptr
        __init__(self, file_meta_source p) -> file_meta_source_sptr
        """
        this = _blocks_swig.new_file_meta_source_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> file_meta_source"""
        return _blocks_swig.file_meta_source_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_file_meta_source_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, string filename, bool repeat = False, bool detached_header = False, 
            string hdr_filename = "") -> sptr
        """
        return _blocks_swig.file_meta_source_sptr_make(self, *args, **kwargs)

    def open(self, *args, **kwargs):
        """open(self, string filename, string hdr_filename = "") -> bool"""
        return _blocks_swig.file_meta_source_sptr_open(self, *args, **kwargs)

    def close(self):
        """close(self)"""
        return _blocks_swig.file_meta_source_sptr_close(self)

    def do_update(self):
        """do_update(self)"""
        return _blocks_swig.file_meta_source_sptr_do_update(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.file_meta_source_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.file_meta_source_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.file_meta_source_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.file_meta_source_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.file_meta_source_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.file_meta_source_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.file_meta_source_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.file_meta_source_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.file_meta_source_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.file_meta_source_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.file_meta_source_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.file_meta_source_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.file_meta_source_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.file_meta_source_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.file_meta_source_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.file_meta_source_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.file_meta_source_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.file_meta_source_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.file_meta_source_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.file_meta_source_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.file_meta_source_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.file_meta_source_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.file_meta_source_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.file_meta_source_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.file_meta_source_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.file_meta_source_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.file_meta_source_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.file_meta_source_sptr__handle_call(self, *args, **kwargs)

file_meta_source_sptr_swigregister = _blocks_swig.file_meta_source_sptr_swigregister
file_meta_source_sptr_swigregister(file_meta_source_sptr)

file_meta_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
file_meta_source = file_meta_source.make;

class float_to_char_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::float_to_char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> float_to_char_sptr
        __init__(self, float_to_char p) -> float_to_char_sptr
        """
        this = _blocks_swig.new_float_to_char_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> float_to_char"""
        return _blocks_swig.float_to_char_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_float_to_char_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1, scale = 1.0):
        """make(self, size_t vlen = 1, float scale = 1.0) -> sptr"""
        return _blocks_swig.float_to_char_sptr_make(self, vlen, scale)

    def scale(self):
        """scale(self) -> float"""
        return _blocks_swig.float_to_char_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """set_scale(self, float scale)"""
        return _blocks_swig.float_to_char_sptr_set_scale(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.float_to_char_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.float_to_char_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.float_to_char_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.float_to_char_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.float_to_char_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.float_to_char_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.float_to_char_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.float_to_char_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.float_to_char_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.float_to_char_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.float_to_char_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.float_to_char_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.float_to_char_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.float_to_char_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.float_to_char_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.float_to_char_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.float_to_char_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.float_to_char_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.float_to_char_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.float_to_char_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.float_to_char_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.float_to_char_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.float_to_char_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.float_to_char_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.float_to_char_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.float_to_char_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.float_to_char_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.float_to_char_sptr__handle_call(self, *args, **kwargs)

float_to_char_sptr_swigregister = _blocks_swig.float_to_char_sptr_swigregister
float_to_char_sptr_swigregister(float_to_char_sptr)

float_to_char_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
float_to_char = float_to_char.make;

class float_to_complex_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::float_to_complex)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> float_to_complex_sptr
        __init__(self, float_to_complex p) -> float_to_complex_sptr
        """
        this = _blocks_swig.new_float_to_complex_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> float_to_complex"""
        return _blocks_swig.float_to_complex_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_float_to_complex_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.float_to_complex_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.float_to_complex_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.float_to_complex_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.float_to_complex_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.float_to_complex_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.float_to_complex_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.float_to_complex_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.float_to_complex_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.float_to_complex_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.float_to_complex_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.float_to_complex_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.float_to_complex_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.float_to_complex_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.float_to_complex_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.float_to_complex_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.float_to_complex_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.float_to_complex_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.float_to_complex_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.float_to_complex_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.float_to_complex_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.float_to_complex_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.float_to_complex_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.float_to_complex_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.float_to_complex_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.float_to_complex_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.float_to_complex_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.float_to_complex_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.float_to_complex_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.float_to_complex_sptr__handle_call(self, *args, **kwargs)

float_to_complex_sptr_swigregister = _blocks_swig.float_to_complex_sptr_swigregister
float_to_complex_sptr_swigregister(float_to_complex_sptr)

float_to_complex_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
float_to_complex = float_to_complex.make;

class float_to_int_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::float_to_int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> float_to_int_sptr
        __init__(self, float_to_int p) -> float_to_int_sptr
        """
        this = _blocks_swig.new_float_to_int_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> float_to_int"""
        return _blocks_swig.float_to_int_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_float_to_int_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1, scale = 1.0):
        """make(self, size_t vlen = 1, float scale = 1.0) -> sptr"""
        return _blocks_swig.float_to_int_sptr_make(self, vlen, scale)

    def scale(self):
        """scale(self) -> float"""
        return _blocks_swig.float_to_int_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """set_scale(self, float scale)"""
        return _blocks_swig.float_to_int_sptr_set_scale(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.float_to_int_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.float_to_int_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.float_to_int_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.float_to_int_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.float_to_int_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.float_to_int_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.float_to_int_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.float_to_int_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.float_to_int_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.float_to_int_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.float_to_int_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.float_to_int_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.float_to_int_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.float_to_int_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.float_to_int_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.float_to_int_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.float_to_int_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.float_to_int_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.float_to_int_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.float_to_int_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.float_to_int_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.float_to_int_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.float_to_int_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.float_to_int_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.float_to_int_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.float_to_int_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.float_to_int_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.float_to_int_sptr__handle_call(self, *args, **kwargs)

float_to_int_sptr_swigregister = _blocks_swig.float_to_int_sptr_swigregister
float_to_int_sptr_swigregister(float_to_int_sptr)

float_to_int_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
float_to_int = float_to_int.make;

class float_to_short_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::float_to_short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> float_to_short_sptr
        __init__(self, float_to_short p) -> float_to_short_sptr
        """
        this = _blocks_swig.new_float_to_short_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> float_to_short"""
        return _blocks_swig.float_to_short_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_float_to_short_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1, scale = 1.0):
        """make(self, size_t vlen = 1, float scale = 1.0) -> sptr"""
        return _blocks_swig.float_to_short_sptr_make(self, vlen, scale)

    def scale(self):
        """scale(self) -> float"""
        return _blocks_swig.float_to_short_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """set_scale(self, float scale)"""
        return _blocks_swig.float_to_short_sptr_set_scale(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.float_to_short_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.float_to_short_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.float_to_short_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.float_to_short_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.float_to_short_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.float_to_short_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.float_to_short_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.float_to_short_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.float_to_short_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.float_to_short_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.float_to_short_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.float_to_short_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.float_to_short_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.float_to_short_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.float_to_short_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.float_to_short_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.float_to_short_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.float_to_short_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.float_to_short_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.float_to_short_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.float_to_short_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.float_to_short_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.float_to_short_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.float_to_short_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.float_to_short_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.float_to_short_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.float_to_short_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.float_to_short_sptr__handle_call(self, *args, **kwargs)

float_to_short_sptr_swigregister = _blocks_swig.float_to_short_sptr_swigregister
float_to_short_sptr_swigregister(float_to_short_sptr)

float_to_short_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
float_to_short = float_to_short.make;

class float_to_uchar_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::float_to_uchar)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> float_to_uchar_sptr
        __init__(self, float_to_uchar p) -> float_to_uchar_sptr
        """
        this = _blocks_swig.new_float_to_uchar_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> float_to_uchar"""
        return _blocks_swig.float_to_uchar_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_float_to_uchar_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(self) -> sptr"""
        return _blocks_swig.float_to_uchar_sptr_make(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.float_to_uchar_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.float_to_uchar_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.float_to_uchar_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.float_to_uchar_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.float_to_uchar_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.float_to_uchar_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.float_to_uchar_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.float_to_uchar_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.float_to_uchar_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.float_to_uchar_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.float_to_uchar_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.float_to_uchar_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.float_to_uchar_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.float_to_uchar_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.float_to_uchar_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.float_to_uchar_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.float_to_uchar_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.float_to_uchar_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.float_to_uchar_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.float_to_uchar_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.float_to_uchar_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.float_to_uchar_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.float_to_uchar_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.float_to_uchar_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.float_to_uchar_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.float_to_uchar_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.float_to_uchar_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.float_to_uchar_sptr__handle_call(self, *args, **kwargs)

float_to_uchar_sptr_swigregister = _blocks_swig.float_to_uchar_sptr_swigregister
float_to_uchar_sptr_swigregister(float_to_uchar_sptr)

float_to_uchar_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
float_to_uchar = float_to_uchar.make;

class int_to_float_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::int_to_float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> int_to_float_sptr
        __init__(self, int_to_float p) -> int_to_float_sptr
        """
        this = _blocks_swig.new_int_to_float_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> int_to_float"""
        return _blocks_swig.int_to_float_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_int_to_float_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1, scale = 1.0):
        """make(self, size_t vlen = 1, float scale = 1.0) -> sptr"""
        return _blocks_swig.int_to_float_sptr_make(self, vlen, scale)

    def scale(self):
        """scale(self) -> float"""
        return _blocks_swig.int_to_float_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """set_scale(self, float scale)"""
        return _blocks_swig.int_to_float_sptr_set_scale(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.int_to_float_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.int_to_float_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.int_to_float_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.int_to_float_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.int_to_float_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.int_to_float_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.int_to_float_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.int_to_float_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.int_to_float_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.int_to_float_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.int_to_float_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.int_to_float_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.int_to_float_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.int_to_float_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.int_to_float_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.int_to_float_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.int_to_float_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.int_to_float_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.int_to_float_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.int_to_float_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.int_to_float_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.int_to_float_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.int_to_float_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.int_to_float_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.int_to_float_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.int_to_float_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.int_to_float_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.int_to_float_sptr__handle_call(self, *args, **kwargs)

int_to_float_sptr_swigregister = _blocks_swig.int_to_float_sptr_swigregister
int_to_float_sptr_swigregister(int_to_float_sptr)

int_to_float_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
int_to_float = int_to_float.make;

class integrate_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::integrate_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> integrate_ss_sptr
        __init__(self, integrate_ss p) -> integrate_ss_sptr
        """
        this = _blocks_swig.new_integrate_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> integrate_ss"""
        return _blocks_swig.integrate_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_integrate_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, int decim) -> sptr"""
        return _blocks_swig.integrate_ss_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.integrate_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.integrate_ss_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.integrate_ss_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.integrate_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.integrate_ss_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.integrate_ss_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.integrate_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.integrate_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.integrate_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.integrate_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.integrate_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.integrate_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.integrate_ss_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.integrate_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.integrate_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.integrate_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.integrate_ss_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.integrate_ss_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.integrate_ss_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.integrate_ss_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.integrate_ss_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.integrate_ss_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.integrate_ss_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.integrate_ss_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.integrate_ss_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.integrate_ss_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.integrate_ss_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.integrate_ss_sptr__handle_call(self, *args, **kwargs)

integrate_ss_sptr_swigregister = _blocks_swig.integrate_ss_sptr_swigregister
integrate_ss_sptr_swigregister(integrate_ss_sptr)

integrate_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
integrate_ss = integrate_ss.make;

class integrate_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::integrate_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> integrate_ii_sptr
        __init__(self, integrate_ii p) -> integrate_ii_sptr
        """
        this = _blocks_swig.new_integrate_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> integrate_ii"""
        return _blocks_swig.integrate_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_integrate_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, int decim) -> sptr"""
        return _blocks_swig.integrate_ii_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.integrate_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.integrate_ii_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.integrate_ii_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.integrate_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.integrate_ii_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.integrate_ii_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.integrate_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.integrate_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.integrate_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.integrate_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.integrate_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.integrate_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.integrate_ii_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.integrate_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.integrate_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.integrate_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.integrate_ii_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.integrate_ii_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.integrate_ii_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.integrate_ii_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.integrate_ii_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.integrate_ii_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.integrate_ii_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.integrate_ii_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.integrate_ii_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.integrate_ii_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.integrate_ii_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.integrate_ii_sptr__handle_call(self, *args, **kwargs)

integrate_ii_sptr_swigregister = _blocks_swig.integrate_ii_sptr_swigregister
integrate_ii_sptr_swigregister(integrate_ii_sptr)

integrate_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
integrate_ii = integrate_ii.make;

class integrate_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::integrate_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> integrate_ff_sptr
        __init__(self, integrate_ff p) -> integrate_ff_sptr
        """
        this = _blocks_swig.new_integrate_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> integrate_ff"""
        return _blocks_swig.integrate_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_integrate_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, int decim) -> sptr"""
        return _blocks_swig.integrate_ff_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.integrate_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.integrate_ff_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.integrate_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.integrate_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.integrate_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.integrate_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.integrate_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.integrate_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.integrate_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.integrate_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.integrate_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.integrate_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.integrate_ff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.integrate_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.integrate_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.integrate_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.integrate_ff_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.integrate_ff_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.integrate_ff_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.integrate_ff_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.integrate_ff_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.integrate_ff_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.integrate_ff_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.integrate_ff_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.integrate_ff_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.integrate_ff_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.integrate_ff_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.integrate_ff_sptr__handle_call(self, *args, **kwargs)

integrate_ff_sptr_swigregister = _blocks_swig.integrate_ff_sptr_swigregister
integrate_ff_sptr_swigregister(integrate_ff_sptr)

integrate_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
integrate_ff = integrate_ff.make;

class integrate_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::integrate_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> integrate_cc_sptr
        __init__(self, integrate_cc p) -> integrate_cc_sptr
        """
        this = _blocks_swig.new_integrate_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> integrate_cc"""
        return _blocks_swig.integrate_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_integrate_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, int decim) -> sptr"""
        return _blocks_swig.integrate_cc_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.integrate_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.integrate_cc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.integrate_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.integrate_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.integrate_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.integrate_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.integrate_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.integrate_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.integrate_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.integrate_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.integrate_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.integrate_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.integrate_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.integrate_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.integrate_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.integrate_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.integrate_cc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.integrate_cc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.integrate_cc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.integrate_cc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.integrate_cc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.integrate_cc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.integrate_cc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.integrate_cc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.integrate_cc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.integrate_cc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.integrate_cc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.integrate_cc_sptr__handle_call(self, *args, **kwargs)

integrate_cc_sptr_swigregister = _blocks_swig.integrate_cc_sptr_swigregister
integrate_cc_sptr_swigregister(integrate_cc_sptr)

integrate_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
integrate_cc = integrate_cc.make;

class interleave_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::interleave)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> interleave_sptr
        __init__(self, interleave p) -> interleave_sptr
        """
        this = _blocks_swig.new_interleave_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> interleave"""
        return _blocks_swig.interleave_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_interleave_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, size_t itemsize) -> sptr"""
        return _blocks_swig.interleave_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.interleave_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.interleave_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.interleave_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.interleave_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.interleave_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.interleave_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.interleave_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.interleave_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.interleave_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.interleave_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.interleave_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.interleave_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.interleave_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.interleave_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.interleave_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.interleave_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.interleave_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.interleave_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.interleave_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.interleave_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.interleave_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.interleave_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.interleave_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.interleave_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.interleave_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.interleave_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.interleave_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.interleave_sptr__handle_call(self, *args, **kwargs)

interleave_sptr_swigregister = _blocks_swig.interleave_sptr_swigregister
interleave_sptr_swigregister(interleave_sptr)

interleave_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
interleave = interleave.make;

class interleaved_short_to_complex_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::interleaved_short_to_complex)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> interleaved_short_to_complex_sptr
        __init__(self, interleaved_short_to_complex p) -> interleaved_short_to_complex_sptr
        """
        this = _blocks_swig.new_interleaved_short_to_complex_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> interleaved_short_to_complex"""
        return _blocks_swig.interleaved_short_to_complex_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_interleaved_short_to_complex_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(self) -> sptr"""
        return _blocks_swig.interleaved_short_to_complex_sptr_make(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.interleaved_short_to_complex_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.interleaved_short_to_complex_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.interleaved_short_to_complex_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.interleaved_short_to_complex_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.interleaved_short_to_complex_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.interleaved_short_to_complex_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.interleaved_short_to_complex_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.interleaved_short_to_complex_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.interleaved_short_to_complex_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.interleaved_short_to_complex_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.interleaved_short_to_complex_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.interleaved_short_to_complex_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.interleaved_short_to_complex_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.interleaved_short_to_complex_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.interleaved_short_to_complex_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.interleaved_short_to_complex_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.interleaved_short_to_complex_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.interleaved_short_to_complex_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.interleaved_short_to_complex_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.interleaved_short_to_complex_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.interleaved_short_to_complex_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.interleaved_short_to_complex_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.interleaved_short_to_complex_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.interleaved_short_to_complex_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.interleaved_short_to_complex_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.interleaved_short_to_complex_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.interleaved_short_to_complex_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.interleaved_short_to_complex_sptr__handle_call(self, *args, **kwargs)

interleaved_short_to_complex_sptr_swigregister = _blocks_swig.interleaved_short_to_complex_sptr_swigregister
interleaved_short_to_complex_sptr_swigregister(interleaved_short_to_complex_sptr)

interleaved_short_to_complex_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
interleaved_short_to_complex = interleaved_short_to_complex.make;

class keep_m_in_n_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::keep_m_in_n)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> keep_m_in_n_sptr
        __init__(self, keep_m_in_n p) -> keep_m_in_n_sptr
        """
        this = _blocks_swig.new_keep_m_in_n_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> keep_m_in_n"""
        return _blocks_swig.keep_m_in_n_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_keep_m_in_n_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, size_t itemsize, int m, int n, int offset) -> sptr"""
        return _blocks_swig.keep_m_in_n_sptr_make(self, *args, **kwargs)

    def set_m(self, *args, **kwargs):
        """set_m(self, int m)"""
        return _blocks_swig.keep_m_in_n_sptr_set_m(self, *args, **kwargs)

    def set_n(self, *args, **kwargs):
        """set_n(self, int n)"""
        return _blocks_swig.keep_m_in_n_sptr_set_n(self, *args, **kwargs)

    def set_offset(self, *args, **kwargs):
        """set_offset(self, int offset)"""
        return _blocks_swig.keep_m_in_n_sptr_set_offset(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.keep_m_in_n_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.keep_m_in_n_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.keep_m_in_n_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.keep_m_in_n_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.keep_m_in_n_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.keep_m_in_n_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.keep_m_in_n_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.keep_m_in_n_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.keep_m_in_n_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.keep_m_in_n_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.keep_m_in_n_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.keep_m_in_n_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.keep_m_in_n_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.keep_m_in_n_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.keep_m_in_n_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.keep_m_in_n_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.keep_m_in_n_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.keep_m_in_n_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.keep_m_in_n_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.keep_m_in_n_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.keep_m_in_n_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.keep_m_in_n_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.keep_m_in_n_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.keep_m_in_n_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.keep_m_in_n_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.keep_m_in_n_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.keep_m_in_n_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.keep_m_in_n_sptr__handle_call(self, *args, **kwargs)

keep_m_in_n_sptr_swigregister = _blocks_swig.keep_m_in_n_sptr_swigregister
keep_m_in_n_sptr_swigregister(keep_m_in_n_sptr)

keep_m_in_n_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
keep_m_in_n = keep_m_in_n.make;

class keep_one_in_n_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::keep_one_in_n)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> keep_one_in_n_sptr
        __init__(self, keep_one_in_n p) -> keep_one_in_n_sptr
        """
        this = _blocks_swig.new_keep_one_in_n_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> keep_one_in_n"""
        return _blocks_swig.keep_one_in_n_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_keep_one_in_n_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, size_t itemsize, int n) -> sptr"""
        return _blocks_swig.keep_one_in_n_sptr_make(self, *args, **kwargs)

    def set_n(self, *args, **kwargs):
        """set_n(self, int n)"""
        return _blocks_swig.keep_one_in_n_sptr_set_n(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.keep_one_in_n_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.keep_one_in_n_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.keep_one_in_n_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.keep_one_in_n_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.keep_one_in_n_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.keep_one_in_n_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.keep_one_in_n_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.keep_one_in_n_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.keep_one_in_n_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.keep_one_in_n_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.keep_one_in_n_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.keep_one_in_n_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.keep_one_in_n_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.keep_one_in_n_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.keep_one_in_n_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.keep_one_in_n_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.keep_one_in_n_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.keep_one_in_n_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.keep_one_in_n_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.keep_one_in_n_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.keep_one_in_n_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.keep_one_in_n_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.keep_one_in_n_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.keep_one_in_n_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.keep_one_in_n_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.keep_one_in_n_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.keep_one_in_n_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.keep_one_in_n_sptr__handle_call(self, *args, **kwargs)

keep_one_in_n_sptr_swigregister = _blocks_swig.keep_one_in_n_sptr_swigregister
keep_one_in_n_sptr_swigregister(keep_one_in_n_sptr)

keep_one_in_n_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
keep_one_in_n = keep_one_in_n.make;

class multiply_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> multiply_ss_sptr
        __init__(self, multiply_ss p) -> multiply_ss_sptr
        """
        this = _blocks_swig.new_multiply_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> multiply_ss"""
        return _blocks_swig.multiply_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_multiply_ss_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.multiply_ss_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_ss_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.multiply_ss_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.multiply_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.multiply_ss_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.multiply_ss_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.multiply_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.multiply_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.multiply_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.multiply_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.multiply_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.multiply_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.multiply_ss_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.multiply_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.multiply_ss_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.multiply_ss_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.multiply_ss_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.multiply_ss_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.multiply_ss_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.multiply_ss_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.multiply_ss_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.multiply_ss_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.multiply_ss_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.multiply_ss_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.multiply_ss_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.multiply_ss_sptr__handle_call(self, *args, **kwargs)

multiply_ss_sptr_swigregister = _blocks_swig.multiply_ss_sptr_swigregister
multiply_ss_sptr_swigregister(multiply_ss_sptr)

multiply_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_ss = multiply_ss.make;

class multiply_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> multiply_ii_sptr
        __init__(self, multiply_ii p) -> multiply_ii_sptr
        """
        this = _blocks_swig.new_multiply_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> multiply_ii"""
        return _blocks_swig.multiply_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_multiply_ii_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.multiply_ii_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_ii_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.multiply_ii_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.multiply_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.multiply_ii_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.multiply_ii_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.multiply_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.multiply_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.multiply_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.multiply_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.multiply_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.multiply_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.multiply_ii_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.multiply_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.multiply_ii_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.multiply_ii_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.multiply_ii_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.multiply_ii_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.multiply_ii_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.multiply_ii_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.multiply_ii_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.multiply_ii_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.multiply_ii_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.multiply_ii_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.multiply_ii_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.multiply_ii_sptr__handle_call(self, *args, **kwargs)

multiply_ii_sptr_swigregister = _blocks_swig.multiply_ii_sptr_swigregister
multiply_ii_sptr_swigregister(multiply_ii_sptr)

multiply_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_ii = multiply_ii.make;

class multiply_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> multiply_ff_sptr
        __init__(self, multiply_ff p) -> multiply_ff_sptr
        """
        this = _blocks_swig.new_multiply_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> multiply_ff"""
        return _blocks_swig.multiply_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_multiply_ff_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.multiply_ff_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_ff_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.multiply_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.multiply_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.multiply_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.multiply_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.multiply_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.multiply_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.multiply_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.multiply_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.multiply_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.multiply_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.multiply_ff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.multiply_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.multiply_ff_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.multiply_ff_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.multiply_ff_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.multiply_ff_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.multiply_ff_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.multiply_ff_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.multiply_ff_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.multiply_ff_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.multiply_ff_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.multiply_ff_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.multiply_ff_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.multiply_ff_sptr__handle_call(self, *args, **kwargs)

multiply_ff_sptr_swigregister = _blocks_swig.multiply_ff_sptr_swigregister
multiply_ff_sptr_swigregister(multiply_ff_sptr)

multiply_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_ff = multiply_ff.make;

class multiply_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> multiply_cc_sptr
        __init__(self, multiply_cc p) -> multiply_cc_sptr
        """
        this = _blocks_swig.new_multiply_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> multiply_cc"""
        return _blocks_swig.multiply_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_multiply_cc_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.multiply_cc_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_cc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.multiply_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.multiply_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.multiply_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.multiply_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.multiply_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.multiply_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.multiply_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.multiply_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.multiply_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.multiply_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.multiply_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.multiply_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.multiply_cc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.multiply_cc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.multiply_cc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.multiply_cc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.multiply_cc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.multiply_cc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.multiply_cc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.multiply_cc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.multiply_cc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.multiply_cc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.multiply_cc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.multiply_cc_sptr__handle_call(self, *args, **kwargs)

multiply_cc_sptr_swigregister = _blocks_swig.multiply_cc_sptr_swigregister
multiply_cc_sptr_swigregister(multiply_cc_sptr)

multiply_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_cc = multiply_cc.make;

class multiply_conjugate_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_conjugate_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> multiply_conjugate_cc_sptr
        __init__(self, multiply_conjugate_cc p) -> multiply_conjugate_cc_sptr
        """
        this = _blocks_swig.new_multiply_conjugate_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> multiply_conjugate_cc"""
        return _blocks_swig.multiply_conjugate_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_multiply_conjugate_cc_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.multiply_conjugate_cc_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_conjugate_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_conjugate_cc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.multiply_conjugate_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.multiply_conjugate_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.multiply_conjugate_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.multiply_conjugate_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.multiply_conjugate_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.multiply_conjugate_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.multiply_conjugate_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.multiply_conjugate_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.multiply_conjugate_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.multiply_conjugate_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.multiply_conjugate_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_conjugate_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.multiply_conjugate_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_conjugate_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.multiply_conjugate_cc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.multiply_conjugate_cc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.multiply_conjugate_cc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.multiply_conjugate_cc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.multiply_conjugate_cc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.multiply_conjugate_cc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.multiply_conjugate_cc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.multiply_conjugate_cc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.multiply_conjugate_cc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.multiply_conjugate_cc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.multiply_conjugate_cc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.multiply_conjugate_cc_sptr__handle_call(self, *args, **kwargs)

multiply_conjugate_cc_sptr_swigregister = _blocks_swig.multiply_conjugate_cc_sptr_swigregister
multiply_conjugate_cc_sptr_swigregister(multiply_conjugate_cc_sptr)

multiply_conjugate_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_conjugate_cc = multiply_conjugate_cc.make;

class multiply_const_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> multiply_const_ss_sptr
        __init__(self, multiply_const_ss p) -> multiply_const_ss_sptr
        """
        this = _blocks_swig.new_multiply_const_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> multiply_const_ss"""
        return _blocks_swig.multiply_const_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_multiply_const_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, short k) -> sptr"""
        return _blocks_swig.multiply_const_ss_sptr_make(self, *args, **kwargs)

    def k(self):
        """k(self) -> short"""
        return _blocks_swig.multiply_const_ss_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, short k)"""
        return _blocks_swig.multiply_const_ss_sptr_set_k(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_const_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_const_ss_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.multiply_const_ss_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.multiply_const_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.multiply_const_ss_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.multiply_const_ss_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.multiply_const_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.multiply_const_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.multiply_const_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.multiply_const_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.multiply_const_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.multiply_const_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.multiply_const_ss_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_const_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.multiply_const_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_const_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.multiply_const_ss_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.multiply_const_ss_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.multiply_const_ss_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.multiply_const_ss_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.multiply_const_ss_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.multiply_const_ss_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.multiply_const_ss_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.multiply_const_ss_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.multiply_const_ss_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.multiply_const_ss_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.multiply_const_ss_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.multiply_const_ss_sptr__handle_call(self, *args, **kwargs)

multiply_const_ss_sptr_swigregister = _blocks_swig.multiply_const_ss_sptr_swigregister
multiply_const_ss_sptr_swigregister(multiply_const_ss_sptr)

multiply_const_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_ss = multiply_const_ss.make;

class multiply_const_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> multiply_const_ii_sptr
        __init__(self, multiply_const_ii p) -> multiply_const_ii_sptr
        """
        this = _blocks_swig.new_multiply_const_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> multiply_const_ii"""
        return _blocks_swig.multiply_const_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_multiply_const_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, int k) -> sptr"""
        return _blocks_swig.multiply_const_ii_sptr_make(self, *args, **kwargs)

    def k(self):
        """k(self) -> int"""
        return _blocks_swig.multiply_const_ii_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, int k)"""
        return _blocks_swig.multiply_const_ii_sptr_set_k(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_const_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_const_ii_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.multiply_const_ii_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.multiply_const_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.multiply_const_ii_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.multiply_const_ii_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.multiply_const_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.multiply_const_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.multiply_const_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.multiply_const_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.multiply_const_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.multiply_const_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.multiply_const_ii_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_const_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.multiply_const_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_const_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.multiply_const_ii_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.multiply_const_ii_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.multiply_const_ii_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.multiply_const_ii_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.multiply_const_ii_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.multiply_const_ii_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.multiply_const_ii_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.multiply_const_ii_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.multiply_const_ii_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.multiply_const_ii_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.multiply_const_ii_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.multiply_const_ii_sptr__handle_call(self, *args, **kwargs)

multiply_const_ii_sptr_swigregister = _blocks_swig.multiply_const_ii_sptr_swigregister
multiply_const_ii_sptr_swigregister(multiply_const_ii_sptr)

multiply_const_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_ii = multiply_const_ii.make;

class multiply_const_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> multiply_const_ff_sptr
        __init__(self, multiply_const_ff p) -> multiply_const_ff_sptr
        """
        this = _blocks_swig.new_multiply_const_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> multiply_const_ff"""
        return _blocks_swig.multiply_const_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_multiply_const_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, float k, size_t vlen = 1) -> sptr"""
        return _blocks_swig.multiply_const_ff_sptr_make(self, *args, **kwargs)

    def k(self):
        """k(self) -> float"""
        return _blocks_swig.multiply_const_ff_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, float k)"""
        return _blocks_swig.multiply_const_ff_sptr_set_k(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_const_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_const_ff_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.multiply_const_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.multiply_const_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.multiply_const_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.multiply_const_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.multiply_const_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.multiply_const_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.multiply_const_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.multiply_const_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.multiply_const_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.multiply_const_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.multiply_const_ff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_const_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.multiply_const_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_const_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.multiply_const_ff_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.multiply_const_ff_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.multiply_const_ff_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.multiply_const_ff_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.multiply_const_ff_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.multiply_const_ff_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.multiply_const_ff_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.multiply_const_ff_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.multiply_const_ff_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.multiply_const_ff_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.multiply_const_ff_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.multiply_const_ff_sptr__handle_call(self, *args, **kwargs)

multiply_const_ff_sptr_swigregister = _blocks_swig.multiply_const_ff_sptr_swigregister
multiply_const_ff_sptr_swigregister(multiply_const_ff_sptr)

multiply_const_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_ff = multiply_const_ff.make;

class multiply_const_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> multiply_const_cc_sptr
        __init__(self, multiply_const_cc p) -> multiply_const_cc_sptr
        """
        this = _blocks_swig.new_multiply_const_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> multiply_const_cc"""
        return _blocks_swig.multiply_const_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_multiply_const_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, gr_complex k, size_t vlen = 1) -> sptr"""
        return _blocks_swig.multiply_const_cc_sptr_make(self, *args, **kwargs)

    def k(self):
        """k(self) -> gr_complex"""
        return _blocks_swig.multiply_const_cc_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, gr_complex k)"""
        return _blocks_swig.multiply_const_cc_sptr_set_k(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_const_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_const_cc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.multiply_const_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.multiply_const_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.multiply_const_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.multiply_const_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.multiply_const_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.multiply_const_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.multiply_const_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.multiply_const_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.multiply_const_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.multiply_const_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.multiply_const_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_const_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.multiply_const_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_const_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.multiply_const_cc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.multiply_const_cc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.multiply_const_cc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.multiply_const_cc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.multiply_const_cc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.multiply_const_cc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.multiply_const_cc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.multiply_const_cc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.multiply_const_cc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.multiply_const_cc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.multiply_const_cc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.multiply_const_cc_sptr__handle_call(self, *args, **kwargs)

multiply_const_cc_sptr_swigregister = _blocks_swig.multiply_const_cc_sptr_swigregister
multiply_const_cc_sptr_swigregister(multiply_const_cc_sptr)

multiply_const_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_cc = multiply_const_cc.make;

class multiply_const_vss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_vss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> multiply_const_vss_sptr
        __init__(self, multiply_const_vss p) -> multiply_const_vss_sptr
        """
        this = _blocks_swig.new_multiply_const_vss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> multiply_const_vss"""
        return _blocks_swig.multiply_const_vss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_multiply_const_vss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, __dummy_2__ k) -> sptr"""
        return _blocks_swig.multiply_const_vss_sptr_make(self, *args, **kwargs)

    def k(self):
        """k(self) -> __dummy_2__"""
        return _blocks_swig.multiply_const_vss_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, __dummy_2__ k)"""
        return _blocks_swig.multiply_const_vss_sptr_set_k(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_const_vss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_const_vss_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.multiply_const_vss_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.multiply_const_vss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.multiply_const_vss_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.multiply_const_vss_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.multiply_const_vss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.multiply_const_vss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.multiply_const_vss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.multiply_const_vss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.multiply_const_vss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.multiply_const_vss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.multiply_const_vss_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_const_vss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.multiply_const_vss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_const_vss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.multiply_const_vss_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.multiply_const_vss_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.multiply_const_vss_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.multiply_const_vss_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.multiply_const_vss_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.multiply_const_vss_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.multiply_const_vss_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.multiply_const_vss_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.multiply_const_vss_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.multiply_const_vss_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.multiply_const_vss_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.multiply_const_vss_sptr__handle_call(self, *args, **kwargs)

multiply_const_vss_sptr_swigregister = _blocks_swig.multiply_const_vss_sptr_swigregister
multiply_const_vss_sptr_swigregister(multiply_const_vss_sptr)

multiply_const_vss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_vss = multiply_const_vss.make;

class multiply_const_vii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_vii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> multiply_const_vii_sptr
        __init__(self, multiply_const_vii p) -> multiply_const_vii_sptr
        """
        this = _blocks_swig.new_multiply_const_vii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> multiply_const_vii"""
        return _blocks_swig.multiply_const_vii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_multiply_const_vii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, std::vector<(int,std::allocator<(int)>)> k) -> sptr"""
        return _blocks_swig.multiply_const_vii_sptr_make(self, *args, **kwargs)

    def k(self):
        """k(self) -> std::vector<(int,std::allocator<(int)>)>"""
        return _blocks_swig.multiply_const_vii_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, std::vector<(int,std::allocator<(int)>)> k)"""
        return _blocks_swig.multiply_const_vii_sptr_set_k(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_const_vii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_const_vii_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.multiply_const_vii_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.multiply_const_vii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.multiply_const_vii_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.multiply_const_vii_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.multiply_const_vii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.multiply_const_vii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.multiply_const_vii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.multiply_const_vii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.multiply_const_vii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.multiply_const_vii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.multiply_const_vii_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_const_vii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.multiply_const_vii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_const_vii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.multiply_const_vii_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.multiply_const_vii_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.multiply_const_vii_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.multiply_const_vii_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.multiply_const_vii_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.multiply_const_vii_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.multiply_const_vii_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.multiply_const_vii_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.multiply_const_vii_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.multiply_const_vii_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.multiply_const_vii_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.multiply_const_vii_sptr__handle_call(self, *args, **kwargs)

multiply_const_vii_sptr_swigregister = _blocks_swig.multiply_const_vii_sptr_swigregister
multiply_const_vii_sptr_swigregister(multiply_const_vii_sptr)

multiply_const_vii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_vii = multiply_const_vii.make;

class multiply_const_vff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_vff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> multiply_const_vff_sptr
        __init__(self, multiply_const_vff p) -> multiply_const_vff_sptr
        """
        this = _blocks_swig.new_multiply_const_vff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> multiply_const_vff"""
        return _blocks_swig.multiply_const_vff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_multiply_const_vff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, std::vector<(float,std::allocator<(float)>)> k) -> sptr"""
        return _blocks_swig.multiply_const_vff_sptr_make(self, *args, **kwargs)

    def k(self):
        """k(self) -> std::vector<(float,std::allocator<(float)>)>"""
        return _blocks_swig.multiply_const_vff_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, std::vector<(float,std::allocator<(float)>)> k)"""
        return _blocks_swig.multiply_const_vff_sptr_set_k(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_const_vff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_const_vff_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.multiply_const_vff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.multiply_const_vff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.multiply_const_vff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.multiply_const_vff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.multiply_const_vff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.multiply_const_vff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.multiply_const_vff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.multiply_const_vff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.multiply_const_vff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.multiply_const_vff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.multiply_const_vff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_const_vff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.multiply_const_vff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_const_vff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.multiply_const_vff_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.multiply_const_vff_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.multiply_const_vff_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.multiply_const_vff_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.multiply_const_vff_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.multiply_const_vff_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.multiply_const_vff_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.multiply_const_vff_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.multiply_const_vff_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.multiply_const_vff_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.multiply_const_vff_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.multiply_const_vff_sptr__handle_call(self, *args, **kwargs)

multiply_const_vff_sptr_swigregister = _blocks_swig.multiply_const_vff_sptr_swigregister
multiply_const_vff_sptr_swigregister(multiply_const_vff_sptr)

multiply_const_vff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_vff = multiply_const_vff.make;

class multiply_const_vcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_vcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> multiply_const_vcc_sptr
        __init__(self, multiply_const_vcc p) -> multiply_const_vcc_sptr
        """
        this = _blocks_swig.new_multiply_const_vcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> multiply_const_vcc"""
        return _blocks_swig.multiply_const_vcc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_multiply_const_vcc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> k) -> sptr"""
        return _blocks_swig.multiply_const_vcc_sptr_make(self, *args, **kwargs)

    def k(self):
        """k(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _blocks_swig.multiply_const_vcc_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> k)"""
        return _blocks_swig.multiply_const_vcc_sptr_set_k(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_const_vcc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.multiply_const_vcc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.multiply_const_vcc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.multiply_const_vcc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.multiply_const_vcc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.multiply_const_vcc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.multiply_const_vcc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.multiply_const_vcc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.multiply_const_vcc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.multiply_const_vcc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.multiply_const_vcc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.multiply_const_vcc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.multiply_const_vcc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_const_vcc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.multiply_const_vcc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.multiply_const_vcc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.multiply_const_vcc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.multiply_const_vcc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.multiply_const_vcc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.multiply_const_vcc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.multiply_const_vcc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.multiply_const_vcc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.multiply_const_vcc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.multiply_const_vcc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.multiply_const_vcc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.multiply_const_vcc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.multiply_const_vcc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.multiply_const_vcc_sptr__handle_call(self, *args, **kwargs)

multiply_const_vcc_sptr_swigregister = _blocks_swig.multiply_const_vcc_sptr_swigregister
multiply_const_vcc_sptr_swigregister(multiply_const_vcc_sptr)

multiply_const_vcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_vcc = multiply_const_vcc.make;

class nlog10_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::nlog10_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> nlog10_ff_sptr
        __init__(self, nlog10_ff p) -> nlog10_ff_sptr
        """
        this = _blocks_swig.new_nlog10_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> nlog10_ff"""
        return _blocks_swig.nlog10_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_nlog10_ff_sptr
    __del__ = lambda self : None;
    def make(self, n = 1.0, vlen = 1, k = 0.0):
        """make(self, float n = 1.0, size_t vlen = 1, float k = 0.0) -> sptr"""
        return _blocks_swig.nlog10_ff_sptr_make(self, n, vlen, k)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.nlog10_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.nlog10_ff_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.nlog10_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.nlog10_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.nlog10_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.nlog10_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.nlog10_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.nlog10_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.nlog10_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.nlog10_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.nlog10_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.nlog10_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.nlog10_ff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.nlog10_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.nlog10_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.nlog10_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.nlog10_ff_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.nlog10_ff_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.nlog10_ff_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.nlog10_ff_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.nlog10_ff_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.nlog10_ff_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.nlog10_ff_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.nlog10_ff_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.nlog10_ff_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.nlog10_ff_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.nlog10_ff_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.nlog10_ff_sptr__handle_call(self, *args, **kwargs)

nlog10_ff_sptr_swigregister = _blocks_swig.nlog10_ff_sptr_swigregister
nlog10_ff_sptr_swigregister(nlog10_ff_sptr)

nlog10_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
nlog10_ff = nlog10_ff.make;

class not_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::not_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> not_bb_sptr
        __init__(self, not_bb p) -> not_bb_sptr
        """
        this = _blocks_swig.new_not_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> not_bb"""
        return _blocks_swig.not_bb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_not_bb_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.not_bb_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.not_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.not_bb_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.not_bb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.not_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.not_bb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.not_bb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.not_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.not_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.not_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.not_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.not_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.not_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.not_bb_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.not_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.not_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.not_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.not_bb_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.not_bb_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.not_bb_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.not_bb_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.not_bb_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.not_bb_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.not_bb_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.not_bb_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.not_bb_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.not_bb_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.not_bb_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.not_bb_sptr__handle_call(self, *args, **kwargs)

not_bb_sptr_swigregister = _blocks_swig.not_bb_sptr_swigregister
not_bb_sptr_swigregister(not_bb_sptr)

not_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
not_bb = not_bb.make;

class not_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::not_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> not_ss_sptr
        __init__(self, not_ss p) -> not_ss_sptr
        """
        this = _blocks_swig.new_not_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> not_ss"""
        return _blocks_swig.not_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_not_ss_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.not_ss_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.not_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.not_ss_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.not_ss_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.not_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.not_ss_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.not_ss_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.not_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.not_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.not_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.not_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.not_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.not_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.not_ss_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.not_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.not_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.not_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.not_ss_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.not_ss_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.not_ss_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.not_ss_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.not_ss_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.not_ss_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.not_ss_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.not_ss_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.not_ss_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.not_ss_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.not_ss_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.not_ss_sptr__handle_call(self, *args, **kwargs)

not_ss_sptr_swigregister = _blocks_swig.not_ss_sptr_swigregister
not_ss_sptr_swigregister(not_ss_sptr)

not_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
not_ss = not_ss.make;

class not_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::not_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> not_ii_sptr
        __init__(self, not_ii p) -> not_ii_sptr
        """
        this = _blocks_swig.new_not_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> not_ii"""
        return _blocks_swig.not_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_not_ii_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.not_ii_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.not_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.not_ii_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.not_ii_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.not_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.not_ii_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.not_ii_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.not_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.not_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.not_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.not_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.not_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.not_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.not_ii_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.not_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.not_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.not_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.not_ii_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.not_ii_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.not_ii_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.not_ii_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.not_ii_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.not_ii_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.not_ii_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.not_ii_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.not_ii_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.not_ii_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.not_ii_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.not_ii_sptr__handle_call(self, *args, **kwargs)

not_ii_sptr_swigregister = _blocks_swig.not_ii_sptr_swigregister
not_ii_sptr_swigregister(not_ii_sptr)

not_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
not_ii = not_ii.make;

class patterned_interleaver_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::patterned_interleaver)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> patterned_interleaver_sptr
        __init__(self, patterned_interleaver p) -> patterned_interleaver_sptr
        """
        this = _blocks_swig.new_patterned_interleaver_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> patterned_interleaver"""
        return _blocks_swig.patterned_interleaver_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_patterned_interleaver_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, size_t itemsize, std::vector<(int,std::allocator<(int)>)> pattern) -> sptr"""
        return _blocks_swig.patterned_interleaver_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.patterned_interleaver_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.patterned_interleaver_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.patterned_interleaver_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.patterned_interleaver_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.patterned_interleaver_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.patterned_interleaver_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.patterned_interleaver_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.patterned_interleaver_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.patterned_interleaver_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.patterned_interleaver_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.patterned_interleaver_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.patterned_interleaver_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.patterned_interleaver_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.patterned_interleaver_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.patterned_interleaver_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.patterned_interleaver_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.patterned_interleaver_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.patterned_interleaver_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.patterned_interleaver_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.patterned_interleaver_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.patterned_interleaver_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.patterned_interleaver_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.patterned_interleaver_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.patterned_interleaver_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.patterned_interleaver_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.patterned_interleaver_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.patterned_interleaver_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.patterned_interleaver_sptr__handle_call(self, *args, **kwargs)

patterned_interleaver_sptr_swigregister = _blocks_swig.patterned_interleaver_sptr_swigregister
patterned_interleaver_sptr_swigregister(patterned_interleaver_sptr)

patterned_interleaver_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
patterned_interleaver = patterned_interleaver.make;

class packed_to_unpacked_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::packed_to_unpacked_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> packed_to_unpacked_bb_sptr
        __init__(self, packed_to_unpacked_bb p) -> packed_to_unpacked_bb_sptr
        """
        this = _blocks_swig.new_packed_to_unpacked_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> packed_to_unpacked_bb"""
        return _blocks_swig.packed_to_unpacked_bb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_packed_to_unpacked_bb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, unsigned int bits_per_chunk, gr_endianness_t endianness) -> sptr"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.packed_to_unpacked_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.packed_to_unpacked_bb_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.packed_to_unpacked_bb_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.packed_to_unpacked_bb_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.packed_to_unpacked_bb_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.packed_to_unpacked_bb_sptr__handle_call(self, *args, **kwargs)

packed_to_unpacked_bb_sptr_swigregister = _blocks_swig.packed_to_unpacked_bb_sptr_swigregister
packed_to_unpacked_bb_sptr_swigregister(packed_to_unpacked_bb_sptr)

packed_to_unpacked_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
packed_to_unpacked_bb = packed_to_unpacked_bb.make;

class packed_to_unpacked_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::packed_to_unpacked_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> packed_to_unpacked_ss_sptr
        __init__(self, packed_to_unpacked_ss p) -> packed_to_unpacked_ss_sptr
        """
        this = _blocks_swig.new_packed_to_unpacked_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> packed_to_unpacked_ss"""
        return _blocks_swig.packed_to_unpacked_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_packed_to_unpacked_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, unsigned int bits_per_chunk, gr_endianness_t endianness) -> sptr"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.packed_to_unpacked_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.packed_to_unpacked_ss_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.packed_to_unpacked_ss_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.packed_to_unpacked_ss_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.packed_to_unpacked_ss_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.packed_to_unpacked_ss_sptr__handle_call(self, *args, **kwargs)

packed_to_unpacked_ss_sptr_swigregister = _blocks_swig.packed_to_unpacked_ss_sptr_swigregister
packed_to_unpacked_ss_sptr_swigregister(packed_to_unpacked_ss_sptr)

packed_to_unpacked_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
packed_to_unpacked_ss = packed_to_unpacked_ss.make;

class packed_to_unpacked_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::packed_to_unpacked_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> packed_to_unpacked_ii_sptr
        __init__(self, packed_to_unpacked_ii p) -> packed_to_unpacked_ii_sptr
        """
        this = _blocks_swig.new_packed_to_unpacked_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> packed_to_unpacked_ii"""
        return _blocks_swig.packed_to_unpacked_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_packed_to_unpacked_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, unsigned int bits_per_chunk, gr_endianness_t endianness) -> sptr"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.packed_to_unpacked_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.packed_to_unpacked_ii_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.packed_to_unpacked_ii_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.packed_to_unpacked_ii_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.packed_to_unpacked_ii_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.packed_to_unpacked_ii_sptr__handle_call(self, *args, **kwargs)

packed_to_unpacked_ii_sptr_swigregister = _blocks_swig.packed_to_unpacked_ii_sptr_swigregister
packed_to_unpacked_ii_sptr_swigregister(packed_to_unpacked_ii_sptr)

packed_to_unpacked_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
packed_to_unpacked_ii = packed_to_unpacked_ii.make;

class peak_detector2_fb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::peak_detector2_fb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> peak_detector2_fb_sptr
        __init__(self, peak_detector2_fb p) -> peak_detector2_fb_sptr
        """
        this = _blocks_swig.new_peak_detector2_fb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> peak_detector2_fb"""
        return _blocks_swig.peak_detector2_fb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_peak_detector2_fb_sptr
    __del__ = lambda self : None;
    def make(self, threshold_factor_rise = 7, look_ahead = 1000, alpha = 0.001):
        """
        make(self, float threshold_factor_rise = 7, int look_ahead = 1000, 
            float alpha = 0.001) -> sptr
        """
        return _blocks_swig.peak_detector2_fb_sptr_make(self, threshold_factor_rise, look_ahead, alpha)

    def set_threshold_factor_rise(self, *args, **kwargs):
        """set_threshold_factor_rise(self, float thr)"""
        return _blocks_swig.peak_detector2_fb_sptr_set_threshold_factor_rise(self, *args, **kwargs)

    def set_look_ahead(self, *args, **kwargs):
        """set_look_ahead(self, int look)"""
        return _blocks_swig.peak_detector2_fb_sptr_set_look_ahead(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, int alpha)"""
        return _blocks_swig.peak_detector2_fb_sptr_set_alpha(self, *args, **kwargs)

    def threshold_factor_rise(self):
        """threshold_factor_rise(self) -> float"""
        return _blocks_swig.peak_detector2_fb_sptr_threshold_factor_rise(self)

    def look_ahead(self):
        """look_ahead(self) -> int"""
        return _blocks_swig.peak_detector2_fb_sptr_look_ahead(self)

    def alpha(self):
        """alpha(self) -> float"""
        return _blocks_swig.peak_detector2_fb_sptr_alpha(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.peak_detector2_fb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.peak_detector2_fb_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.peak_detector2_fb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.peak_detector2_fb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.peak_detector2_fb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.peak_detector2_fb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.peak_detector2_fb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.peak_detector2_fb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.peak_detector2_fb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.peak_detector2_fb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.peak_detector2_fb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.peak_detector2_fb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.peak_detector2_fb_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.peak_detector2_fb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.peak_detector2_fb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.peak_detector2_fb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.peak_detector2_fb_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.peak_detector2_fb_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.peak_detector2_fb_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.peak_detector2_fb_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.peak_detector2_fb_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.peak_detector2_fb_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.peak_detector2_fb_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.peak_detector2_fb_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.peak_detector2_fb_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.peak_detector2_fb_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.peak_detector2_fb_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.peak_detector2_fb_sptr__handle_call(self, *args, **kwargs)

peak_detector2_fb_sptr_swigregister = _blocks_swig.peak_detector2_fb_sptr_swigregister
peak_detector2_fb_sptr_swigregister(peak_detector2_fb_sptr)

peak_detector2_fb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
peak_detector2_fb = peak_detector2_fb.make;

class or_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::or_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> or_bb_sptr
        __init__(self, or_bb p) -> or_bb_sptr
        """
        this = _blocks_swig.new_or_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> or_bb"""
        return _blocks_swig.or_bb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_or_bb_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.or_bb_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.or_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.or_bb_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.or_bb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.or_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.or_bb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.or_bb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.or_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.or_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.or_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.or_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.or_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.or_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.or_bb_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.or_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.or_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.or_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.or_bb_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.or_bb_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.or_bb_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.or_bb_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.or_bb_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.or_bb_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.or_bb_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.or_bb_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.or_bb_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.or_bb_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.or_bb_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.or_bb_sptr__handle_call(self, *args, **kwargs)

or_bb_sptr_swigregister = _blocks_swig.or_bb_sptr_swigregister
or_bb_sptr_swigregister(or_bb_sptr)

or_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
or_bb = or_bb.make;

class or_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::or_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> or_ss_sptr
        __init__(self, or_ss p) -> or_ss_sptr
        """
        this = _blocks_swig.new_or_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> or_ss"""
        return _blocks_swig.or_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_or_ss_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.or_ss_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.or_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.or_ss_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.or_ss_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.or_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.or_ss_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.or_ss_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.or_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.or_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.or_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.or_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.or_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.or_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.or_ss_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.or_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.or_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.or_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.or_ss_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.or_ss_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.or_ss_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.or_ss_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.or_ss_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.or_ss_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.or_ss_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.or_ss_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.or_ss_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.or_ss_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.or_ss_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.or_ss_sptr__handle_call(self, *args, **kwargs)

or_ss_sptr_swigregister = _blocks_swig.or_ss_sptr_swigregister
or_ss_sptr_swigregister(or_ss_sptr)

or_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
or_ss = or_ss.make;

class or_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::or_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> or_ii_sptr
        __init__(self, or_ii p) -> or_ii_sptr
        """
        this = _blocks_swig.new_or_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> or_ii"""
        return _blocks_swig.or_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_or_ii_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.or_ii_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.or_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.or_ii_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.or_ii_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.or_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.or_ii_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.or_ii_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.or_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.or_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.or_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.or_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.or_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.or_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.or_ii_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.or_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.or_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.or_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.or_ii_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.or_ii_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.or_ii_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.or_ii_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.or_ii_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.or_ii_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.or_ii_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.or_ii_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.or_ii_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.or_ii_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.or_ii_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.or_ii_sptr__handle_call(self, *args, **kwargs)

or_ii_sptr_swigregister = _blocks_swig.or_ii_sptr_swigregister
or_ii_sptr_swigregister(or_ii_sptr)

or_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
or_ii = or_ii.make;

class regenerate_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::regenerate_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> regenerate_bb_sptr
        __init__(self, regenerate_bb p) -> regenerate_bb_sptr
        """
        this = _blocks_swig.new_regenerate_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> regenerate_bb"""
        return _blocks_swig.regenerate_bb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_regenerate_bb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, int period, unsigned int max_regen = 500) -> sptr"""
        return _blocks_swig.regenerate_bb_sptr_make(self, *args, **kwargs)

    def set_max_regen(self, *args, **kwargs):
        """set_max_regen(self, unsigned int regen)"""
        return _blocks_swig.regenerate_bb_sptr_set_max_regen(self, *args, **kwargs)

    def set_period(self, *args, **kwargs):
        """set_period(self, int period)"""
        return _blocks_swig.regenerate_bb_sptr_set_period(self, *args, **kwargs)

    def max_regen(self):
        """max_regen(self) -> unsigned int"""
        return _blocks_swig.regenerate_bb_sptr_max_regen(self)

    def period(self):
        """period(self) -> int"""
        return _blocks_swig.regenerate_bb_sptr_period(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.regenerate_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.regenerate_bb_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.regenerate_bb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.regenerate_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.regenerate_bb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.regenerate_bb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.regenerate_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.regenerate_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.regenerate_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.regenerate_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.regenerate_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.regenerate_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.regenerate_bb_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.regenerate_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.regenerate_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.regenerate_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.regenerate_bb_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.regenerate_bb_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.regenerate_bb_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.regenerate_bb_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.regenerate_bb_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.regenerate_bb_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.regenerate_bb_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.regenerate_bb_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.regenerate_bb_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.regenerate_bb_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.regenerate_bb_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.regenerate_bb_sptr__handle_call(self, *args, **kwargs)

regenerate_bb_sptr_swigregister = _blocks_swig.regenerate_bb_sptr_swigregister
regenerate_bb_sptr_swigregister(regenerate_bb_sptr)

regenerate_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
regenerate_bb = regenerate_bb.make;

class repeat_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::repeat)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> repeat_sptr
        __init__(self, repeat p) -> repeat_sptr
        """
        this = _blocks_swig.new_repeat_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> repeat"""
        return _blocks_swig.repeat_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_repeat_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, size_t itemsize, int repeat) -> sptr"""
        return _blocks_swig.repeat_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.repeat_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.repeat_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.repeat_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.repeat_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.repeat_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.repeat_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.repeat_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.repeat_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.repeat_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.repeat_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.repeat_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.repeat_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.repeat_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.repeat_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.repeat_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.repeat_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.repeat_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.repeat_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.repeat_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.repeat_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.repeat_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.repeat_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.repeat_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.repeat_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.repeat_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.repeat_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.repeat_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.repeat_sptr__handle_call(self, *args, **kwargs)

repeat_sptr_swigregister = _blocks_swig.repeat_sptr_swigregister
repeat_sptr_swigregister(repeat_sptr)

repeat_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
repeat = repeat.make;

class rms_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::rms_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rms_cf_sptr
        __init__(self, rms_cf p) -> rms_cf_sptr
        """
        this = _blocks_swig.new_rms_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> rms_cf"""
        return _blocks_swig.rms_cf_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_rms_cf_sptr
    __del__ = lambda self : None;
    def make(self, alpha = 0.0001):
        """make(self, double alpha = 0.0001) -> sptr"""
        return _blocks_swig.rms_cf_sptr_make(self, alpha)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _blocks_swig.rms_cf_sptr_set_alpha(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.rms_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.rms_cf_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.rms_cf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.rms_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.rms_cf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.rms_cf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.rms_cf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.rms_cf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.rms_cf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.rms_cf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.rms_cf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.rms_cf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.rms_cf_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.rms_cf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.rms_cf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.rms_cf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.rms_cf_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.rms_cf_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.rms_cf_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.rms_cf_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.rms_cf_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.rms_cf_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.rms_cf_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.rms_cf_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.rms_cf_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.rms_cf_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.rms_cf_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.rms_cf_sptr__handle_call(self, *args, **kwargs)

rms_cf_sptr_swigregister = _blocks_swig.rms_cf_sptr_swigregister
rms_cf_sptr_swigregister(rms_cf_sptr)

rms_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rms_cf = rms_cf.make;

class rms_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::rms_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rms_ff_sptr
        __init__(self, rms_ff p) -> rms_ff_sptr
        """
        this = _blocks_swig.new_rms_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> rms_ff"""
        return _blocks_swig.rms_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_rms_ff_sptr
    __del__ = lambda self : None;
    def make(self, alpha = 0.0001):
        """make(self, double alpha = 0.0001) -> sptr"""
        return _blocks_swig.rms_ff_sptr_make(self, alpha)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _blocks_swig.rms_ff_sptr_set_alpha(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.rms_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.rms_ff_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.rms_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.rms_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.rms_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.rms_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.rms_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.rms_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.rms_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.rms_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.rms_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.rms_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.rms_ff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.rms_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.rms_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.rms_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.rms_ff_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.rms_ff_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.rms_ff_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.rms_ff_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.rms_ff_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.rms_ff_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.rms_ff_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.rms_ff_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.rms_ff_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.rms_ff_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.rms_ff_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.rms_ff_sptr__handle_call(self, *args, **kwargs)

rms_ff_sptr_swigregister = _blocks_swig.rms_ff_sptr_swigregister
rms_ff_sptr_swigregister(rms_ff_sptr)

rms_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rms_ff = rms_ff.make;

class short_to_char_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::short_to_char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> short_to_char_sptr
        __init__(self, short_to_char p) -> short_to_char_sptr
        """
        this = _blocks_swig.new_short_to_char_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> short_to_char"""
        return _blocks_swig.short_to_char_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_short_to_char_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.short_to_char_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.short_to_char_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.short_to_char_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.short_to_char_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.short_to_char_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.short_to_char_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.short_to_char_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.short_to_char_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.short_to_char_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.short_to_char_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.short_to_char_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.short_to_char_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.short_to_char_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.short_to_char_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.short_to_char_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.short_to_char_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.short_to_char_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.short_to_char_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.short_to_char_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.short_to_char_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.short_to_char_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.short_to_char_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.short_to_char_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.short_to_char_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.short_to_char_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.short_to_char_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.short_to_char_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.short_to_char_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.short_to_char_sptr__handle_call(self, *args, **kwargs)

short_to_char_sptr_swigregister = _blocks_swig.short_to_char_sptr_swigregister
short_to_char_sptr_swigregister(short_to_char_sptr)

short_to_char_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
short_to_char = short_to_char.make;

class short_to_float_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::short_to_float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> short_to_float_sptr
        __init__(self, short_to_float p) -> short_to_float_sptr
        """
        this = _blocks_swig.new_short_to_float_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> short_to_float"""
        return _blocks_swig.short_to_float_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_short_to_float_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1, scale = 1.0):
        """make(self, size_t vlen = 1, float scale = 1.0) -> sptr"""
        return _blocks_swig.short_to_float_sptr_make(self, vlen, scale)

    def scale(self):
        """scale(self) -> float"""
        return _blocks_swig.short_to_float_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """set_scale(self, float scale)"""
        return _blocks_swig.short_to_float_sptr_set_scale(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.short_to_float_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.short_to_float_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.short_to_float_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.short_to_float_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.short_to_float_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.short_to_float_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.short_to_float_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.short_to_float_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.short_to_float_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.short_to_float_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.short_to_float_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.short_to_float_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.short_to_float_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.short_to_float_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.short_to_float_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.short_to_float_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.short_to_float_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.short_to_float_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.short_to_float_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.short_to_float_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.short_to_float_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.short_to_float_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.short_to_float_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.short_to_float_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.short_to_float_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.short_to_float_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.short_to_float_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.short_to_float_sptr__handle_call(self, *args, **kwargs)

short_to_float_sptr_swigregister = _blocks_swig.short_to_float_sptr_swigregister
short_to_float_sptr_swigregister(short_to_float_sptr)

short_to_float_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
short_to_float = short_to_float.make;

class stream_mux_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::stream_mux)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> stream_mux_sptr
        __init__(self, stream_mux p) -> stream_mux_sptr
        """
        this = _blocks_swig.new_stream_mux_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> stream_mux"""
        return _blocks_swig.stream_mux_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_stream_mux_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, size_t itemsize, std::vector<(int,std::allocator<(int)>)> lengths) -> sptr"""
        return _blocks_swig.stream_mux_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.stream_mux_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.stream_mux_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.stream_mux_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.stream_mux_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.stream_mux_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.stream_mux_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.stream_mux_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.stream_mux_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.stream_mux_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.stream_mux_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.stream_mux_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.stream_mux_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.stream_mux_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.stream_mux_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.stream_mux_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.stream_mux_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.stream_mux_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.stream_mux_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.stream_mux_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.stream_mux_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.stream_mux_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.stream_mux_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.stream_mux_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.stream_mux_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.stream_mux_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.stream_mux_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.stream_mux_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.stream_mux_sptr__handle_call(self, *args, **kwargs)

stream_mux_sptr_swigregister = _blocks_swig.stream_mux_sptr_swigregister
stream_mux_sptr_swigregister(stream_mux_sptr)

stream_mux_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
stream_mux = stream_mux.make;

class stream_to_streams_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::stream_to_streams)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> stream_to_streams_sptr
        __init__(self, stream_to_streams p) -> stream_to_streams_sptr
        """
        this = _blocks_swig.new_stream_to_streams_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> stream_to_streams"""
        return _blocks_swig.stream_to_streams_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_stream_to_streams_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, size_t itemsize, size_t nstreams) -> sptr"""
        return _blocks_swig.stream_to_streams_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.stream_to_streams_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.stream_to_streams_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.stream_to_streams_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.stream_to_streams_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.stream_to_streams_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.stream_to_streams_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.stream_to_streams_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.stream_to_streams_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.stream_to_streams_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.stream_to_streams_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.stream_to_streams_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.stream_to_streams_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.stream_to_streams_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.stream_to_streams_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.stream_to_streams_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.stream_to_streams_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.stream_to_streams_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.stream_to_streams_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.stream_to_streams_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.stream_to_streams_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.stream_to_streams_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.stream_to_streams_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.stream_to_streams_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.stream_to_streams_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.stream_to_streams_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.stream_to_streams_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.stream_to_streams_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.stream_to_streams_sptr__handle_call(self, *args, **kwargs)

stream_to_streams_sptr_swigregister = _blocks_swig.stream_to_streams_sptr_swigregister
stream_to_streams_sptr_swigregister(stream_to_streams_sptr)

stream_to_streams_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
stream_to_streams = stream_to_streams.make;

class stream_to_vector_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::stream_to_vector)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> stream_to_vector_sptr
        __init__(self, stream_to_vector p) -> stream_to_vector_sptr
        """
        this = _blocks_swig.new_stream_to_vector_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> stream_to_vector"""
        return _blocks_swig.stream_to_vector_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_stream_to_vector_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, size_t itemsize, size_t nitems_per_block) -> sptr"""
        return _blocks_swig.stream_to_vector_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.stream_to_vector_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.stream_to_vector_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.stream_to_vector_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.stream_to_vector_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.stream_to_vector_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.stream_to_vector_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.stream_to_vector_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.stream_to_vector_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.stream_to_vector_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.stream_to_vector_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.stream_to_vector_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.stream_to_vector_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.stream_to_vector_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.stream_to_vector_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.stream_to_vector_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.stream_to_vector_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.stream_to_vector_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.stream_to_vector_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.stream_to_vector_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.stream_to_vector_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.stream_to_vector_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.stream_to_vector_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.stream_to_vector_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.stream_to_vector_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.stream_to_vector_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.stream_to_vector_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.stream_to_vector_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.stream_to_vector_sptr__handle_call(self, *args, **kwargs)

stream_to_vector_sptr_swigregister = _blocks_swig.stream_to_vector_sptr_swigregister
stream_to_vector_sptr_swigregister(stream_to_vector_sptr)

stream_to_vector_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
stream_to_vector = stream_to_vector.make;

class streams_to_stream_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::streams_to_stream)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> streams_to_stream_sptr
        __init__(self, streams_to_stream p) -> streams_to_stream_sptr
        """
        this = _blocks_swig.new_streams_to_stream_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> streams_to_stream"""
        return _blocks_swig.streams_to_stream_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_streams_to_stream_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, size_t itemsize, size_t nstreams) -> sptr"""
        return _blocks_swig.streams_to_stream_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.streams_to_stream_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.streams_to_stream_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.streams_to_stream_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.streams_to_stream_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.streams_to_stream_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.streams_to_stream_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.streams_to_stream_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.streams_to_stream_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.streams_to_stream_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.streams_to_stream_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.streams_to_stream_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.streams_to_stream_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.streams_to_stream_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.streams_to_stream_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.streams_to_stream_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.streams_to_stream_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.streams_to_stream_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.streams_to_stream_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.streams_to_stream_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.streams_to_stream_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.streams_to_stream_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.streams_to_stream_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.streams_to_stream_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.streams_to_stream_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.streams_to_stream_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.streams_to_stream_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.streams_to_stream_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.streams_to_stream_sptr__handle_call(self, *args, **kwargs)

streams_to_stream_sptr_swigregister = _blocks_swig.streams_to_stream_sptr_swigregister
streams_to_stream_sptr_swigregister(streams_to_stream_sptr)

streams_to_stream_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
streams_to_stream = streams_to_stream.make;

class streams_to_vector_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::streams_to_vector)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> streams_to_vector_sptr
        __init__(self, streams_to_vector p) -> streams_to_vector_sptr
        """
        this = _blocks_swig.new_streams_to_vector_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> streams_to_vector"""
        return _blocks_swig.streams_to_vector_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_streams_to_vector_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, size_t itemsize, size_t nstreams) -> sptr"""
        return _blocks_swig.streams_to_vector_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.streams_to_vector_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.streams_to_vector_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.streams_to_vector_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.streams_to_vector_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.streams_to_vector_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.streams_to_vector_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.streams_to_vector_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.streams_to_vector_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.streams_to_vector_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.streams_to_vector_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.streams_to_vector_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.streams_to_vector_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.streams_to_vector_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.streams_to_vector_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.streams_to_vector_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.streams_to_vector_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.streams_to_vector_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.streams_to_vector_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.streams_to_vector_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.streams_to_vector_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.streams_to_vector_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.streams_to_vector_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.streams_to_vector_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.streams_to_vector_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.streams_to_vector_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.streams_to_vector_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.streams_to_vector_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.streams_to_vector_sptr__handle_call(self, *args, **kwargs)

streams_to_vector_sptr_swigregister = _blocks_swig.streams_to_vector_sptr_swigregister
streams_to_vector_sptr_swigregister(streams_to_vector_sptr)

streams_to_vector_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
streams_to_vector = streams_to_vector.make;

class stretch_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::stretch_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> stretch_ff_sptr
        __init__(self, stretch_ff p) -> stretch_ff_sptr
        """
        this = _blocks_swig.new_stretch_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> stretch_ff"""
        return _blocks_swig.stretch_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_stretch_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, float lo, size_t vlen = 1) -> sptr"""
        return _blocks_swig.stretch_ff_sptr_make(self, *args, **kwargs)

    def lo(self):
        """lo(self) -> float"""
        return _blocks_swig.stretch_ff_sptr_lo(self)

    def set_lo(self, *args, **kwargs):
        """set_lo(self, float lo)"""
        return _blocks_swig.stretch_ff_sptr_set_lo(self, *args, **kwargs)

    def vlen(self):
        """vlen(self) -> size_t"""
        return _blocks_swig.stretch_ff_sptr_vlen(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.stretch_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.stretch_ff_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.stretch_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.stretch_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.stretch_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.stretch_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.stretch_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.stretch_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.stretch_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.stretch_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.stretch_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.stretch_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.stretch_ff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.stretch_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.stretch_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.stretch_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.stretch_ff_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.stretch_ff_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.stretch_ff_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.stretch_ff_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.stretch_ff_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.stretch_ff_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.stretch_ff_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.stretch_ff_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.stretch_ff_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.stretch_ff_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.stretch_ff_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.stretch_ff_sptr__handle_call(self, *args, **kwargs)

stretch_ff_sptr_swigregister = _blocks_swig.stretch_ff_sptr_swigregister
stretch_ff_sptr_swigregister(stretch_ff_sptr)

stretch_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
stretch_ff = stretch_ff.make;

class sub_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::sub_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> sub_ff_sptr
        __init__(self, sub_ff p) -> sub_ff_sptr
        """
        this = _blocks_swig.new_sub_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> sub_ff"""
        return _blocks_swig.sub_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_sub_ff_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.sub_ff_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.sub_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.sub_ff_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.sub_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.sub_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.sub_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.sub_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.sub_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.sub_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.sub_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.sub_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.sub_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.sub_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.sub_ff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.sub_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.sub_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.sub_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.sub_ff_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.sub_ff_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.sub_ff_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.sub_ff_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.sub_ff_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.sub_ff_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.sub_ff_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.sub_ff_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.sub_ff_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.sub_ff_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.sub_ff_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.sub_ff_sptr__handle_call(self, *args, **kwargs)

sub_ff_sptr_swigregister = _blocks_swig.sub_ff_sptr_swigregister
sub_ff_sptr_swigregister(sub_ff_sptr)

sub_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sub_ff = sub_ff.make;

class sub_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::sub_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> sub_ss_sptr
        __init__(self, sub_ss p) -> sub_ss_sptr
        """
        this = _blocks_swig.new_sub_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> sub_ss"""
        return _blocks_swig.sub_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_sub_ss_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.sub_ss_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.sub_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.sub_ss_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.sub_ss_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.sub_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.sub_ss_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.sub_ss_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.sub_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.sub_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.sub_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.sub_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.sub_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.sub_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.sub_ss_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.sub_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.sub_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.sub_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.sub_ss_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.sub_ss_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.sub_ss_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.sub_ss_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.sub_ss_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.sub_ss_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.sub_ss_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.sub_ss_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.sub_ss_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.sub_ss_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.sub_ss_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.sub_ss_sptr__handle_call(self, *args, **kwargs)

sub_ss_sptr_swigregister = _blocks_swig.sub_ss_sptr_swigregister
sub_ss_sptr_swigregister(sub_ss_sptr)

sub_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sub_ss = sub_ss.make;

class sub_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::sub_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> sub_ii_sptr
        __init__(self, sub_ii p) -> sub_ii_sptr
        """
        this = _blocks_swig.new_sub_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> sub_ii"""
        return _blocks_swig.sub_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_sub_ii_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.sub_ii_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.sub_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.sub_ii_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.sub_ii_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.sub_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.sub_ii_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.sub_ii_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.sub_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.sub_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.sub_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.sub_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.sub_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.sub_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.sub_ii_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.sub_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.sub_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.sub_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.sub_ii_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.sub_ii_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.sub_ii_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.sub_ii_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.sub_ii_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.sub_ii_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.sub_ii_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.sub_ii_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.sub_ii_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.sub_ii_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.sub_ii_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.sub_ii_sptr__handle_call(self, *args, **kwargs)

sub_ii_sptr_swigregister = _blocks_swig.sub_ii_sptr_swigregister
sub_ii_sptr_swigregister(sub_ii_sptr)

sub_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sub_ii = sub_ii.make;

class sub_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::sub_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> sub_cc_sptr
        __init__(self, sub_cc p) -> sub_cc_sptr
        """
        this = _blocks_swig.new_sub_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> sub_cc"""
        return _blocks_swig.sub_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_sub_cc_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.sub_cc_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.sub_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.sub_cc_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.sub_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.sub_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.sub_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.sub_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.sub_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.sub_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.sub_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.sub_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.sub_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.sub_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.sub_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.sub_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.sub_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.sub_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.sub_cc_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.sub_cc_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.sub_cc_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.sub_cc_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.sub_cc_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.sub_cc_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.sub_cc_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.sub_cc_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.sub_cc_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.sub_cc_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.sub_cc_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.sub_cc_sptr__handle_call(self, *args, **kwargs)

sub_cc_sptr_swigregister = _blocks_swig.sub_cc_sptr_swigregister
sub_cc_sptr_swigregister(sub_cc_sptr)

sub_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sub_cc = sub_cc.make;

class threshold_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::threshold_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> threshold_ff_sptr
        __init__(self, threshold_ff p) -> threshold_ff_sptr
        """
        this = _blocks_swig.new_threshold_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> threshold_ff"""
        return _blocks_swig.threshold_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_threshold_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, float lo, float hi, float initial_state = 0) -> sptr"""
        return _blocks_swig.threshold_ff_sptr_make(self, *args, **kwargs)

    def lo(self):
        """lo(self) -> float"""
        return _blocks_swig.threshold_ff_sptr_lo(self)

    def set_lo(self, *args, **kwargs):
        """set_lo(self, float lo)"""
        return _blocks_swig.threshold_ff_sptr_set_lo(self, *args, **kwargs)

    def hi(self):
        """hi(self) -> float"""
        return _blocks_swig.threshold_ff_sptr_hi(self)

    def set_hi(self, *args, **kwargs):
        """set_hi(self, float hi)"""
        return _blocks_swig.threshold_ff_sptr_set_hi(self, *args, **kwargs)

    def last_state(self):
        """last_state(self) -> float"""
        return _blocks_swig.threshold_ff_sptr_last_state(self)

    def set_last_state(self, *args, **kwargs):
        """set_last_state(self, float last_state)"""
        return _blocks_swig.threshold_ff_sptr_set_last_state(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.threshold_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.threshold_ff_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.threshold_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.threshold_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.threshold_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.threshold_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.threshold_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.threshold_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.threshold_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.threshold_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.threshold_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.threshold_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.threshold_ff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.threshold_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.threshold_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.threshold_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.threshold_ff_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.threshold_ff_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.threshold_ff_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.threshold_ff_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.threshold_ff_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.threshold_ff_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.threshold_ff_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.threshold_ff_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.threshold_ff_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.threshold_ff_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.threshold_ff_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.threshold_ff_sptr__handle_call(self, *args, **kwargs)

threshold_ff_sptr_swigregister = _blocks_swig.threshold_ff_sptr_swigregister
threshold_ff_sptr_swigregister(threshold_ff_sptr)

threshold_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
threshold_ff = threshold_ff.make;

class throttle_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::throttle)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> throttle_sptr
        __init__(self, throttle p) -> throttle_sptr
        """
        this = _blocks_swig.new_throttle_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> throttle"""
        return _blocks_swig.throttle_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_throttle_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, size_t itemsize, double samples_per_sec) -> sptr"""
        return _blocks_swig.throttle_sptr_make(self, *args, **kwargs)

    def set_sample_rate(self, *args, **kwargs):
        """set_sample_rate(self, double rate)"""
        return _blocks_swig.throttle_sptr_set_sample_rate(self, *args, **kwargs)

    def sample_rate(self):
        """sample_rate(self) -> double"""
        return _blocks_swig.throttle_sptr_sample_rate(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.throttle_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.throttle_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.throttle_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.throttle_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.throttle_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.throttle_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.throttle_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.throttle_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.throttle_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.throttle_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.throttle_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.throttle_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.throttle_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.throttle_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.throttle_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.throttle_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.throttle_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.throttle_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.throttle_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.throttle_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.throttle_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.throttle_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.throttle_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.throttle_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.throttle_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.throttle_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.throttle_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.throttle_sptr__handle_call(self, *args, **kwargs)

throttle_sptr_swigregister = _blocks_swig.throttle_sptr_swigregister
throttle_sptr_swigregister(throttle_sptr)

throttle_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
throttle = throttle.make;

class transcendental_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::transcendental)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> transcendental_sptr
        __init__(self, transcendental p) -> transcendental_sptr
        """
        this = _blocks_swig.new_transcendental_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> transcendental"""
        return _blocks_swig.transcendental_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_transcendental_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, string name, string type = "float") -> sptr"""
        return _blocks_swig.transcendental_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.transcendental_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.transcendental_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.transcendental_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.transcendental_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.transcendental_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.transcendental_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.transcendental_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.transcendental_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.transcendental_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.transcendental_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.transcendental_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.transcendental_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.transcendental_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.transcendental_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.transcendental_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.transcendental_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.transcendental_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.transcendental_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.transcendental_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.transcendental_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.transcendental_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.transcendental_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.transcendental_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.transcendental_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.transcendental_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.transcendental_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.transcendental_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.transcendental_sptr__handle_call(self, *args, **kwargs)

transcendental_sptr_swigregister = _blocks_swig.transcendental_sptr_swigregister
transcendental_sptr_swigregister(transcendental_sptr)

transcendental_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
transcendental = transcendental.make;

class uchar_to_float_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::uchar_to_float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> uchar_to_float_sptr
        __init__(self, uchar_to_float p) -> uchar_to_float_sptr
        """
        this = _blocks_swig.new_uchar_to_float_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> uchar_to_float"""
        return _blocks_swig.uchar_to_float_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_uchar_to_float_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(self) -> sptr"""
        return _blocks_swig.uchar_to_float_sptr_make(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.uchar_to_float_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.uchar_to_float_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.uchar_to_float_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.uchar_to_float_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.uchar_to_float_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.uchar_to_float_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.uchar_to_float_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.uchar_to_float_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.uchar_to_float_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.uchar_to_float_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.uchar_to_float_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.uchar_to_float_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.uchar_to_float_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.uchar_to_float_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.uchar_to_float_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.uchar_to_float_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.uchar_to_float_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.uchar_to_float_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.uchar_to_float_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.uchar_to_float_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.uchar_to_float_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.uchar_to_float_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.uchar_to_float_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.uchar_to_float_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.uchar_to_float_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.uchar_to_float_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.uchar_to_float_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.uchar_to_float_sptr__handle_call(self, *args, **kwargs)

uchar_to_float_sptr_swigregister = _blocks_swig.uchar_to_float_sptr_swigregister
uchar_to_float_sptr_swigregister(uchar_to_float_sptr)

uchar_to_float_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
uchar_to_float = uchar_to_float.make;

class unpacked_to_packed_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::unpacked_to_packed_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> unpacked_to_packed_bb_sptr
        __init__(self, unpacked_to_packed_bb p) -> unpacked_to_packed_bb_sptr
        """
        this = _blocks_swig.new_unpacked_to_packed_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> unpacked_to_packed_bb"""
        return _blocks_swig.unpacked_to_packed_bb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_unpacked_to_packed_bb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, unsigned int bits_per_chunk, gr_endianness_t endianness) -> sptr"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.unpacked_to_packed_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.unpacked_to_packed_bb_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.unpacked_to_packed_bb_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.unpacked_to_packed_bb_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.unpacked_to_packed_bb_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.unpacked_to_packed_bb_sptr__handle_call(self, *args, **kwargs)

unpacked_to_packed_bb_sptr_swigregister = _blocks_swig.unpacked_to_packed_bb_sptr_swigregister
unpacked_to_packed_bb_sptr_swigregister(unpacked_to_packed_bb_sptr)

unpacked_to_packed_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
unpacked_to_packed_bb = unpacked_to_packed_bb.make;

class unpacked_to_packed_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::unpacked_to_packed_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> unpacked_to_packed_ss_sptr
        __init__(self, unpacked_to_packed_ss p) -> unpacked_to_packed_ss_sptr
        """
        this = _blocks_swig.new_unpacked_to_packed_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> unpacked_to_packed_ss"""
        return _blocks_swig.unpacked_to_packed_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_unpacked_to_packed_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, unsigned int bits_per_chunk, gr_endianness_t endianness) -> sptr"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.unpacked_to_packed_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.unpacked_to_packed_ss_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.unpacked_to_packed_ss_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.unpacked_to_packed_ss_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.unpacked_to_packed_ss_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.unpacked_to_packed_ss_sptr__handle_call(self, *args, **kwargs)

unpacked_to_packed_ss_sptr_swigregister = _blocks_swig.unpacked_to_packed_ss_sptr_swigregister
unpacked_to_packed_ss_sptr_swigregister(unpacked_to_packed_ss_sptr)

unpacked_to_packed_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
unpacked_to_packed_ss = unpacked_to_packed_ss.make;

class unpacked_to_packed_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::unpacked_to_packed_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> unpacked_to_packed_ii_sptr
        __init__(self, unpacked_to_packed_ii p) -> unpacked_to_packed_ii_sptr
        """
        this = _blocks_swig.new_unpacked_to_packed_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> unpacked_to_packed_ii"""
        return _blocks_swig.unpacked_to_packed_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_unpacked_to_packed_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, unsigned int bits_per_chunk, gr_endianness_t endianness) -> sptr"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.unpacked_to_packed_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.unpacked_to_packed_ii_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.unpacked_to_packed_ii_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.unpacked_to_packed_ii_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.unpacked_to_packed_ii_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.unpacked_to_packed_ii_sptr__handle_call(self, *args, **kwargs)

unpacked_to_packed_ii_sptr_swigregister = _blocks_swig.unpacked_to_packed_ii_sptr_swigregister
unpacked_to_packed_ii_sptr_swigregister(unpacked_to_packed_ii_sptr)

unpacked_to_packed_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
unpacked_to_packed_ii = unpacked_to_packed_ii.make;

class vector_to_stream_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::vector_to_stream)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vector_to_stream_sptr
        __init__(self, vector_to_stream p) -> vector_to_stream_sptr
        """
        this = _blocks_swig.new_vector_to_stream_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> vector_to_stream"""
        return _blocks_swig.vector_to_stream_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_vector_to_stream_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, size_t itemsize, size_t nitems_per_block) -> sptr"""
        return _blocks_swig.vector_to_stream_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.vector_to_stream_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.vector_to_stream_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.vector_to_stream_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.vector_to_stream_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.vector_to_stream_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.vector_to_stream_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.vector_to_stream_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.vector_to_stream_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.vector_to_stream_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.vector_to_stream_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.vector_to_stream_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.vector_to_stream_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.vector_to_stream_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.vector_to_stream_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.vector_to_stream_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.vector_to_stream_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.vector_to_stream_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.vector_to_stream_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.vector_to_stream_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.vector_to_stream_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.vector_to_stream_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.vector_to_stream_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.vector_to_stream_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.vector_to_stream_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.vector_to_stream_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.vector_to_stream_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.vector_to_stream_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.vector_to_stream_sptr__handle_call(self, *args, **kwargs)

vector_to_stream_sptr_swigregister = _blocks_swig.vector_to_stream_sptr_swigregister
vector_to_stream_sptr_swigregister(vector_to_stream_sptr)

vector_to_stream_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
vector_to_stream = vector_to_stream.make;

class vector_to_streams_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::vector_to_streams)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vector_to_streams_sptr
        __init__(self, vector_to_streams p) -> vector_to_streams_sptr
        """
        this = _blocks_swig.new_vector_to_streams_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> vector_to_streams"""
        return _blocks_swig.vector_to_streams_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_vector_to_streams_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, size_t itemsize, size_t nstreams) -> sptr"""
        return _blocks_swig.vector_to_streams_sptr_make(self, *args, **kwargs)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.vector_to_streams_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.vector_to_streams_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.vector_to_streams_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.vector_to_streams_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.vector_to_streams_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.vector_to_streams_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.vector_to_streams_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.vector_to_streams_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.vector_to_streams_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.vector_to_streams_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.vector_to_streams_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.vector_to_streams_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.vector_to_streams_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.vector_to_streams_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.vector_to_streams_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.vector_to_streams_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.vector_to_streams_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.vector_to_streams_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.vector_to_streams_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.vector_to_streams_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.vector_to_streams_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.vector_to_streams_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.vector_to_streams_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.vector_to_streams_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.vector_to_streams_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.vector_to_streams_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.vector_to_streams_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.vector_to_streams_sptr__handle_call(self, *args, **kwargs)

vector_to_streams_sptr_swigregister = _blocks_swig.vector_to_streams_sptr_swigregister
vector_to_streams_sptr_swigregister(vector_to_streams_sptr)

vector_to_streams_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
vector_to_streams = vector_to_streams.make;

class xor_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::xor_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> xor_bb_sptr
        __init__(self, xor_bb p) -> xor_bb_sptr
        """
        this = _blocks_swig.new_xor_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> xor_bb"""
        return _blocks_swig.xor_bb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_xor_bb_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.xor_bb_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.xor_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.xor_bb_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.xor_bb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.xor_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.xor_bb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.xor_bb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.xor_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.xor_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.xor_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.xor_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.xor_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.xor_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.xor_bb_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.xor_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.xor_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.xor_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.xor_bb_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.xor_bb_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.xor_bb_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.xor_bb_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.xor_bb_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.xor_bb_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.xor_bb_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.xor_bb_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.xor_bb_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.xor_bb_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.xor_bb_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.xor_bb_sptr__handle_call(self, *args, **kwargs)

xor_bb_sptr_swigregister = _blocks_swig.xor_bb_sptr_swigregister
xor_bb_sptr_swigregister(xor_bb_sptr)

xor_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
xor_bb = xor_bb.make;

class xor_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::xor_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> xor_ss_sptr
        __init__(self, xor_ss p) -> xor_ss_sptr
        """
        this = _blocks_swig.new_xor_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> xor_ss"""
        return _blocks_swig.xor_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_xor_ss_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.xor_ss_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.xor_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.xor_ss_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.xor_ss_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.xor_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.xor_ss_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.xor_ss_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.xor_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.xor_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.xor_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.xor_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.xor_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.xor_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.xor_ss_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.xor_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.xor_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.xor_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.xor_ss_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.xor_ss_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.xor_ss_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.xor_ss_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.xor_ss_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.xor_ss_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.xor_ss_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.xor_ss_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.xor_ss_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.xor_ss_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.xor_ss_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.xor_ss_sptr__handle_call(self, *args, **kwargs)

xor_ss_sptr_swigregister = _blocks_swig.xor_ss_sptr_swigregister
xor_ss_sptr_swigregister(xor_ss_sptr)

xor_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
xor_ss = xor_ss.make;

class xor_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::xor_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> xor_ii_sptr
        __init__(self, xor_ii p) -> xor_ii_sptr
        """
        this = _blocks_swig.new_xor_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> xor_ii"""
        return _blocks_swig.xor_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig.delete_xor_ii_sptr
    __del__ = lambda self : None;
    def make(self, vlen = 1):
        """make(self, size_t vlen = 1) -> sptr"""
        return _blocks_swig.xor_ii_sptr_make(self, vlen)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.xor_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _blocks_swig.xor_ii_sptr_output_signature(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _blocks_swig.xor_ii_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _blocks_swig.xor_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _blocks_swig.xor_ii_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _blocks_swig.xor_ii_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _blocks_swig.xor_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig.xor_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig.xor_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _blocks_swig.xor_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _blocks_swig.xor_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _blocks_swig.xor_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _blocks_swig.xor_ii_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _blocks_swig.xor_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _blocks_swig.xor_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _blocks_swig.xor_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _blocks_swig.xor_ii_sptr_set_min_output_buffer(self, *args)

    def to_element(self, *args):
        """
        to_element(self) -> Element
        to_element(self) -> Element
        """
        return _blocks_swig.xor_ii_sptr_to_element(self, *args)

    def equals(self, *args, **kwargs):
        """equals(self, Element rhs) -> bool"""
        return _blocks_swig.xor_ii_sptr_equals(self, *args, **kwargs)

    def to_string(self):
        """to_string(self) -> string"""
        return _blocks_swig.xor_ii_sptr_to_string(self)

    def global_config(self, *args):
        """
        global_config(self) -> GlobalBlockConfig
        global_config(self) -> GlobalBlockConfig
        """
        return _blocks_swig.xor_ii_sptr_global_config(self, *args)

    def commit_config(self):
        """commit_config(self)"""
        return _blocks_swig.xor_ii_sptr_commit_config(self)

    def set_uid(self, *args, **kwargs):
        """set_uid(self, string uid)"""
        return _blocks_swig.xor_ii_sptr_set_uid(self, *args, **kwargs)

    def get_uid(self):
        """get_uid(self) -> string"""
        return _blocks_swig.xor_ii_sptr_get_uid(self)

    def adopt_element(self, *args, **kwargs):
        """adopt_element(self, string name, Element child)"""
        return _blocks_swig.xor_ii_sptr_adopt_element(self, *args, **kwargs)

    def locate_element(self, *args, **kwargs):
        """locate_element(self, string path) -> Element"""
        return _blocks_swig.xor_ii_sptr_locate_element(self, *args, **kwargs)

    def get_registered_names(self):
        """get_registered_names(self) -> std::vector<(std::string,std::allocator<(std::string)>)>"""
        return _blocks_swig.xor_ii_sptr_get_registered_names(self)

    def _handle_call(self, *args, **kwargs):
        """_handle_call(self, string arg0, PMCC arg1) -> PMCC"""
        return _blocks_swig.xor_ii_sptr__handle_call(self, *args, **kwargs)

xor_ii_sptr_swigregister = _blocks_swig.xor_ii_sptr_swigregister
xor_ii_sptr_swigregister(xor_ii_sptr)

xor_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
xor_ii = xor_ii.make;



