<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="page_affinity" kind="page">
    <compoundname>page_affinity</compoundname>
    <title>Block Thread Affinity</title>
    <detaileddescription>
<sect1 id="page_affinity_1intro">
<title>Introduction</title>
<para>In the thread-per-block scheduler, you can set the block&apos;s core affinity. Each block can be pinned to a group cores or be set back to use the standard kernel scheduler.</para><para>The implementation is done by adding new functions to the GRUEL library:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><ref refid="namespacegruel_1a6de6d44cd75f4cb0231445f6c68597c3" kindref="member" tooltip="a system-dependent typedef for the underlying thread type.">gr_thread_t</ref><sp/><ref refid="namespacegruel_1abf4f0ddbf64290819446901817615831" kindref="member" tooltip="Get the current thread&amp;#39;s ID as a gr_thread_t.">get_current_thread_id</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacegruel_1abd2f6295c747739934dc022251be1807" kindref="member" tooltip="Bind the current thread to a set of cores.">thread_bind_to_processor</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacegruel_1abd2f6295c747739934dc022251be1807" kindref="member" tooltip="Bind the current thread to a set of cores.">thread_bind_to_processor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>int&gt;<sp/>&amp;mask);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacegruel_1abd2f6295c747739934dc022251be1807" kindref="member" tooltip="Bind the current thread to a set of cores.">thread_bind_to_processor</ref>(<ref refid="namespacegruel_1a6de6d44cd75f4cb0231445f6c68597c3" kindref="member" tooltip="a system-dependent typedef for the underlying thread type.">gr_thread_t</ref><sp/><ref refid="namespacegruel_1acf8a10d5cbbe169118cacbc8e8faabf8" kindref="member">thread</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacegruel_1abd2f6295c747739934dc022251be1807" kindref="member" tooltip="Bind the current thread to a set of cores.">thread_bind_to_processor</ref>(<ref refid="namespacegruel_1a6de6d44cd75f4cb0231445f6c68597c3" kindref="member" tooltip="a system-dependent typedef for the underlying thread type.">gr_thread_t</ref><sp/><ref refid="namespacegruel_1acf8a10d5cbbe169118cacbc8e8faabf8" kindref="member">thread</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>int&gt;<sp/>&amp;mask);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacegruel_1afd5e570015c1d84a0e8fec66d181325e" kindref="member" tooltip="Remove any thread-processor affinity for the current thread.">thread_unbind</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacegruel_1afd5e570015c1d84a0e8fec66d181325e" kindref="member" tooltip="Remove any thread-processor affinity for the current thread.">thread_unbind</ref>(<ref refid="namespacegruel_1a6de6d44cd75f4cb0231445f6c68597c3" kindref="member" tooltip="a system-dependent typedef for the underlying thread type.">gr_thread_t</ref><sp/><ref refid="namespacegruel_1acf8a10d5cbbe169118cacbc8e8faabf8" kindref="member">thread</ref>);</highlight></codeline>
</programlisting></para><para>The ability to set a thread&apos;s affinity to a core or groups of cores is not implemented in the Boost thread library, and so we have made our own portability library. In particular, the <ref refid="namespacegruel_1a6de6d44cd75f4cb0231445f6c68597c3" kindref="member">gruel::gr_thread_t</ref> type is defined as the thread type for the given system. The other functions are designed to be portable as well by calling the specific implementation for the thread affinity for a particular platform.</para><para>There are functions to set a thread to a group of cores. If the thread is not given, the current thread is used. If a single number is passed, only that core is set (this is equivalent to a core mask with just a single value).</para><para>Similarly, there are functions to unset the affinity. This practically implements the setting of the thread&apos;s affinity to all possible cores. Again, the function that does not take a thread argument unsets the affinity for the current thread.</para></sect1>
<sect1 id="page_affinity_1affinity_api">
<title>GNU Radio Block API</title>
<para>Each block has two new data members:</para><para><itemizedlist>
<listitem><para>threaded: a boolean value that is true if the block is attached to a thread.</para></listitem><listitem><para>thread: a <ref refid="namespacegruel_1a6de6d44cd75f4cb0231445f6c68597c3" kindref="member">gruel::gr_thread_t</ref> handle to the block&apos;s thread.</para></listitem></itemizedlist>
</para><para>A block can set and unset it&apos;s affinity at any time using the following member functions:</para><para><itemizedlist>
<listitem><para>gr_block::set_processor_affinity(const std::vector&lt;unsigned int&gt; &amp;mask)</para></listitem><listitem><para><ref refid="structgr__block_1ad970b908c19d27123e6bafcd614296c6" kindref="member">gr_block::unset_processor_affinity()</ref></para></listitem></itemizedlist>
</para><para>Where <computeroutput>mask</computeroutput> is a vector of core numbers to set the thread&apos;s affinity to.</para><para>The current core affinity can be retrieved using the member function:</para><para><itemizedlist>
<listitem><para><ref refid="structgr__block_1a3aa2883db9211f3163911c10868f3ae0" kindref="member">gr_block::processor_affinity()</ref></para></listitem></itemizedlist>
</para><para>When set before the flowgraph is started, the scheduler will set the thread&apos;s affinity when it is started. When already running, the block&apos;s affinity will be immediately set. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
