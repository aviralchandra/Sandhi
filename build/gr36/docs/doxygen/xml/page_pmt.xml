<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="page_pmt" kind="page">
    <compoundname>page_pmt</compoundname>
    <title>Polymorphic Types</title>
    <detaileddescription>
<sect1 id="page_affinity_1intro">
<title>Introduction</title>
<para>Polymorphic Types are opaque data types that are designed as generic containers of data that can be safely passed around between blocks and threads in GNU Radio. They are heavily used in the stream tags and message passing interfaces. The most complete list of PMT function is, of course, the source code, specifically the header file <ref refid="pmt_8h" kindref="compound">pmt.h</ref>. This manual page summarizes the most important features and points of PMTs.</para></sect1>
<sect1 id="page_pmt_1datatype">
<title>PMT Data Type</title>
<para>All PMTs are of the type <ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member">pmt::pmt_t</ref>. This is an opaque container and PMT functions must be used to manipulate and even do things like compare PMTs. PMTs are also <emphasis>immutable</emphasis> (except PMT vectors). We never change the data in a PMT; instead, we create a new PMT with the new data. The main reason for this is thread safety. We can pass PMTs as tags and messages between blocks and each receives its own copy that we can read from. However, we can never write to this object, and so if multiple blocks have a reference to the same PMT, there is no possibility of thread-safety issues of one reading the PMT data while another is writing the data. If a block is trying to write new data to a PMT, it actually creates a new PMT to put the data into. Thus we allow easy access to data in the PMT format without worrying about mutex locking and unlocking while manipulating them.</para><para>PMTs can represent the following:</para><para><itemizedlist>
<listitem><para>Boolean values of true/false</para></listitem><listitem><para>Strings (as symbols)</para></listitem><listitem><para>Integers (long and uint64)</para></listitem><listitem><para>Floats (as doubles)</para></listitem><listitem><para>Complex (as two doubles)</para></listitem><listitem><para>Pairs</para></listitem><listitem><para>Tuples</para></listitem><listitem><para>Vectors (of PMTs)</para></listitem><listitem><para>Uniform vectors (of any standard data type)</para></listitem><listitem><para>Dictionaries (list of key:value pairs)</para></listitem><listitem><para>Any (contains a boost::any pointer to hold anything)</para></listitem></itemizedlist>
</para><para>The PMT library also defines a set of functions that operate directly on PMTs such as:</para><para><itemizedlist>
<listitem><para>Equal/equivalence between PMTs</para></listitem><listitem><para>Length (of a tuple or vector)</para></listitem><listitem><para>Map (apply a function to all elements in the PMT)</para></listitem><listitem><para>Reverse</para></listitem><listitem><para>Get a PMT at a position in a list</para></listitem><listitem><para>Serialize and deserialize</para></listitem><listitem><para>Printing</para></listitem></itemizedlist>
</para><para>The constants in the PMT library are:</para><para><itemizedlist>
<listitem><para><ref refid="namespacepmt_1ad41a6c124e405727b4b5ea54247005ac" kindref="member">pmt::PMT_T</ref> - a PMT True</para></listitem><listitem><para><ref refid="namespacepmt_1a92bfd358b0758d5edf5a0fac84ab806f" kindref="member">pmt::PMT_F</ref> - a PMT False</para></listitem><listitem><para><ref refid="namespacepmt_1abacba9cd6ea4261fee4bfb67e7133dad" kindref="member">pmt::PMT_NIL</ref> - an empty PMT (think Python&apos;s &apos;None&apos;)</para></listitem></itemizedlist>
</para></sect1>
<sect1 id="page_pmt_1insert">
<title>Inserting and Extracting Data</title>
<para>Use <ref refid="pmt_8h" kindref="compound">pmt.h</ref> for a complete guide to the list of functions used to create PMTs and get the data from a PMT. When using these functions, remember that while PMTs are opaque and designed to hold any data, the data underneath is still a C++ typed object, and so the right type of set/get function must be used for the data type.</para><para>Typically, a PMT object can be made from a scalar item using a call like &quot;pmt::pmt_from_&lt;type&gt;&quot;. Similarly, when getting data out of a PMT, we use a call like &quot;pmt::pmt_to_&lt;type&gt;&quot;. For example:</para><para><programlisting><codeline><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>1.2345;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt::pmt_t</ref><sp/>pmt_a<sp/>=<sp/><ref refid="namespacepmt_1aa4f8469d075bcccc81553ccb55408265" kindref="member" tooltip="Return the pmt value that represents double x.">pmt::pmt_from_double</ref>(a);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b<sp/>=<sp/><ref refid="namespacepmt_1a936b17e4b5b737fe2483007570b463ec" kindref="member" tooltip="Convert pmt to double if possible.">pmt::pmt_to_double</ref>(pmt_a);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>12345;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt::pmt_t</ref><sp/>pmt_c<sp/>=<sp/><ref refid="namespacepmt_1ac4ac7825fbcc1accdc6a9ada084f5f96" kindref="member" tooltip="Return the pmt value that represents the integer x.">pmt::pmt_from_long</ref>(c);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/><ref refid="namespacepmt_1af7cbc1b15358aa1a816cd86e09e2290f" kindref="member" tooltip="Convert pmt to long if possible.">pmt::pmt_to_long</ref>(pmt_c);</highlight></codeline>
</programlisting></para><para>As a side-note, making a PMT from a complex number is not obvious:</para><para><programlisting><codeline><highlight class="normal">std::complex&lt;double&gt;<sp/>a(1.2,<sp/>3.4);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt::pmt_t</ref><sp/>pmt_a<sp/>=<sp/><ref refid="namespacepmt_1a16f57dcca0c41d06d196d9773a594216" kindref="member" tooltip="Return a complex number constructed of the given real and imaginary parts.">pmt::pmt_make_rectangular</ref>(a.real(),<sp/>b.imag());</highlight></codeline>
<codeline><highlight class="normal">std::complex&lt;double&gt;<sp/>b<sp/>=<sp/><ref refid="namespacepmt_1a72e558a42f5f73705150ade114188abb" kindref="member">pmt::pmt_to_complex</ref>(pmt_a);</highlight></codeline>
</programlisting></para><para>Pairs, dictionaries, and vectors have different constructors and ways to manipulate them, and these are explained in their own sections.</para></sect1>
<sect1 id="page_pmt_1strings">
<title>Strings</title>
<para>PMTs have a way of representing short strings. These strings are actually stored as interned symbols in a hash table, so in other words, only one PMT object for a given string exists. If creating a new symbol from a string, if that string already exists in the hash table, the constructor will return a reference to the existing PMT.</para><para>We create strings with the following functions, where the second function, <ref refid="namespacepmt_1a57a5ae8877c9b3b24636a07e0a3596e1" kindref="member">pmt::pmt_intern</ref>, is simply an alias of the first.</para><para><programlisting><codeline><highlight class="normal"><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt::pmt_t</ref><sp/>str0<sp/>=<sp/><ref refid="namespacepmt_1a9175b04fc88cb7be663ee7b7925dfda6" kindref="member" tooltip="Return the symbol whose name is s.">pmt::pmt_string_to_symbol</ref>(std::string(</highlight><highlight class="stringliteral">&quot;some<sp/>string&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt::pmt_t</ref><sp/>str1<sp/>=<sp/><ref refid="namespacepmt_1a57a5ae8877c9b3b24636a07e0a3596e1" kindref="member" tooltip="Alias for pmt_string_to_symbol.">pmt::pmt_intern</ref>(std::string(</highlight><highlight class="stringliteral">&quot;some<sp/>string&quot;</highlight><highlight class="normal">));</highlight></codeline>
</programlisting></para><para>The string can be retrieved using the inverse function:</para><para><programlisting><codeline><highlight class="normal">std::string<sp/>s<sp/>=<sp/><ref refid="namespacepmt_1a736cbad10638be8857ab42e8958163e7" kindref="member">pmt::pmt_symbol_to_string</ref>(str0);</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="page_pmt_1tests">
<title>Tests and Comparisons</title>
<para>The PMT library comes with a number of functions to test and compare PMT objects. In general, for any PMT data type, there is an equivalent &quot;pmt::pmt_is_&lt;type&gt;&quot;. We can use these to test the PMT before trying to access the data inside. Expanding our examples above, we have:</para><para><programlisting><codeline><highlight class="normal"><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt::pmt_t</ref><sp/>str0<sp/>=<sp/><ref refid="namespacepmt_1a9175b04fc88cb7be663ee7b7925dfda6" kindref="member" tooltip="Return the symbol whose name is s.">pmt::pmt_string_to_symbol</ref>(std::string(</highlight><highlight class="stringliteral">&quot;some<sp/>string&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacepmt_1a9ae2fcfaefb907989660f09d342c7fa2" kindref="member" tooltip="Return true if obj is a symbol, else false.">pmt::pmt_is_symbol</ref>(str0))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>s<sp/>=<sp/><ref refid="namespacepmt_1a736cbad10638be8857ab42e8958163e7" kindref="member">pmt::pmt_symbol_to_string</ref>(str0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>1.2345;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt::pmt_t</ref><sp/>pmt_a<sp/>=<sp/><ref refid="namespacepmt_1aa4f8469d075bcccc81553ccb55408265" kindref="member" tooltip="Return the pmt value that represents double x.">pmt::pmt_from_double</ref>(a);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pmt::pmt_is_double(pmt_a))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b<sp/>=<sp/><ref refid="namespacepmt_1a936b17e4b5b737fe2483007570b463ec" kindref="member" tooltip="Convert pmt to double if possible.">pmt::pmt_to_double</ref>(pmt_a);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>12345;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt::pmt_t</ref><sp/>pmt_c<sp/>=<sp/><ref refid="namespacepmt_1ac4ac7825fbcc1accdc6a9ada084f5f96" kindref="member" tooltip="Return the pmt value that represents the integer x.">pmt::pmt_from_long</ref>(c);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pmt::pmt_is_long(pmt_a))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/><ref refid="namespacepmt_1af7cbc1b15358aa1a816cd86e09e2290f" kindref="member" tooltip="Convert pmt to long if possible.">pmt::pmt_to_long</ref>(pmt_c);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">\\<sp/>This<sp/>will<sp/>fail<sp/>the<sp/>test.<sp/>Otherwise,<sp/>trying<sp/>to<sp/>coerce<sp/>\b<sp/>pmt_c<sp/>as<sp/>a</highlight></codeline>
<codeline><highlight class="normal">\\<sp/>double<sp/>when<sp/>internally<sp/>it<sp/>is<sp/>a<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>will<sp/>result<sp/>in<sp/>an<sp/>exception.</highlight></codeline>
<codeline><highlight class="normal">if(pmt::pmt_is_double(pmt_a))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d<sp/>=<sp/><ref refid="namespacepmt_1a936b17e4b5b737fe2483007570b463ec" kindref="member" tooltip="Convert pmt to double if possible.">pmt::pmt_to_double</ref>(pmt_c);</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="page_pmt_1dict">
<title>Dictionaries</title>
<para>PMT dictionaries and lists of key:value pairs. They have a well-defined interface for creating, adding, removing, and accessing items in the dictionary. Note that every operation that changes the dictionary both takes a PMT dictionary as an argument and returns a PMT dictionary. The dictionary used as an input is not changed and the returned dictionary is a new PMT with the changes made there.</para><para>The following is a list of PMT dictionary functions. Click through to get more information on what each does.</para><para><itemizedlist>
<listitem><para>bool <ref refid="namespacepmt_1a4c92d060166321056f00ec5cb4690f56" kindref="member">pmt::pmt_is_dict(const pmt_t &amp;obj)</ref></para></listitem><listitem><para>pmt_t <ref refid="namespacepmt_1a1b693d7111cf0ed21c62d546f9f0a4c6" kindref="member">pmt::pmt_make_dict()</ref></para></listitem><listitem><para>pmt_t <ref refid="namespacepmt_1aebcc6302548a69c3d0653a8abdd42999" kindref="member">pmt::pmt_dict_add(const pmt_t &amp;dict, const pmt_t &amp;key, const pmt_t &amp;value)</ref></para></listitem><listitem><para>pmt_t <ref refid="namespacepmt_1a82d0974c3d1367b5c78f84801be21807" kindref="member">pmt::pmt_dict_delete(const pmt_t &amp;dict, const pmt_t &amp;key)</ref></para></listitem><listitem><para>bool <ref refid="namespacepmt_1a12454dc2ceb8c1a167569dfd931677ab" kindref="member">pmt::pmt_dict_has_key(const pmt_t &amp;dict, const pmt_t &amp;key)</ref></para></listitem><listitem><para>pmt_t <ref refid="namespacepmt_1addba630f2fea5c254e38661abfa8e728" kindref="member">pmt::pmt_dict_ref(const pmt_t &amp;dict, const pmt_t &amp;key, const pmt_t &amp;not_found)</ref></para></listitem><listitem><para>pmt_t <ref refid="namespacepmt_1a087e46b0b1ae652b30f507c642e40665" kindref="member">pmt::pmt_dict_items(pmt_t dict)</ref></para></listitem><listitem><para>pmt_t <ref refid="namespacepmt_1a7a6fb3c0f11694c8a9d649d2b3110d18" kindref="member">pmt::pmt_dict_keys(pmt_t dict)</ref></para></listitem><listitem><para>pmt_t <ref refid="namespacepmt_1a7904943c96b954cc3b55423b98d69c8e" kindref="member">pmt::pmt_dict_values(pmt_t dict)</ref></para></listitem></itemizedlist>
</para><para>This example does some basic manipulations of PMT dictionaries in Python. Notice that we pass the dictionary <emphasis>a</emphasis> and return the results to <emphasis>a</emphasis>. This still creates a new dictionary and removes the local reference to the old dictionary. This just keeps our number of variables small.</para><para><programlisting><codeline><highlight class="normal">from<sp/>gruel<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pmt</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">key0<sp/>=<sp/>pmt.pmt_intern(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">val0<sp/>=<sp/>pmt.pmt_from_long(123)</highlight></codeline>
<codeline><highlight class="normal">val1<sp/>=<sp/>pmt.pmt_from_long(234)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">key1<sp/>=<sp/>pmt.pmt_intern(</highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">val2<sp/>=<sp/>pmt.pmt_from_double(5.4321)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Make<sp/>an<sp/>empty<sp/>dictionary</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal">a<sp/>=<sp/>pmt.pmt_make_dict()</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Add<sp/>a<sp/>key:value<sp/>pair<sp/>to<sp/>the<sp/>dictionary</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal">a<sp/>=<sp/>pmt.pmt_dict_add(a,<sp/>key0,<sp/>val0)</highlight></codeline>
<codeline><highlight class="normal">pmt.pmt_print(a)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Add<sp/>a<sp/>new<sp/>value<sp/>to<sp/>the<sp/>same<sp/>key;</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>new<sp/>dict<sp/>will<sp/>still<sp/>have<sp/>one<sp/>item<sp/>with<sp/>new<sp/>value</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal">a<sp/>=<sp/>pmt.pmt_dict_add(a,<sp/>key0,<sp/>val1)</highlight></codeline>
<codeline><highlight class="normal">pmt.pmt_print(a)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Add<sp/>a<sp/>new<sp/>key:value<sp/>pair</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal">a<sp/>=<sp/>pmt.pmt_dict_add(a,<sp/>key1,<sp/>val2)</highlight></codeline>
<codeline><highlight class="normal">pmt.pmt_print(a)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Test<sp/>if<sp/>we<sp/>have<sp/>a<sp/>key,<sp/>then<sp/>delete<sp/>it</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal">print<sp/>pmt.pmt_dict_has_key(a,<sp/>key1)</highlight></codeline>
<codeline><highlight class="normal">a<sp/>=<sp/>pmt.pmt_dict_delete(a,<sp/>key1)</highlight></codeline>
<codeline><highlight class="normal">print<sp/>pmt.pmt_dict_has_key(a,<sp/>key1)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ref<sp/>=<sp/>pmt.pmt_dict_ref(a,<sp/>key0,<sp/>pmt.PMT_NIL)</highlight></codeline>
<codeline><highlight class="normal">pmt.pmt_print(ref)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>The<sp/>following<sp/>should<sp/>never<sp/>print</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pmt.pmt_dict_has_key(a,<sp/>key0)<sp/>and<sp/>pmt.pmt_eq(ref,<sp/>pmt.PMT_NIL)):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>print<sp/></highlight><highlight class="stringliteral">&quot;Trouble!<sp/>We<sp/>have<sp/>key0,<sp/>but<sp/>it<sp/>returned<sp/>PMT_NIL&quot;</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="page_pmt_1vectors">
<title>Vectors</title>
<para>PMT vectors come in two forms: vectors of PMTs and vectors of uniform data. The standard PMT vector is a vector of PMTs, and each PMT can be of any internal type. On the other hand, uniform PMTs are of a specific data type which come in the form:</para><para><itemizedlist>
<listitem><para>(u)int8</para></listitem><listitem><para>(u)int16</para></listitem><listitem><para>(u)int32</para></listitem><listitem><para>(u)int64</para></listitem><listitem><para>float32</para></listitem><listitem><para>float64</para></listitem><listitem><para>complex 32 (std::complex&lt;float&gt;)</para></listitem><listitem><para>complex 64 (std::complex&lt;double&gt;)</para></listitem></itemizedlist>
</para><para>That is, the standard sizes of integers, floats, and complex types of both signed and unsigned.</para><para>Vectors have a well-defined interface that allows us to make, set, get, and fill them. We can also get the length of a vector with <ref refid="namespacepmt_1a76684f2c30f1f0134f526dababa3aa89" kindref="member">pmt::pmt_length</ref>.</para><para>For standard vectors, these functions look like:</para><para><itemizedlist>
<listitem><para>bool <ref refid="namespacepmt_1a7ea3ca32dd1c7465e0cc1de892ab438a" kindref="member">pmt::pmt_is_vector(pmt_t x)</ref></para></listitem><listitem><para>pmt_t <ref refid="namespacepmt_1a02649eb318d73294857a9baa5b9f159d" kindref="member">pmt::pmt_make_vector(size_t k, pmt_t fill)</ref></para></listitem><listitem><para>pmt_t <ref refid="namespacepmt_1a5bdfa6646be0adb56530c3ad17ed968d" kindref="member">pmt::pmt_vector_ref(pmt_t vector, size_t k)</ref></para></listitem><listitem><para>void <ref refid="namespacepmt_1aff40b940757218048e17b3a295360980" kindref="member">pmt::pmt_vector_set(pmt_t vector, size_t k, pmt_t obj)</ref></para></listitem><listitem><para>void <ref refid="namespacepmt_1a4789afe684c5bcb16a4140bdda7ab932" kindref="member">pmt::pmt_vector_fill(pmt_t vector, pmt_t fill)</ref></para></listitem></itemizedlist>
</para><para>Uniform vectors have the same types of functions, but they are data type-dependent. The following list tries to explain them where you substitute the specific data type prefix for <emphasis>dtype</emphasis> (prefixes being: u8, u16, u32, u64, s8, s16, s32, s64, f32, f64, c32, c64).</para><para><itemizedlist>
<listitem><para>bool pmt::pmt_is_(dtype)vector(pmt_t x)</para></listitem><listitem><para>pmt_t pmt::pmt_make_(dtype)vector(size_t k, (dtype) fill)</para></listitem><listitem><para>pmt_t pmt::pmt_init_(dtype)vector(size_t k, const (dtype*) data)</para></listitem><listitem><para>pmt_t pmt::pmt_init_(dtype)vector(size_t k, const std::vector&lt;dtype&gt; data)</para></listitem><listitem><para>pmt_t pmt::pmt_(dtype)vector_ref(pmt_t vector, size_t k)</para></listitem><listitem><para>void pmt::pmt_(dtype)vector_set(pmt_t vector, size_t k, (dtype) x)</para></listitem><listitem><para>const dtype* pmt::pmt_(dtype)vector_elements(pmt_t vector, size_t &amp;len)</para></listitem><listitem><para>dtype* pmt::pmt_(dtype)vector_writable_elements(pmt_t vector, size_t &amp;len)</para></listitem></itemizedlist>
</para><para><bold>Note:</bold> We break the contract with vectors. The &apos;set&apos; functions actually change the data underneath. It is important to keep track of the implications of setting a new value as well as accessing the &apos;vector_writable_elements&apos; data. Since these are mostly standard data types, sets and gets are atomic, so it is unlikely to cause a great deal of harm. But it&apos;s only unlikely, not impossible. Best to use mutexes whenever manipulating data in a vector.</para><sect2 id="page_pmt_1blob">
<title>BLOB</title>
<para>A BLOB is a &apos;binary large object&apos; type. In PMT&apos;s, this is actually just a thin wrapper around a u8vector.</para></sect2>
</sect1>
<sect1 id="page_pmt_1pairs">
<title>Pairs</title>
<para>Pairs are inspired by LISP &apos;cons&apos; data types, so you will find the language here comes from LISP. A pair is just a pair of PMT objects. They are manipulated using the following functions:</para><para><itemizedlist>
<listitem><para>bool <ref refid="namespacepmt_1a980b699b577a91f635985610bbaec234" kindref="member">pmt::pmt_is_pair</ref> (const pmt_t &amp;obj): Return true if obj is a pair, else false</para></listitem><listitem><para>pmt_t <ref refid="namespacepmt_1af049aaa257cc52e35a2ef8ed6a75b45b" kindref="member">pmt::pmt_cons(const pmt_t &amp;x, const pmt_t &amp;y)</ref>: construct new pair</para></listitem><listitem><para>pmt_t <ref refid="namespacepmt_1a4655d415ba202f88f7b1477eb2037f46" kindref="member">pmt::pmt_car(const pmt_t &amp;pair)</ref>: get the car of the pair (first object)</para></listitem><listitem><para>pmt_t <ref refid="namespacepmt_1a386125587526af1bd94f359bdb60e09a" kindref="member">pmt::pmt_cdr(const pmt_t &amp;pair)</ref>: get the cdr of the pair (second object)</para></listitem><listitem><para>void <ref refid="namespacepmt_1a99d30c6140de466c0bc5fb9e940bc5c5" kindref="member">pmt::pmt_set_car(pmt_t pair, pmt_t value)</ref>: Stores value in the car field</para></listitem><listitem><para>void <ref refid="namespacepmt_1a282853f5cd5477fab1717c04a544239d" kindref="member">pmt::pmt_set_cdr(pmt_t pair, pmt_t value)</ref>: Stores value in the cdr field</para></listitem></itemizedlist>
</para></sect1>
<sect1 id="page_pmt_1serdes">
<title>Serializing and Deserializing</title>
<para>It is often important to hide the fact that we are working with PMTs to make them easier to transmit, store, write to file, etc. The PMT library has methods to serialize data into a string buffer or a string and then methods to deserialize the string buffer or string back into a PMT. We use this extensively in the metadata files (see <ref refid="page_metadata" kindref="compound">Metadata Information</ref>).</para><para><itemizedlist>
<listitem><para>bool <ref refid="namespacepmt_1abd8e2c3ab8ea55b273b9d042814a075d" kindref="member">pmt::pmt_serialize(pmt_t obj, std::streambuf &amp;sink)</ref></para></listitem><listitem><para>std::string <ref refid="namespacepmt_1a9ec30079614ead54081b29c3473181be" kindref="member">pmt::pmt_serialize_str(pmt_t obj)</ref></para></listitem><listitem><para>pmt_t <ref refid="namespacepmt_1a60fd58fe554cbeef5440b3ffb2814d8d" kindref="member">pmt::pmt_deserialize(std::streambuf &amp;source)</ref></para></listitem><listitem><para>pmt_t <ref refid="namespacepmt_1a21ef652ea9953cc509d0f112a10a1cf0" kindref="member">pmt::pmt_deserialize_str(std::string str)</ref></para></listitem></itemizedlist>
</para><para>For example, we will serialize the data above to make it into a string ready to be written to a file and then deserialize it back to its original PMT.</para><para><programlisting><codeline><highlight class="normal">from<sp/>gruel<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pmt</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">key0<sp/>=<sp/>pmt.pmt_intern(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">val0<sp/>=<sp/>pmt.pmt_from_long(123)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">key1<sp/>=<sp/>pmt.pmt_intern(</highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">val1<sp/>=<sp/>pmt.pmt_from_double(5.4321)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Make<sp/>an<sp/>empty<sp/>dictionary</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal">a<sp/>=<sp/>pmt.pmt_make_dict()</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Add<sp/>a<sp/>key:value<sp/>pair<sp/>to<sp/>the<sp/>dictionary</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal">a<sp/>=<sp/>pmt.pmt_dict_add(a,<sp/>key0,<sp/>val0)</highlight></codeline>
<codeline><highlight class="normal">a<sp/>=<sp/>pmt.pmt_dict_add(a,<sp/>key1,<sp/>val1)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">pmt.pmt_print(a)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ser_str<sp/>=<sp/>pmt.pmt_serialize_str(a)</highlight></codeline>
<codeline><highlight class="normal">print<sp/>ser_str</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">b<sp/>=<sp/>pmt.pmt_deserialize_str(ser_str)</highlight></codeline>
<codeline><highlight class="normal">pmt.pmt_print(b)</highlight></codeline>
</programlisting></para><para>The line where we &apos;print ser_str&apos; will print and parts will be readable, but the point of serializing is not to make a human-readable string. This is only done here as a test.</para></sect1>
<sect1 id="page_pmt_1printing">
<title>Printing</title>
<para>We have used the <ref refid="namespacepmt_1aef241cfd8cabf5a7e363d7041ccbe1bb" kindref="member">pmt::pmt_print</ref> function in these examples to nicely print the contents of a PMT. Another way to print the contents is using the overloaded &quot;&lt;&lt;&quot; operator with a stream buffer object. In C++, we can inline print the contents of a PMT like:</para><para><programlisting><codeline><highlight class="normal"><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt::pmt_t</ref><sp/>a<sp/><ref refid="namespacepmt_1aa4f8469d075bcccc81553ccb55408265" kindref="member" tooltip="Return the pmt value that represents double x.">pmt::pmt_from_double</ref>(1.0);</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>PMT<sp/>a<sp/>contains<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>a<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
