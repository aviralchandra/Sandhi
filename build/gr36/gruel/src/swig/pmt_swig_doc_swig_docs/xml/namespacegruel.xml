<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="namespacegruel" kind="namespace">
    <compoundname>gruel</compoundname>
    <innerclass refid="classgruel_1_1msg__accepter" prot="public">gruel::msg_accepter</innerclass>
    <innerclass refid="classgruel_1_1msg__accepter__msgq" prot="public">gruel::msg_accepter_msgq</innerclass>
    <innerclass refid="classgruel_1_1msg__queue" prot="public">gruel::msg_queue</innerclass>
    <innerclass refid="structgruel_1_1rt__sched__param" prot="public">gruel::rt_sched_param</innerclass>
    <innerclass refid="structgruel_1_1sys__pri" prot="public">gruel::sys_pri</innerclass>
    <innerclass refid="classgruel_1_1thread__body__wrapper" prot="public">gruel::thread_body_wrapper</innerclass>
    <innerclass refid="classgruel_1_1thread__group" prot="public">gruel::thread_group</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacegruel_1a926b5ecf465d839c1f2865d324d65e49" prot="public" static="no">
        <name>rt_status_t</name>
        <enumvalue id="namespacegruel_1a926b5ecf465d839c1f2865d324d65e49a51efcbdb7bcb21417dd30bfeb585833e" prot="public">
          <name>RT_OK</name>
          <initializer> 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegruel_1a926b5ecf465d839c1f2865d324d65e49aeabba59edb3b7afbe1d5c3c650aba745" prot="public">
          <name>RT_NOT_IMPLEMENTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegruel_1a926b5ecf465d839c1f2865d324d65e49ab466034c5aec2403b5d647c626840980" prot="public">
          <name>RT_NO_PRIVS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegruel_1a926b5ecf465d839c1f2865d324d65e49adab4c4379f9f3078259ac6ec12ffdd84" prot="public">
          <name>RT_OTHER_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/realtime.h" line="37" bodyfile="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/realtime.h" bodystart="37" bodyend="42"/>
      </memberdef>
      <memberdef kind="enum" id="namespacegruel_1ad654b91164aa4b28303e2471069dff8a" prot="public" static="no">
        <name>rt_sched_policy</name>
        <enumvalue id="namespacegruel_1ad654b91164aa4b28303e2471069dff8aa71e42ef95539a491a37437c2beafcbd2" prot="public">
          <name>RT_SCHED_RR</name>
          <initializer> 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegruel_1ad654b91164aa4b28303e2471069dff8aab2c83cff1d15f845371844213e1a32d8" prot="public">
          <name>RT_SCHED_FIFO</name>
          <initializer> 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/realtime.h" line="45" bodyfile="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/realtime.h" bodystart="45" bodyend="48"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacegruel_1a047c8e5de8a99de80f0aceae1b6da193" prot="public" static="no">
        <type>signed long long</type>
        <definition>typedef signed long long gruel::high_res_timer_type</definition>
        <argsstring></argsstring>
        <name>high_res_timer_type</name>
        <briefdescription>
<para>Typedef for the timer tick count. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/high_res_timer.h" line="26" bodyfile="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/high_res_timer.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegruel_1a1e0457ea8f0fb41b82786d4f07bc09e4" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classgruel_1_1msg__accepter" kindref="compound">msg_accepter</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;msg_accepter&gt; gruel::msg_accepter_sptr</definition>
        <argsstring></argsstring>
        <name>msg_accepter_sptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/msg_accepter.h" line="49" bodyfile="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/msg_accepter.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegruel_1a9e4e4e7ce6b1bff9c2361f40520c3d5f" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classgruel_1_1msg__queue" kindref="compound">msg_queue</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;msg_queue&gt; gruel::msg_queue_sptr</definition>
        <argsstring></argsstring>
        <name>msg_queue_sptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/msg_queue.h" line="33" bodyfile="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/msg_queue.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegruel_1acf8a10d5cbbe169118cacbc8e8faabf8" prot="public" static="no">
        <type>boost::thread</type>
        <definition>typedef boost::thread gruel::thread</definition>
        <argsstring></argsstring>
        <name>thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/thread.h" line="43" bodyfile="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/thread.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegruel_1a16a913898c1d7f7a8ee459eb7ace413d" prot="public" static="no">
        <type>boost::mutex</type>
        <definition>typedef boost::mutex gruel::mutex</definition>
        <argsstring></argsstring>
        <name>mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/thread.h" line="44" bodyfile="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/thread.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegruel_1a93eaa071dca707d684d1ba1ee4ca74c5" prot="public" static="no">
        <type>boost::unique_lock&lt; boost::mutex &gt;</type>
        <definition>typedef boost::unique_lock&lt;boost::mutex&gt; gruel::scoped_lock</definition>
        <argsstring></argsstring>
        <name>scoped_lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/thread.h" line="45" bodyfile="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/thread.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegruel_1a7f31867c7b47853d55962183d0a4e999" prot="public" static="no">
        <type>boost::condition_variable</type>
        <definition>typedef boost::condition_variable gruel::condition_variable</definition>
        <argsstring></argsstring>
        <name>condition_variable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/thread.h" line="46" bodyfile="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/thread.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegruel_1a6de6d44cd75f4cb0231445f6c68597c3" prot="public" static="no">
        <type>pthread_t</type>
        <definition>typedef pthread_t gruel::gr_thread_t</definition>
        <argsstring></argsstring>
        <name>gr_thread_t</name>
        <briefdescription>
<para>a system-dependent typedef for the underlying thread type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/thread.h" line="55" bodyfile="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/thread.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacegruel_1aa65e82a13465bea3f42613e5b0787e35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacegruel_1a047c8e5de8a99de80f0aceae1b6da193" kindref="member">high_res_timer_type</ref></type>
        <definition>gruel::high_res_timer_type gruel::high_res_timer_now</definition>
        <argsstring>(void)</argsstring>
        <name>high_res_timer_now</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current time in ticks. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/high_res_timer.h" line="29" bodyfile="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/high_res_timer.h" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespacegruel_1abf3f3c6f8454f9df6bfad8df8ac57634" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacegruel_1a047c8e5de8a99de80f0aceae1b6da193" kindref="member">high_res_timer_type</ref></type>
        <definition>gruel::high_res_timer_type gruel::high_res_timer_tps</definition>
        <argsstring>(void)</argsstring>
        <name>high_res_timer_tps</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the number of ticks per second. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/high_res_timer.h" line="32" bodyfile="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/high_res_timer.h" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespacegruel_1a38bbc1ddf9e8af4422ab161104b1dd84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacegruel_1a047c8e5de8a99de80f0aceae1b6da193" kindref="member">high_res_timer_type</ref></type>
        <definition>gruel::high_res_timer_type gruel::high_res_timer_epoch</definition>
        <argsstring>(void)</argsstring>
        <name>high_res_timer_epoch</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the tick count at the epoch. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/high_res_timer.h" line="35" bodyfile="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/high_res_timer.h" bodystart="118" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespacegruel_1a13ea02c0ad4a0d79e85645cc2bcb2c88" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member">pmt::pmt_t</ref></type>
        <definition>static pmt::pmt_t gruel::send</definition>
        <argsstring>(msg_accepter_sptr accepter, const pmt::pmt_t &amp;which_port, const pmt::pmt_t &amp;msg)</argsstring>
        <name>send</name>
        <param>
          <type><ref refid="namespacegruel_1a1e0457ea8f0fb41b82786d4f07bc09e4" kindref="member">msg_accepter_sptr</ref></type>
          <declname>accepter</declname>
        </param>
        <param>
          <type>const <ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member">pmt::pmt_t</ref> &amp;</type>
          <declname>which_port</declname>
        </param>
        <param>
          <type>const <ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member">pmt::pmt_t</ref> &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>send message to <ref refid="classgruel_1_1msg__accepter" kindref="compound">msg_accepter</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accepter</parametername>
</parameternamelist>
<parameterdescription>
<para>is the target of the send. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_port</parametername>
</parameternamelist>
<parameterdescription>
<para>A pmt symbol describing the port by name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>is the message to send. It&apos;s usually a pmt tuple.</para></parameterdescription>
</parameteritem>
</parameterlist>
Sending a message is an asynchronous operation. The <computeroutput>send</computeroutput> call will not wait for the message either to arrive at the destination or to be received.</para><para><simplesect kind="return"><para>msg </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/msg_passing.h" line="50" bodyfile="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/msg_passing.h" bodystart="49" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacegruel_1a57bc482e98cd83cc49a235e6b97cddae" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member">pmt::pmt_t</ref></type>
        <definition>static pmt::pmt_t gruel::send</definition>
        <argsstring>(msg_accepter *accepter, const pmt::pmt_t &amp;which_port, const pmt::pmt_t &amp;msg)</argsstring>
        <name>send</name>
        <param>
          <type><ref refid="classgruel_1_1msg__accepter" kindref="compound">msg_accepter</ref> *</type>
          <declname>accepter</declname>
        </param>
        <param>
          <type>const <ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member">pmt::pmt_t</ref> &amp;</type>
          <declname>which_port</declname>
        </param>
        <param>
          <type>const <ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member">pmt::pmt_t</ref> &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>send message to <ref refid="classgruel_1_1msg__accepter" kindref="compound">msg_accepter</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accepter</parametername>
</parameternamelist>
<parameterdescription>
<para>is the target of the send. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_port</parametername>
</parameternamelist>
<parameterdescription>
<para>A pmt symbol describing the port by name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>is the message to send. It&apos;s usually a pmt tuple.</para></parameterdescription>
</parameteritem>
</parameterlist>
Sending a message is an asynchronous operation. The <computeroutput>send</computeroutput> call will not wait for the message either to arrive at the destination or to be received.</para><para><simplesect kind="return"><para>msg </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/msg_passing.h" line="70" bodyfile="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/msg_passing.h" bodystart="69" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespacegruel_1ad207c3deb775c43ffc54df77d59fa9c3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member">pmt::pmt_t</ref></type>
        <definition>static pmt::pmt_t gruel::send</definition>
        <argsstring>(msg_accepter &amp;accepter, const pmt::pmt_t &amp;which_port, const pmt::pmt_t &amp;msg)</argsstring>
        <name>send</name>
        <param>
          <type><ref refid="classgruel_1_1msg__accepter" kindref="compound">msg_accepter</ref> &amp;</type>
          <declname>accepter</declname>
        </param>
        <param>
          <type>const <ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member">pmt::pmt_t</ref> &amp;</type>
          <declname>which_port</declname>
        </param>
        <param>
          <type>const <ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member">pmt::pmt_t</ref> &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>send message to <ref refid="classgruel_1_1msg__accepter" kindref="compound">msg_accepter</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accepter</parametername>
</parameternamelist>
<parameterdescription>
<para>is the target of the send. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_port</parametername>
</parameternamelist>
<parameterdescription>
<para>A pmt symbol describing the port by name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>is the message to send. It&apos;s usually a pmt tuple.</para></parameterdescription>
</parameteritem>
</parameterlist>
Sending a message is an asynchronous operation. The <computeroutput>send</computeroutput> call will not wait for the message either to arrive at the destination or to be received.</para><para><simplesect kind="return"><para>msg </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/msg_passing.h" line="90" bodyfile="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/msg_passing.h" bodystart="89" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespacegruel_1ace0465dbdc16bf3330e65bb4d54761a9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member">pmt::pmt_t</ref></type>
        <definition>static pmt::pmt_t gruel::send</definition>
        <argsstring>(pmt::pmt_t accepter, const pmt::pmt_t &amp;which_port, const pmt::pmt_t &amp;msg)</argsstring>
        <name>send</name>
        <param>
          <type><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member">pmt::pmt_t</ref></type>
          <declname>accepter</declname>
        </param>
        <param>
          <type>const <ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member">pmt::pmt_t</ref> &amp;</type>
          <declname>which_port</declname>
        </param>
        <param>
          <type>const <ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member">pmt::pmt_t</ref> &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>send message to <ref refid="classgruel_1_1msg__accepter" kindref="compound">msg_accepter</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accepter</parametername>
</parameternamelist>
<parameterdescription>
<para>is the target of the send. precond: pmt_is_msg_accepter(accepter) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_port</parametername>
</parameternamelist>
<parameterdescription>
<para>A pmt symbol describing the port by name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>is the message to send. It&apos;s usually a pmt tuple.</para></parameterdescription>
</parameteritem>
</parameterlist>
Sending a message is an asynchronous operation. The <computeroutput>send</computeroutput> call will not wait for the message either to arrive at the destination or to be received.</para><para><simplesect kind="return"><para>msg </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/msg_passing.h" line="110" bodyfile="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/msg_passing.h" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespacegruel_1ae77b86e30b23918b6de0c0fcbe11ff07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegruel_1a9e4e4e7ce6b1bff9c2361f40520c3d5f" kindref="member">msg_queue_sptr</ref></type>
        <definition>msg_queue_sptr gruel::make_msg_queue</definition>
        <argsstring>(unsigned int limit=0)</argsstring>
        <name>make_msg_queue</name>
        <param>
          <type>unsigned int</type>
          <declname>limit</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/msg_queue.h" line="35"/>
      </memberdef>
      <memberdef kind="function" id="namespacegruel_1ad32b5bf1b2e767ac6339e4d8507a6d7f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gruel::rt_priority_min</definition>
        <argsstring>()</argsstring>
        <name>rt_priority_min</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/realtime.h" line="58" bodyfile="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/realtime.h" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespacegruel_1a0ad858d39d59308a89dcfae89bef2ec5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gruel::rt_priority_max</definition>
        <argsstring>()</argsstring>
        <name>rt_priority_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/realtime.h" line="59" bodyfile="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/realtime.h" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacegruel_1a01082c0117d0ff3cdf3d017ea9432dac" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gruel::rt_priority_default</definition>
        <argsstring>()</argsstring>
        <name>rt_priority_default</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/realtime.h" line="60" bodyfile="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/realtime.h" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespacegruel_1a7cf318566c517be7ebe2590660d959f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegruel_1a926b5ecf465d839c1f2865d324d65e49" kindref="member">rt_status_t</ref> <ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref></type>
        <definition>rt_status_t GRUEL_API gruel::enable_realtime_scheduling</definition>
        <argsstring>(rt_sched_param=rt_sched_param())</argsstring>
        <name>enable_realtime_scheduling</name>
        <param>
          <type><ref refid="structgruel_1_1rt__sched__param" kindref="compound">rt_sched_param</ref></type>
          <defval><ref refid="structgruel_1_1rt__sched__param" kindref="compound">rt_sched_param</ref>()</defval>
        </param>
        <briefdescription>
<para>If possible, enable &quot;realtime&quot; scheduling.</para><para>In general, this means that the code will be scheduled before any non-realtime (normal) processes. Note that if your code contains an non-blocking infinite loop and you enable realtime scheduling, it&apos;s possible to hang the system. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/realtime.h" line="92"/>
      </memberdef>
      <memberdef kind="function" id="namespacegruel_1abf4f0ddbf64290819446901817615831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref> <ref refid="namespacegruel_1a6de6d44cd75f4cb0231445f6c68597c3" kindref="member">gr_thread_t</ref></type>
        <definition>GRUEL_API gr_thread_t gruel::get_current_thread_id</definition>
        <argsstring>()</argsstring>
        <name>get_current_thread_id</name>
        <briefdescription>
<para>Get the current thread&apos;s ID as a gr_thread_t. </para>        </briefdescription>
        <detaileddescription>
<para>We use this when setting the thread affinity or any other low-level thread settings. Can be called withing a GNU Radio block to get a reference to its current thread ID. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/thread.h" line="64"/>
      </memberdef>
      <memberdef kind="function" id="namespacegruel_1abd2f6295c747739934dc022251be1807" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref> void</type>
        <definition>GRUEL_API void gruel::thread_bind_to_processor</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;mask)</argsstring>
        <name>thread_bind_to_processor</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Bind the current thread to a set of cores. </para>        </briefdescription>
        <detaileddescription>
<para>Wrapper for system-dependent calls to set the affinity of the current thread to the processor mask. The mask is simply a 1-demensional vector containing the processor or core number from 0 to N-1 for N cores.</para><para>Note: this does not work on OSX; it is a nop call since OSX does not support the concept of thread affinity (and what they do support in this way since 10.5 is not what we want or can use in this fashion). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/thread.h" line="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacegruel_1ae3b1fe426ae12fc05cd46b1820ee537b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref> void</type>
        <definition>GRUEL_API void gruel::thread_bind_to_processor</definition>
        <argsstring>(int n)</argsstring>
        <name>thread_bind_to_processor</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Convineince function to bind the current thread to a single core. </para>        </briefdescription>
        <detaileddescription>
<para>Wrapper for system-dependent calls to set the affinity of the current thread to a given core from 0 to N-1 for N cores.</para><para>Note: this does not work on OSX; it is a nop call since OSX does not support the concept of thread affinity (and what they do support in this way since 10.5 is not what we want or can use in this fashion). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/thread.h" line="90"/>
      </memberdef>
      <memberdef kind="function" id="namespacegruel_1a367216390eb7bdfddd9f3db1ba035a8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref> void</type>
        <definition>GRUEL_API void gruel::thread_bind_to_processor</definition>
        <argsstring>(gr_thread_t thread, const std::vector&lt; int &gt; &amp;mask)</argsstring>
        <name>thread_bind_to_processor</name>
        <param>
          <type><ref refid="namespacegruel_1a6de6d44cd75f4cb0231445f6c68597c3" kindref="member">gr_thread_t</ref></type>
          <declname>thread</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Bind a thread to a set of cores. </para>        </briefdescription>
        <detaileddescription>
<para>Wrapper for system-dependent calls to set the affinity of the given thread ID to the processor mask. The mask is simply a 1-demensional vector containing the processor or core number from 0 to N-1 for N cores.</para><para>Note: this does not work on OSX; it is a nop call since OSX does not support the concept of thread affinity (and what they do support in this way since 10.5 is not what we want or can use in this fashion). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/thread.h" line="104"/>
      </memberdef>
      <memberdef kind="function" id="namespacegruel_1ac320d64b8eacdf7e519bdc1789ad0398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref> void</type>
        <definition>GRUEL_API void gruel::thread_bind_to_processor</definition>
        <argsstring>(gr_thread_t thread, unsigned int n)</argsstring>
        <name>thread_bind_to_processor</name>
        <param>
          <type><ref refid="namespacegruel_1a6de6d44cd75f4cb0231445f6c68597c3" kindref="member">gr_thread_t</ref></type>
          <declname>thread</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Convineince function to bind the a thread to a single core. </para>        </briefdescription>
        <detaileddescription>
<para>Wrapper for system-dependent calls to set the affinity of the given thread ID to a given core from 0 to N-1 for N cores.</para><para>Note: this does not work on OSX; it is a nop call since OSX does not support the concept of thread affinity (and what they do support in this way since 10.5 is not what we want or can use in this fashion). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/thread.h" line="117"/>
      </memberdef>
      <memberdef kind="function" id="namespacegruel_1afd5e570015c1d84a0e8fec66d181325e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref> void</type>
        <definition>GRUEL_API void gruel::thread_unbind</definition>
        <argsstring>()</argsstring>
        <name>thread_unbind</name>
        <briefdescription>
<para>Remove any thread-processor affinity for the current thread. </para>        </briefdescription>
        <detaileddescription>
<para>Note: this does not work on OSX; it is a nop call since OSX does not support the concept of thread affinity (and what they do support in this way since 10.5 is not what we want or can use in this fashion). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/thread.h" line="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacegruel_1af379cf6746b676dbeb161d16269a1498" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref> void</type>
        <definition>GRUEL_API void gruel::thread_unbind</definition>
        <argsstring>(gr_thread_t thread)</argsstring>
        <name>thread_unbind</name>
        <param>
          <type><ref refid="namespacegruel_1a6de6d44cd75f4cb0231445f6c68597c3" kindref="member">gr_thread_t</ref></type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Remove any thread-processor affinity for a given thread ID. </para>        </briefdescription>
        <detaileddescription>
<para>Note: this does not work on OSX; it is a nop call since OSX does not support the concept of thread affinity (and what they do support in this way since 10.5 is not what we want or can use in this fashion). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/thread.h" line="135"/>
      </memberdef>
      <memberdef kind="function" id="namespacegruel_1a859323c0fa98c92f9e549f7051d62d4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref> void</type>
        <definition>GRUEL_API void gruel::mask_signals</definition>
        <argsstring>()</argsstring>
        <name>mask_signals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/thread_body_wrapper.h" line="32"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Include this header to use the message passing features. </para>    </briefdescription>
    <detaileddescription>
<para>System independent way to ask for realtime scheduling.</para><para><simplesect kind="see"><para><ref refid="sys__pri_8h" kindref="compound">sys_pri.h</ref> </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/aviral/GNU-Niyantran/gr36/gruel/src/include/gruel/high_res_timer.h" line="24"/>
  </compounddef>
</doxygen>
