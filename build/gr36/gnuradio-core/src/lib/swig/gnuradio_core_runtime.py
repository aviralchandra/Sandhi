# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gnuradio_core_runtime', [dirname(__file__)])
        except ImportError:
            import _gnuradio_core_runtime
            return _gnuradio_core_runtime
        if fp is not None:
            try:
                _mod = imp.load_module('_gnuradio_core_runtime', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gnuradio_core_runtime = swig_import_helper()
    del swig_import_helper
else:
    import _gnuradio_core_runtime
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import gras

class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gnuradio_core_runtime.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _gnuradio_core_runtime.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """incr(self, size_t n = 1) -> SwigPyIterator"""
        return _gnuradio_core_runtime.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """decr(self, size_t n = 1) -> SwigPyIterator"""
        return _gnuradio_core_runtime.SwigPyIterator_decr(self, n)

    def distance(self, *args, **kwargs):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _gnuradio_core_runtime.SwigPyIterator_distance(self, *args, **kwargs)

    def equal(self, *args, **kwargs):
        """equal(self, SwigPyIterator x) -> bool"""
        return _gnuradio_core_runtime.SwigPyIterator_equal(self, *args, **kwargs)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _gnuradio_core_runtime.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _gnuradio_core_runtime.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _gnuradio_core_runtime.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _gnuradio_core_runtime.SwigPyIterator_previous(self)

    def advance(self, *args, **kwargs):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _gnuradio_core_runtime.SwigPyIterator_advance(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _gnuradio_core_runtime.SwigPyIterator___eq__(self, *args, **kwargs)

    def __ne__(self, *args, **kwargs):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _gnuradio_core_runtime.SwigPyIterator___ne__(self, *args, **kwargs)

    def __iadd__(self, *args, **kwargs):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _gnuradio_core_runtime.SwigPyIterator___iadd__(self, *args, **kwargs)

    def __isub__(self, *args, **kwargs):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _gnuradio_core_runtime.SwigPyIterator___isub__(self, *args, **kwargs)

    def __add__(self, *args, **kwargs):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _gnuradio_core_runtime.SwigPyIterator___add__(self, *args, **kwargs)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _gnuradio_core_runtime.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _gnuradio_core_runtime.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

sizeof_char = _gnuradio_core_runtime.sizeof_char
sizeof_short = _gnuradio_core_runtime.sizeof_short
sizeof_int = _gnuradio_core_runtime.sizeof_int
sizeof_float = _gnuradio_core_runtime.sizeof_float
sizeof_double = _gnuradio_core_runtime.sizeof_double
sizeof_gr_complex = _gnuradio_core_runtime.sizeof_gr_complex
class gr_message_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_message)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_message_sptr
        __init__(self, gr_message p) -> gr_message_sptr
        """
        this = _gnuradio_core_runtime.new_gr_message_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> gr_message"""
        return _gnuradio_core_runtime.gr_message_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_runtime.delete_gr_message_sptr
    __del__ = lambda self : None;
    def type(self):
        """type(self) -> long"""
        return _gnuradio_core_runtime.gr_message_sptr_type(self)

    def arg1(self):
        """arg1(self) -> double"""
        return _gnuradio_core_runtime.gr_message_sptr_arg1(self)

    def arg2(self):
        """arg2(self) -> double"""
        return _gnuradio_core_runtime.gr_message_sptr_arg2(self)

    def set_type(self, *args, **kwargs):
        """set_type(self, long type)"""
        return _gnuradio_core_runtime.gr_message_sptr_set_type(self, *args, **kwargs)

    def set_arg1(self, *args, **kwargs):
        """set_arg1(self, double arg1)"""
        return _gnuradio_core_runtime.gr_message_sptr_set_arg1(self, *args, **kwargs)

    def set_arg2(self, *args, **kwargs):
        """set_arg2(self, double arg2)"""
        return _gnuradio_core_runtime.gr_message_sptr_set_arg2(self, *args, **kwargs)

    def length(self):
        """length(self) -> size_t"""
        return _gnuradio_core_runtime.gr_message_sptr_length(self)

    def to_string(self):
        """to_string(self) -> string"""
        return _gnuradio_core_runtime.gr_message_sptr_to_string(self)

gr_message_sptr_swigregister = _gnuradio_core_runtime.gr_message_sptr_swigregister
gr_message_sptr_swigregister(gr_message_sptr)


def message_from_string(*args, **kwargs):
  """message_from_string(string s, long type = 0, double arg1 = 0, double arg2 = 0) -> gr_message_sptr"""
  return _gnuradio_core_runtime.message_from_string(*args, **kwargs)

def message(type = 0, arg1 = 0, arg2 = 0, length = 0):
  """
    message(long type = 0, double arg1 = 0, double arg2 = 0, size_t length = 0) -> gr_message_sptr

    Message class.

    The ideas and method names for adjustable message length were lifted from the click modular router "Packet" class.

    public constructor for gr_message
    """
  return _gnuradio_core_runtime.message(type, arg1, arg2, length)
class gr_message(object):
    """
    Message class.

    The ideas and method names for adjustable message length were lifted from the click modular router "Packet" class.

    public constructor for gr_message
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gnuradio_core_runtime.delete_gr_message
    __del__ = lambda self : None;
    def type(self):
        """type(self) -> long"""
        return _gnuradio_core_runtime.gr_message_type(self)

    def arg1(self):
        """arg1(self) -> double"""
        return _gnuradio_core_runtime.gr_message_arg1(self)

    def arg2(self):
        """arg2(self) -> double"""
        return _gnuradio_core_runtime.gr_message_arg2(self)

    def set_type(self, *args, **kwargs):
        """set_type(self, long type)"""
        return _gnuradio_core_runtime.gr_message_set_type(self, *args, **kwargs)

    def set_arg1(self, *args, **kwargs):
        """set_arg1(self, double arg1)"""
        return _gnuradio_core_runtime.gr_message_set_arg1(self, *args, **kwargs)

    def set_arg2(self, *args, **kwargs):
        """set_arg2(self, double arg2)"""
        return _gnuradio_core_runtime.gr_message_set_arg2(self, *args, **kwargs)

    def length(self):
        """length(self) -> size_t"""
        return _gnuradio_core_runtime.gr_message_length(self)

    def to_string(self):
        """to_string(self) -> string"""
        return _gnuradio_core_runtime.gr_message_to_string(self)

gr_message_swigregister = _gnuradio_core_runtime.gr_message_swigregister
gr_message_swigregister(gr_message)


def message_ncurrently_allocated():
  """message_ncurrently_allocated() -> long"""
  return _gnuradio_core_runtime.message_ncurrently_allocated()
class gr_msg_handler(object):
    """abstract class of message handlers"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gnuradio_core_runtime.delete_gr_msg_handler
    __del__ = lambda self : None;
    def handle(self, *args, **kwargs):
        """
        handle(self, gr_message_sptr msg)

        handle
        """
        return _gnuradio_core_runtime.gr_msg_handler_handle(self, *args, **kwargs)

gr_msg_handler_swigregister = _gnuradio_core_runtime.gr_msg_handler_swigregister
gr_msg_handler_swigregister(gr_msg_handler)

class gr_msg_queue_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_msg_queue)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_msg_queue_sptr
        __init__(self,  p) -> gr_msg_queue_sptr
        """
        this = _gnuradio_core_runtime.new_gr_msg_queue_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_runtime.gr_msg_queue_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_runtime.delete_gr_msg_queue_sptr
    __del__ = lambda self : None;
    def delete_head_nowait(self):
        """
        delete_head_nowait(self) -> gr_message_sptr

        If there's a message in the q, delete it and return it. If no message is available, return 0.
        """
        return _gnuradio_core_runtime.gr_msg_queue_sptr_delete_head_nowait(self)

    def empty_p(self):
        """
        empty_p(self) -> bool

        is the queue empty?
        """
        return _gnuradio_core_runtime.gr_msg_queue_sptr_empty_p(self)

    def full_p(self):
        """
        full_p(self) -> bool

        is the queue full?
        """
        return _gnuradio_core_runtime.gr_msg_queue_sptr_full_p(self)

    def count(self):
        """
        count(self) -> unsigned int

        return number of messages in queue
        """
        return _gnuradio_core_runtime.gr_msg_queue_sptr_count(self)

    def flush(self):
        """
        flush(self)

        Delete all messages from the queue.
        """
        return _gnuradio_core_runtime.gr_msg_queue_sptr_flush(self)

    def handle(self, *args, **kwargs):
        """
        handle(self, gr_message_sptr msg)

        handle
        """
        return _gnuradio_core_runtime.gr_msg_queue_sptr_handle(self, *args, **kwargs)

gr_msg_queue_sptr_swigregister = _gnuradio_core_runtime.gr_msg_queue_sptr_swigregister
gr_msg_queue_sptr_swigregister(gr_msg_queue_sptr)


def msg_queue(limit = 0):
  """
    msg_queue(unsigned int limit = 0) -> gr_msg_queue_sptr

    thread-safe message queue
    """
  return _gnuradio_core_runtime.msg_queue(limit)

def gr_py_msg_queue__delete_head(*args, **kwargs):
  """gr_py_msg_queue__delete_head(gr_msg_queue_sptr q) -> gr_message_sptr"""
  return _gnuradio_core_runtime.gr_py_msg_queue__delete_head(*args, **kwargs)

def gr_py_msg_queue__insert_tail(*args, **kwargs):
  """gr_py_msg_queue__insert_tail(gr_msg_queue_sptr q, gr_message_sptr msg)"""
  return _gnuradio_core_runtime.gr_py_msg_queue__insert_tail(*args, **kwargs)
gr_msg_queue_sptr.delete_head = gr_py_msg_queue__delete_head
gr_msg_queue_sptr.insert_tail = gr_py_msg_queue__insert_tail
gr_msg_queue_sptr.handle = gr_py_msg_queue__insert_tail

class gr_io_signature_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_io_signature)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_io_signature_sptr
        __init__(self, gr_io_signature p) -> gr_io_signature_sptr
        """
        this = _gnuradio_core_runtime.new_gr_io_signature_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> gr_io_signature"""
        return _gnuradio_core_runtime.gr_io_signature_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_runtime.delete_gr_io_signature_sptr
    __del__ = lambda self : None;
    def min_streams(self):
        """min_streams(self) -> int"""
        return _gnuradio_core_runtime.gr_io_signature_sptr_min_streams(self)

    def max_streams(self):
        """max_streams(self) -> int"""
        return _gnuradio_core_runtime.gr_io_signature_sptr_max_streams(self)

    def sizeof_stream_item(self, *args, **kwargs):
        """sizeof_stream_item(self, int index) -> int"""
        return _gnuradio_core_runtime.gr_io_signature_sptr_sizeof_stream_item(self, *args, **kwargs)

    def sizeof_stream_items(self):
        """sizeof_stream_items(self) -> std::vector<(int,std::allocator<(int)>)>"""
        return _gnuradio_core_runtime.gr_io_signature_sptr_sizeof_stream_items(self)

gr_io_signature_sptr_swigregister = _gnuradio_core_runtime.gr_io_signature_sptr_swigregister
gr_io_signature_sptr_swigregister(gr_io_signature_sptr)


def io_signature(*args, **kwargs):
  """
    io_signature(int min_streams, int max_streams, int sizeof_stream_item) -> gr_io_signature_sptr

    i/o signature for input and output ports.

    misc

    Create an i/o signature.
    """
  return _gnuradio_core_runtime.io_signature(*args, **kwargs)

def io_signature2(*args, **kwargs):
  """
    io_signature2(int min_streams, int max_streams, int sizeof_stream_item1, 
        int sizeof_stream_item2) -> gr_io_signature_sptr

    Create an i/o signature.
    """
  return _gnuradio_core_runtime.io_signature2(*args, **kwargs)

def io_signature3(*args, **kwargs):
  """
    io_signature3(int min_streams, int max_streams, int sizeof_stream_item1, 
        int sizeof_stream_item2, int sizeof_stream_item3) -> gr_io_signature_sptr

    Create an i/o signature.
    """
  return _gnuradio_core_runtime.io_signature3(*args, **kwargs)

def io_signaturev(*args, **kwargs):
  """
    io_signaturev(int min_streams, int max_streams, std::vector<(int,std::allocator<(int)>)> sizeof_stream_items) -> gr_io_signature_sptr

    Create an i/o signature.

    If there are more streams than there are entries in sizeof_stream_items, the value of the last entry in sizeof_stream_items is used for the missing values. sizeof_stream_items must contain at least 1 entry.
    """
  return _gnuradio_core_runtime.io_signaturev(*args, **kwargs)
class gr_io_signature(object):
    """
    i/o signature for input and output ports.

    misc

    Create an i/o signature.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gnuradio_core_runtime.delete_gr_io_signature
    __del__ = lambda self : None;
    def min_streams(self):
        """min_streams(self) -> int"""
        return _gnuradio_core_runtime.gr_io_signature_min_streams(self)

    def max_streams(self):
        """max_streams(self) -> int"""
        return _gnuradio_core_runtime.gr_io_signature_max_streams(self)

    def sizeof_stream_item(self, *args, **kwargs):
        """sizeof_stream_item(self, int index) -> int"""
        return _gnuradio_core_runtime.gr_io_signature_sizeof_stream_item(self, *args, **kwargs)

    def sizeof_stream_items(self):
        """sizeof_stream_items(self) -> std::vector<(int,std::allocator<(int)>)>"""
        return _gnuradio_core_runtime.gr_io_signature_sizeof_stream_items(self)

gr_io_signature_swigregister = _gnuradio_core_runtime.gr_io_signature_swigregister
gr_io_signature_swigregister(gr_io_signature)

import gras.GRAS_Block
import gras.GRAS_Element
import gras.GRAS_Tags
import gras.GRAS_SBuffer
class gr_block(gras.GRAS_Block.Block):
    """Proxy of C++ gr_block class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_block
        __init__(self, string name, gr_io_signature_sptr input_signature, 
            gr_io_signature_sptr output_signature) -> gr_block
        """
        this = _gnuradio_core_runtime.new_gr_block(*args)
        try: self.this.append(this)
        except: self.this = this
    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_runtime.gr_block_unique_id(self)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_runtime.gr_block_name(self)

    _unique_id = _swig_property(_gnuradio_core_runtime.gr_block__unique_id_get, _gnuradio_core_runtime.gr_block__unique_id_set)
    _name = _swig_property(_gnuradio_core_runtime.gr_block__name_get, _gnuradio_core_runtime.gr_block__name_set)
    __swig_destroy__ = _gnuradio_core_runtime.delete_gr_block
    __del__ = lambda self : None;
    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_runtime.gr_block_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_runtime.gr_block_output_signature(self)

    def set_input_signature(self, *args, **kwargs):
        """set_input_signature(self, gr_io_signature_sptr sig)"""
        return _gnuradio_core_runtime.gr_block_set_input_signature(self, *args, **kwargs)

    def set_output_signature(self, *args, **kwargs):
        """set_output_signature(self, gr_io_signature_sptr sig)"""
        return _gnuradio_core_runtime.gr_block_set_output_signature(self, *args, **kwargs)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_runtime.gr_block_check_topology(self, *args, **kwargs)

    WORK_CALLED_PRODUCE = _gnuradio_core_runtime.gr_block_WORK_CALLED_PRODUCE
    WORK_DONE = _gnuradio_core_runtime.gr_block_WORK_DONE
    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_runtime.gr_block_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_runtime.gr_block_stop(self)

    def consume_each(self, *args, **kwargs):
        """consume_each(self, int how_many_items)"""
        return _gnuradio_core_runtime.gr_block_consume_each(self, *args, **kwargs)

    def consume(self, *args, **kwargs):
        """consume(self, size_t i, int how_many_items)"""
        return _gnuradio_core_runtime.gr_block_consume(self, *args, **kwargs)

    def produce(self, *args, **kwargs):
        """produce(self, size_t o, int how_many_items)"""
        return _gnuradio_core_runtime.gr_block_produce(self, *args, **kwargs)

    def nitems_read(self, which_input = 0):
        """nitems_read(self, size_t which_input = 0) -> uint64_t"""
        return _gnuradio_core_runtime.gr_block_nitems_read(self, which_input)

    def nitems_written(self, which_output = 0):
        """nitems_written(self, size_t which_output = 0) -> uint64_t"""
        return _gnuradio_core_runtime.gr_block_nitems_written(self, which_output)

    def add_item_tag(self, *args):
        """
        add_item_tag(self, size_t which_output, gr_tag_t tag)
        add_item_tag(self, size_t which_output, uint64_t abs_offset, pmt::pmt_t key, 
            pmt::pmt_t value, pmt::pmt_t srcid = pmt::PMT_F)
        """
        return _gnuradio_core_runtime.gr_block_add_item_tag(self, *args)

    def get_tags_in_range(self, *args, **kwargs):
        """
        get_tags_in_range(self, std::vector<(gr_tag_t,std::allocator<(gr_tag_t)>)> tags, 
            size_t which_input, uint64_t abs_start, 
            uint64_t abs_end, pmt::pmt_t key = pmt::pmt_t())
        """
        return _gnuradio_core_runtime.gr_block_get_tags_in_range(self, *args, **kwargs)

    def set_alignment(self, *args, **kwargs):
        """set_alignment(self, size_t alignment)"""
        return _gnuradio_core_runtime.gr_block_set_alignment(self, *args, **kwargs)

    def is_unaligned(self):
        """is_unaligned(self) -> bool"""
        return _gnuradio_core_runtime.gr_block_is_unaligned(self)

    def fixed_rate_noutput_to_ninput(self, *args, **kwargs):
        """fixed_rate_noutput_to_ninput(self, size_t noutput_items) -> size_t"""
        return _gnuradio_core_runtime.gr_block_fixed_rate_noutput_to_ninput(self, *args, **kwargs)

    def interpolation(self):
        """interpolation(self) -> size_t"""
        return _gnuradio_core_runtime.gr_block_interpolation(self)

    def set_interpolation(self, *args, **kwargs):
        """set_interpolation(self, size_t arg0)"""
        return _gnuradio_core_runtime.gr_block_set_interpolation(self, *args, **kwargs)

    def decimation(self):
        """decimation(self) -> size_t"""
        return _gnuradio_core_runtime.gr_block_decimation(self)

    def set_decimation(self, *args, **kwargs):
        """set_decimation(self, size_t arg0)"""
        return _gnuradio_core_runtime.gr_block_set_decimation(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _gnuradio_core_runtime.gr_block_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int arg0)"""
        return _gnuradio_core_runtime.gr_block_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _gnuradio_core_runtime.gr_block_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _gnuradio_core_runtime.gr_block_is_set_max_noutput_items(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_runtime.gr_block_history(self)

    def set_history(self, *args, **kwargs):
        """set_history(self, unsigned int history)"""
        return _gnuradio_core_runtime.gr_block_set_history(self, *args, **kwargs)

    def set_fixed_rate(self, *args, **kwargs):
        """set_fixed_rate(self, bool fixed_rate)"""
        return _gnuradio_core_runtime.gr_block_set_fixed_rate(self, *args, **kwargs)

    def fixed_rate(self):
        """fixed_rate(self) -> bool"""
        return _gnuradio_core_runtime.gr_block_fixed_rate(self)

    def set_relative_rate(self, *args, **kwargs):
        """set_relative_rate(self, double relative_rate)"""
        return _gnuradio_core_runtime.gr_block_set_relative_rate(self, *args, **kwargs)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_runtime.gr_block_relative_rate(self)

    def set_output_multiple(self, *args, **kwargs):
        """set_output_multiple(self, size_t multiple)"""
        return _gnuradio_core_runtime.gr_block_set_output_multiple(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(self) -> size_t"""
        return _gnuradio_core_runtime.gr_block_output_multiple(self)

    TPP_DONT = _gnuradio_core_runtime.gr_block_TPP_DONT
    TPP_ALL_TO_ALL = _gnuradio_core_runtime.gr_block_TPP_ALL_TO_ALL
    TPP_ONE_TO_ONE = _gnuradio_core_runtime.gr_block_TPP_ONE_TO_ONE
    def tag_propagation_policy(self):
        """tag_propagation_policy(self) -> tag_propagation_policy_t"""
        return _gnuradio_core_runtime.gr_block_tag_propagation_policy(self)

    def set_tag_propagation_policy(self, *args, **kwargs):
        """set_tag_propagation_policy(self, tag_propagation_policy_t p)"""
        return _gnuradio_core_runtime.gr_block_set_tag_propagation_policy(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long arg0)
        set_max_output_buffer(self, int arg0, long arg1)
        """
        return _gnuradio_core_runtime.gr_block_set_max_output_buffer(self, *args)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, size_t arg0) -> long"""
        return _gnuradio_core_runtime.gr_block_max_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long arg0)
        set_min_output_buffer(self, int arg0, long arg1)
        """
        return _gnuradio_core_runtime.gr_block_set_min_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, size_t arg0) -> long"""
        return _gnuradio_core_runtime.gr_block_min_output_buffer(self, *args, **kwargs)

    d_symbol_alias = _swig_property(_gnuradio_core_runtime.gr_block_d_symbol_alias_get, _gnuradio_core_runtime.gr_block_d_symbol_alias_set)
    d_symbol_name = _swig_property(_gnuradio_core_runtime.gr_block_d_symbol_name_get, _gnuradio_core_runtime.gr_block_d_symbol_name_set)
    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _gnuradio_core_runtime.gr_block_symbol_name(self)

    def alias_set(self):
        """alias_set(self) -> bool"""
        return _gnuradio_core_runtime.gr_block_alias_set(self)

    def alias(self):
        """alias(self) -> string"""
        return _gnuradio_core_runtime.gr_block_alias(self)

    def alias_pmt(self):
        """alias_pmt(self) -> pmt::pmt_t"""
        return _gnuradio_core_runtime.gr_block_alias_pmt(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _gnuradio_core_runtime.gr_block_set_block_alias(self, *args, **kwargs)

    msg_queue = _swig_property(_gnuradio_core_runtime.gr_block_msg_queue_get, _gnuradio_core_runtime.gr_block_msg_queue_set)
    message_subscribers = _swig_property(_gnuradio_core_runtime.gr_block_message_subscribers_get, _gnuradio_core_runtime.gr_block_message_subscribers_set)
    d_msg_handlers = _swig_property(_gnuradio_core_runtime.gr_block_d_msg_handlers_get, _gnuradio_core_runtime.gr_block_d_msg_handlers_set)
    def message_port_register_in(self, *args, **kwargs):
        """message_port_register_in(self, pmt::pmt_t arg0)"""
        return _gnuradio_core_runtime.gr_block_message_port_register_in(self, *args, **kwargs)

    def message_port_register_out(self, *args, **kwargs):
        """message_port_register_out(self, pmt::pmt_t arg0)"""
        return _gnuradio_core_runtime.gr_block_message_port_register_out(self, *args, **kwargs)

    def message_port_pub(self, *args, **kwargs):
        """message_port_pub(self, pmt::pmt_t arg0, pmt::pmt_t arg1)"""
        return _gnuradio_core_runtime.gr_block_message_port_pub(self, *args, **kwargs)

    def message_port_sub(self, *args, **kwargs):
        """message_port_sub(self, pmt::pmt_t arg0, pmt::pmt_t arg1)"""
        return _gnuradio_core_runtime.gr_block_message_port_sub(self, *args, **kwargs)

    def message_port_unsub(self, *args, **kwargs):
        """message_port_unsub(self, pmt::pmt_t arg0, pmt::pmt_t arg1)"""
        return _gnuradio_core_runtime.gr_block_message_port_unsub(self, *args, **kwargs)

    def message_port_is_hier(self, *args, **kwargs):
        """message_port_is_hier(self, pmt::pmt_t port_id) -> bool"""
        return _gnuradio_core_runtime.gr_block_message_port_is_hier(self, *args, **kwargs)

    def message_port_is_hier_in(self, *args, **kwargs):
        """message_port_is_hier_in(self, pmt::pmt_t port_id) -> bool"""
        return _gnuradio_core_runtime.gr_block_message_port_is_hier_in(self, *args, **kwargs)

    def message_port_is_hier_out(self, *args, **kwargs):
        """message_port_is_hier_out(self, pmt::pmt_t port_id) -> bool"""
        return _gnuradio_core_runtime.gr_block_message_port_is_hier_out(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt::pmt_t"""
        return _gnuradio_core_runtime.gr_block_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt::pmt_t"""
        return _gnuradio_core_runtime.gr_block_message_ports_out(self)

    def empty_p(self, *args):
        """
        empty_p(self, pmt::pmt_t which_port) -> bool
        empty_p(self) -> bool
        """
        return _gnuradio_core_runtime.gr_block_empty_p(self, *args)

    def insert_tail(self, *args, **kwargs):
        """insert_tail(self, pmt::pmt_t arg0, pmt::pmt_t arg1)"""
        return _gnuradio_core_runtime.gr_block_insert_tail(self, *args, **kwargs)

    def delete_head_nowait(self, *args, **kwargs):
        """delete_head_nowait(self, pmt::pmt_t arg0) -> pmt::pmt_t"""
        return _gnuradio_core_runtime.gr_block_delete_head_nowait(self, *args, **kwargs)

    def delete_head_blocking(self, *args, **kwargs):
        """delete_head_blocking(self, pmt::pmt_t arg0) -> pmt::pmt_t"""
        return _gnuradio_core_runtime.gr_block_delete_head_blocking(self, *args, **kwargs)

    def get_iterator(self, *args, **kwargs):
        """get_iterator(self, pmt::pmt_t which_port) -> gr_block::msg_queue_t::iterator"""
        return _gnuradio_core_runtime.gr_block_get_iterator(self, *args, **kwargs)

    def erase_msg(self, *args, **kwargs):
        """erase_msg(self, pmt::pmt_t which_port, gr_block::msg_queue_t::iterator it)"""
        return _gnuradio_core_runtime.gr_block_erase_msg(self, *args, **kwargs)

    def has_msg_port(self, *args, **kwargs):
        """has_msg_port(self, pmt::pmt_t which_port) -> bool"""
        return _gnuradio_core_runtime.gr_block_has_msg_port(self, *args, **kwargs)

    def has_msg_handler(self, *args, **kwargs):
        """has_msg_handler(self, pmt::pmt_t which_port) -> bool"""
        return _gnuradio_core_runtime.gr_block_has_msg_handler(self, *args, **kwargs)

    def dispatch_msg(self, *args, **kwargs):
        """dispatch_msg(self, pmt::pmt_t which_port, pmt::pmt_t msg)"""
        return _gnuradio_core_runtime.gr_block_dispatch_msg(self, *args, **kwargs)

    d_affinity = _swig_property(_gnuradio_core_runtime.gr_block_d_affinity_get, _gnuradio_core_runtime.gr_block_d_affinity_set)
    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(self, std::vector<(int,std::allocator<(int)>)> mask)"""
        return _gnuradio_core_runtime.gr_block_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(self)"""
        return _gnuradio_core_runtime.gr_block_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(self) -> std::vector<(int,std::allocator<(int)>)>"""
        return _gnuradio_core_runtime.gr_block_processor_affinity(self)

    _work_ninput_items = _swig_property(_gnuradio_core_runtime.gr_block__work_ninput_items_get, _gnuradio_core_runtime.gr_block__work_ninput_items_set)
    _fcast_ninput_items = _swig_property(_gnuradio_core_runtime.gr_block__fcast_ninput_items_get, _gnuradio_core_runtime.gr_block__fcast_ninput_items_set)
    _num_outputs = _swig_property(_gnuradio_core_runtime.gr_block__num_outputs_get, _gnuradio_core_runtime.gr_block__num_outputs_set)
    _work_io_ptr_mask = _swig_property(_gnuradio_core_runtime.gr_block__work_io_ptr_mask_get, _gnuradio_core_runtime.gr_block__work_io_ptr_mask_set)
    _output_multiple_items = _swig_property(_gnuradio_core_runtime.gr_block__output_multiple_items_get, _gnuradio_core_runtime.gr_block__output_multiple_items_set)
    _relative_rate = _swig_property(_gnuradio_core_runtime.gr_block__relative_rate_get, _gnuradio_core_runtime.gr_block__relative_rate_set)
    _enable_fixed_rate = _swig_property(_gnuradio_core_runtime.gr_block__enable_fixed_rate_get, _gnuradio_core_runtime.gr_block__enable_fixed_rate_set)
    _input_history_items = _swig_property(_gnuradio_core_runtime.gr_block__input_history_items_get, _gnuradio_core_runtime.gr_block__input_history_items_set)
    _tag_prop_policy = _swig_property(_gnuradio_core_runtime.gr_block__tag_prop_policy_get, _gnuradio_core_runtime.gr_block__tag_prop_policy_set)
    _interp = _swig_property(_gnuradio_core_runtime.gr_block__interp_get, _gnuradio_core_runtime.gr_block__interp_set)
    _decim = _swig_property(_gnuradio_core_runtime.gr_block__decim_get, _gnuradio_core_runtime.gr_block__decim_set)
    _in_sig = _swig_property(_gnuradio_core_runtime.gr_block__in_sig_get, _gnuradio_core_runtime.gr_block__in_sig_set)
    _out_sig = _swig_property(_gnuradio_core_runtime.gr_block__out_sig_get, _gnuradio_core_runtime.gr_block__out_sig_set)
    def _update_input_reserve(self):
        """_update_input_reserve(self)"""
        return _gnuradio_core_runtime.gr_block__update_input_reserve(self)

gr_block_swigregister = _gnuradio_core_runtime.gr_block_swigregister
gr_block_swigregister(gr_block)

class gr_hier_block2(object):
    """Proxy of C++ gr_hier_block2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_hier_block2
        __init__(self, string name, gr_io_signature_sptr input_signature, 
            gr_io_signature_sptr output_signature) -> gr_hier_block2
        """
        this = _gnuradio_core_runtime.new_gr_hier_block2(*args)
        try: self.this.append(this)
        except: self.this = this
    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_runtime.gr_hier_block2_unique_id(self)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_runtime.gr_hier_block2_name(self)

    _unique_id = _swig_property(_gnuradio_core_runtime.gr_hier_block2__unique_id_get, _gnuradio_core_runtime.gr_hier_block2__unique_id_set)
    _name = _swig_property(_gnuradio_core_runtime.gr_hier_block2__name_get, _gnuradio_core_runtime.gr_hier_block2__name_set)
    def self(self):
        """self(self) -> gr_hier_block2"""
        return _gnuradio_core_runtime.gr_hier_block2_self(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_runtime.gr_hier_block2_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_runtime.gr_hier_block2_output_signature(self)

    def set_input_signature(self, *args, **kwargs):
        """set_input_signature(self, gr_io_signature_sptr sig)"""
        return _gnuradio_core_runtime.gr_hier_block2_set_input_signature(self, *args, **kwargs)

    def set_output_signature(self, *args, **kwargs):
        """set_output_signature(self, gr_io_signature_sptr sig)"""
        return _gnuradio_core_runtime.gr_hier_block2_set_output_signature(self, *args, **kwargs)

    def lock(self):
        """lock(self)"""
        return _gnuradio_core_runtime.gr_hier_block2_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _gnuradio_core_runtime.gr_hier_block2_unlock(self)

    _in_sig = _swig_property(_gnuradio_core_runtime.gr_hier_block2__in_sig_get, _gnuradio_core_runtime.gr_hier_block2__in_sig_set)
    _out_sig = _swig_property(_gnuradio_core_runtime.gr_hier_block2__out_sig_get, _gnuradio_core_runtime.gr_hier_block2__out_sig_set)
    __swig_destroy__ = _gnuradio_core_runtime.delete_gr_hier_block2
    __del__ = lambda self : None;
gr_hier_block2_swigregister = _gnuradio_core_runtime.gr_hier_block2_swigregister
gr_hier_block2_swigregister(gr_hier_block2)


def gr_make_hier_block2(*args, **kwargs):
  """
    gr_make_hier_block2(string name, gr_io_signature_sptr input_signature, 
        gr_io_signature_sptr output_signature) -> gr_hier_block2_sptr
    """
  return _gnuradio_core_runtime.gr_make_hier_block2(*args, **kwargs)
class gr_top_block(object):
    """Proxy of C++ gr_top_block class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_top_block
        __init__(self, string name) -> gr_top_block
        """
        this = _gnuradio_core_runtime.new_gr_top_block(*args)
        try: self.this.append(this)
        except: self.this = this
    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_runtime.gr_top_block_unique_id(self)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_runtime.gr_top_block_name(self)

    _unique_id = _swig_property(_gnuradio_core_runtime.gr_top_block__unique_id_get, _gnuradio_core_runtime.gr_top_block__unique_id_set)
    _name = _swig_property(_gnuradio_core_runtime.gr_top_block__name_get, _gnuradio_core_runtime.gr_top_block__name_set)
    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _gnuradio_core_runtime.gr_top_block_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int max_items)"""
        return _gnuradio_core_runtime.gr_top_block_set_max_noutput_items(self, *args, **kwargs)

    def run(self, *args):
        """
        run(self, size_t max_items)
        run(self)
        """
        return _gnuradio_core_runtime.gr_top_block_run(self, *args)

    def start(self, *args):
        """
        start(self, size_t max_items)
        start(self)
        """
        return _gnuradio_core_runtime.gr_top_block_start(self, *args)

    def stop(self):
        """stop(self)"""
        return _gnuradio_core_runtime.gr_top_block_stop(self)

    def wait(self):
        """wait(self)"""
        return _gnuradio_core_runtime.gr_top_block_wait(self)

    def lock(self):
        """lock(self)"""
        return _gnuradio_core_runtime.gr_top_block_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _gnuradio_core_runtime.gr_top_block_unlock(self)

    __swig_destroy__ = _gnuradio_core_runtime.delete_gr_top_block
    __del__ = lambda self : None;
gr_top_block_swigregister = _gnuradio_core_runtime.gr_top_block_swigregister
gr_top_block_swigregister(gr_top_block)


def gr_make_top_block(*args, **kwargs):
  """gr_make_top_block(string name) -> gr_top_block_sptr"""
  return _gnuradio_core_runtime.gr_make_top_block(*args, **kwargs)
class gr_sync_block(gr_block):
    """Proxy of C++ gr_sync_block class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_sync_block
        __init__(self, string name, gr_io_signature_sptr input_signature, 
            gr_io_signature_sptr output_signature) -> gr_sync_block
        """
        this = _gnuradio_core_runtime.new_gr_sync_block(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnuradio_core_runtime.delete_gr_sync_block
    __del__ = lambda self : None;
gr_sync_block_swigregister = _gnuradio_core_runtime.gr_sync_block_swigregister
gr_sync_block_swigregister(gr_sync_block)

class gr_sync_decimator(gr_sync_block):
    """Proxy of C++ gr_sync_decimator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_sync_decimator
        __init__(self, string name, gr_io_signature_sptr input_signature, 
            gr_io_signature_sptr output_signature, size_t decim_rate) -> gr_sync_decimator
        """
        this = _gnuradio_core_runtime.new_gr_sync_decimator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnuradio_core_runtime.delete_gr_sync_decimator
    __del__ = lambda self : None;
gr_sync_decimator_swigregister = _gnuradio_core_runtime.gr_sync_decimator_swigregister
gr_sync_decimator_swigregister(gr_sync_decimator)

class gr_sync_interpolator(gr_sync_block):
    """Proxy of C++ gr_sync_interpolator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_sync_interpolator
        __init__(self, string name, gr_io_signature_sptr input_signature, 
            gr_io_signature_sptr output_signature, size_t interp_rate) -> gr_sync_interpolator
        """
        this = _gnuradio_core_runtime.new_gr_sync_interpolator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnuradio_core_runtime.delete_gr_sync_interpolator
    __del__ = lambda self : None;
gr_sync_interpolator_swigregister = _gnuradio_core_runtime.gr_sync_interpolator_swigregister
gr_sync_interpolator_swigregister(gr_sync_interpolator)



