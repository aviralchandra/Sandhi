# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PMCNumericArray', [dirname(__file__)])
        except ImportError:
            import _PMCNumericArray
            return _PMCNumericArray
        if fp is not None:
            try:
                _mod = imp.load_module('_PMCNumericArray', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _PMCNumericArray = swig_import_helper()
    del swig_import_helper
else:
    import _PMCNumericArray
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


from PMC import *


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PMCNumericArray.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _PMCNumericArray.SwigPyIterator_value(self)
    def incr(self, n = 1): return _PMCNumericArray.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _PMCNumericArray.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _PMCNumericArray.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _PMCNumericArray.SwigPyIterator_equal(self, *args)
    def copy(self): return _PMCNumericArray.SwigPyIterator_copy(self)
    def next(self): return _PMCNumericArray.SwigPyIterator_next(self)
    def __next__(self): return _PMCNumericArray.SwigPyIterator___next__(self)
    def previous(self): return _PMCNumericArray.SwigPyIterator_previous(self)
    def advance(self, *args): return _PMCNumericArray.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _PMCNumericArray.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _PMCNumericArray.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _PMCNumericArray.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _PMCNumericArray.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _PMCNumericArray.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _PMCNumericArray.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _PMCNumericArray.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class pair_ptr_size(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pair_ptr_size, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair_ptr_size, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PMCNumericArray.new_pair_ptr_size(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _PMCNumericArray.pair_ptr_size_first_set
    __swig_getmethods__["first"] = _PMCNumericArray.pair_ptr_size_first_get
    if _newclass:first = _swig_property(_PMCNumericArray.pair_ptr_size_first_get, _PMCNumericArray.pair_ptr_size_first_set)
    __swig_setmethods__["second"] = _PMCNumericArray.pair_ptr_size_second_set
    __swig_getmethods__["second"] = _PMCNumericArray.pair_ptr_size_second_get
    if _newclass:second = _swig_property(_PMCNumericArray.pair_ptr_size_second_get, _PMCNumericArray.pair_ptr_size_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _PMCNumericArray.delete_pair_ptr_size
    __del__ = lambda self : None;
pair_ptr_size_swigregister = _PMCNumericArray.pair_ptr_size_swigregister
pair_ptr_size_swigregister(pair_ptr_size)

class BufferWrapper(object):
    def __init__(self, addr, dtype, nitems, readonly=False, container=None):
        self.container = container
        self.__array_interface__ = {
            'data' : (addr, readonly),
            'typestr' : dtype.base.str,
            'descr' : dtype.base.descr,
            'shape' : (nitems,) + dtype.shape,
            'strides' : None,
            'version' : 3,
        }

def pointer_to_ndarray(addr, dtype, nitems, readonly=False, container=None):
    return numpy.asarray(BufferWrapper(addr, dtype, nitems, readonly, container)).view(dtype.base)



def pmc_is_array_of_int8_t(*args):
  return _PMCNumericArray.pmc_is_array_of_int8_t(*args)
pmc_is_array_of_int8_t = _PMCNumericArray.pmc_is_array_of_int8_t

def info_of_array_of_int8_t(*args):
  return _PMCNumericArray.info_of_array_of_int8_t(*args)
info_of_array_of_int8_t = _PMCNumericArray.info_of_array_of_int8_t

def pmc_make_array_of_int8_t(*args):
  return _PMCNumericArray.pmc_make_array_of_int8_t(*args)
pmc_make_array_of_int8_t = _PMCNumericArray.pmc_make_array_of_int8_t
try:
    import numpy

    def pmc_to_numpy_array_int8_t(p):
        addr, size = info_of_array_of_int8_t(p)
        dtype = numpy.dtype(numpy.int8)
        readonly = not isinstance(p, PMC)
        return pointer_to_ndarray(addr, dtype, size, readonly, p)

    def numpy_array_int8_t_to_pmc(a):
        return pmc_make_array_of_int8_t(a.ctypes.data, len(a))

    RegisterPy2PMC(
        is_py = lambda x: isinstance(x, numpy.ndarray) and (x.dtype == numpy.int8),
        py2pmc = numpy_array_int8_t_to_pmc,
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_array_of_int8_t,
        pmc2py = pmc_to_numpy_array_int8_t,
    )
except ImportError: pass


def pmc_is_array_of_int16_t(*args):
  return _PMCNumericArray.pmc_is_array_of_int16_t(*args)
pmc_is_array_of_int16_t = _PMCNumericArray.pmc_is_array_of_int16_t

def info_of_array_of_int16_t(*args):
  return _PMCNumericArray.info_of_array_of_int16_t(*args)
info_of_array_of_int16_t = _PMCNumericArray.info_of_array_of_int16_t

def pmc_make_array_of_int16_t(*args):
  return _PMCNumericArray.pmc_make_array_of_int16_t(*args)
pmc_make_array_of_int16_t = _PMCNumericArray.pmc_make_array_of_int16_t
try:
    import numpy

    def pmc_to_numpy_array_int16_t(p):
        addr, size = info_of_array_of_int16_t(p)
        dtype = numpy.dtype(numpy.int16)
        readonly = not isinstance(p, PMC)
        return pointer_to_ndarray(addr, dtype, size, readonly, p)

    def numpy_array_int16_t_to_pmc(a):
        return pmc_make_array_of_int16_t(a.ctypes.data, len(a))

    RegisterPy2PMC(
        is_py = lambda x: isinstance(x, numpy.ndarray) and (x.dtype == numpy.int16),
        py2pmc = numpy_array_int16_t_to_pmc,
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_array_of_int16_t,
        pmc2py = pmc_to_numpy_array_int16_t,
    )
except ImportError: pass


def pmc_is_array_of_int32_t(*args):
  return _PMCNumericArray.pmc_is_array_of_int32_t(*args)
pmc_is_array_of_int32_t = _PMCNumericArray.pmc_is_array_of_int32_t

def info_of_array_of_int32_t(*args):
  return _PMCNumericArray.info_of_array_of_int32_t(*args)
info_of_array_of_int32_t = _PMCNumericArray.info_of_array_of_int32_t

def pmc_make_array_of_int32_t(*args):
  return _PMCNumericArray.pmc_make_array_of_int32_t(*args)
pmc_make_array_of_int32_t = _PMCNumericArray.pmc_make_array_of_int32_t
try:
    import numpy

    def pmc_to_numpy_array_int32_t(p):
        addr, size = info_of_array_of_int32_t(p)
        dtype = numpy.dtype(numpy.int32)
        readonly = not isinstance(p, PMC)
        return pointer_to_ndarray(addr, dtype, size, readonly, p)

    def numpy_array_int32_t_to_pmc(a):
        return pmc_make_array_of_int32_t(a.ctypes.data, len(a))

    RegisterPy2PMC(
        is_py = lambda x: isinstance(x, numpy.ndarray) and (x.dtype == numpy.int32),
        py2pmc = numpy_array_int32_t_to_pmc,
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_array_of_int32_t,
        pmc2py = pmc_to_numpy_array_int32_t,
    )
except ImportError: pass


def pmc_is_array_of_int64_t(*args):
  return _PMCNumericArray.pmc_is_array_of_int64_t(*args)
pmc_is_array_of_int64_t = _PMCNumericArray.pmc_is_array_of_int64_t

def info_of_array_of_int64_t(*args):
  return _PMCNumericArray.info_of_array_of_int64_t(*args)
info_of_array_of_int64_t = _PMCNumericArray.info_of_array_of_int64_t

def pmc_make_array_of_int64_t(*args):
  return _PMCNumericArray.pmc_make_array_of_int64_t(*args)
pmc_make_array_of_int64_t = _PMCNumericArray.pmc_make_array_of_int64_t
try:
    import numpy

    def pmc_to_numpy_array_int64_t(p):
        addr, size = info_of_array_of_int64_t(p)
        dtype = numpy.dtype(numpy.int64)
        readonly = not isinstance(p, PMC)
        return pointer_to_ndarray(addr, dtype, size, readonly, p)

    def numpy_array_int64_t_to_pmc(a):
        return pmc_make_array_of_int64_t(a.ctypes.data, len(a))

    RegisterPy2PMC(
        is_py = lambda x: isinstance(x, numpy.ndarray) and (x.dtype == numpy.int64),
        py2pmc = numpy_array_int64_t_to_pmc,
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_array_of_int64_t,
        pmc2py = pmc_to_numpy_array_int64_t,
    )
except ImportError: pass


def pmc_is_array_of_uint8_t(*args):
  return _PMCNumericArray.pmc_is_array_of_uint8_t(*args)
pmc_is_array_of_uint8_t = _PMCNumericArray.pmc_is_array_of_uint8_t

def info_of_array_of_uint8_t(*args):
  return _PMCNumericArray.info_of_array_of_uint8_t(*args)
info_of_array_of_uint8_t = _PMCNumericArray.info_of_array_of_uint8_t

def pmc_make_array_of_uint8_t(*args):
  return _PMCNumericArray.pmc_make_array_of_uint8_t(*args)
pmc_make_array_of_uint8_t = _PMCNumericArray.pmc_make_array_of_uint8_t
try:
    import numpy

    def pmc_to_numpy_array_uint8_t(p):
        addr, size = info_of_array_of_uint8_t(p)
        dtype = numpy.dtype(numpy.uint8)
        readonly = not isinstance(p, PMC)
        return pointer_to_ndarray(addr, dtype, size, readonly, p)

    def numpy_array_uint8_t_to_pmc(a):
        return pmc_make_array_of_uint8_t(a.ctypes.data, len(a))

    RegisterPy2PMC(
        is_py = lambda x: isinstance(x, numpy.ndarray) and (x.dtype == numpy.uint8),
        py2pmc = numpy_array_uint8_t_to_pmc,
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_array_of_uint8_t,
        pmc2py = pmc_to_numpy_array_uint8_t,
    )
except ImportError: pass


def pmc_is_array_of_uint16_t(*args):
  return _PMCNumericArray.pmc_is_array_of_uint16_t(*args)
pmc_is_array_of_uint16_t = _PMCNumericArray.pmc_is_array_of_uint16_t

def info_of_array_of_uint16_t(*args):
  return _PMCNumericArray.info_of_array_of_uint16_t(*args)
info_of_array_of_uint16_t = _PMCNumericArray.info_of_array_of_uint16_t

def pmc_make_array_of_uint16_t(*args):
  return _PMCNumericArray.pmc_make_array_of_uint16_t(*args)
pmc_make_array_of_uint16_t = _PMCNumericArray.pmc_make_array_of_uint16_t
try:
    import numpy

    def pmc_to_numpy_array_uint16_t(p):
        addr, size = info_of_array_of_uint16_t(p)
        dtype = numpy.dtype(numpy.uint16)
        readonly = not isinstance(p, PMC)
        return pointer_to_ndarray(addr, dtype, size, readonly, p)

    def numpy_array_uint16_t_to_pmc(a):
        return pmc_make_array_of_uint16_t(a.ctypes.data, len(a))

    RegisterPy2PMC(
        is_py = lambda x: isinstance(x, numpy.ndarray) and (x.dtype == numpy.uint16),
        py2pmc = numpy_array_uint16_t_to_pmc,
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_array_of_uint16_t,
        pmc2py = pmc_to_numpy_array_uint16_t,
    )
except ImportError: pass


def pmc_is_array_of_uint32_t(*args):
  return _PMCNumericArray.pmc_is_array_of_uint32_t(*args)
pmc_is_array_of_uint32_t = _PMCNumericArray.pmc_is_array_of_uint32_t

def info_of_array_of_uint32_t(*args):
  return _PMCNumericArray.info_of_array_of_uint32_t(*args)
info_of_array_of_uint32_t = _PMCNumericArray.info_of_array_of_uint32_t

def pmc_make_array_of_uint32_t(*args):
  return _PMCNumericArray.pmc_make_array_of_uint32_t(*args)
pmc_make_array_of_uint32_t = _PMCNumericArray.pmc_make_array_of_uint32_t
try:
    import numpy

    def pmc_to_numpy_array_uint32_t(p):
        addr, size = info_of_array_of_uint32_t(p)
        dtype = numpy.dtype(numpy.uint32)
        readonly = not isinstance(p, PMC)
        return pointer_to_ndarray(addr, dtype, size, readonly, p)

    def numpy_array_uint32_t_to_pmc(a):
        return pmc_make_array_of_uint32_t(a.ctypes.data, len(a))

    RegisterPy2PMC(
        is_py = lambda x: isinstance(x, numpy.ndarray) and (x.dtype == numpy.uint32),
        py2pmc = numpy_array_uint32_t_to_pmc,
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_array_of_uint32_t,
        pmc2py = pmc_to_numpy_array_uint32_t,
    )
except ImportError: pass


def pmc_is_array_of_uint64_t(*args):
  return _PMCNumericArray.pmc_is_array_of_uint64_t(*args)
pmc_is_array_of_uint64_t = _PMCNumericArray.pmc_is_array_of_uint64_t

def info_of_array_of_uint64_t(*args):
  return _PMCNumericArray.info_of_array_of_uint64_t(*args)
info_of_array_of_uint64_t = _PMCNumericArray.info_of_array_of_uint64_t

def pmc_make_array_of_uint64_t(*args):
  return _PMCNumericArray.pmc_make_array_of_uint64_t(*args)
pmc_make_array_of_uint64_t = _PMCNumericArray.pmc_make_array_of_uint64_t
try:
    import numpy

    def pmc_to_numpy_array_uint64_t(p):
        addr, size = info_of_array_of_uint64_t(p)
        dtype = numpy.dtype(numpy.uint64)
        readonly = not isinstance(p, PMC)
        return pointer_to_ndarray(addr, dtype, size, readonly, p)

    def numpy_array_uint64_t_to_pmc(a):
        return pmc_make_array_of_uint64_t(a.ctypes.data, len(a))

    RegisterPy2PMC(
        is_py = lambda x: isinstance(x, numpy.ndarray) and (x.dtype == numpy.uint64),
        py2pmc = numpy_array_uint64_t_to_pmc,
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_array_of_uint64_t,
        pmc2py = pmc_to_numpy_array_uint64_t,
    )
except ImportError: pass


def pmc_is_array_of_long_t(*args):
  return _PMCNumericArray.pmc_is_array_of_long_t(*args)
pmc_is_array_of_long_t = _PMCNumericArray.pmc_is_array_of_long_t

def info_of_array_of_long_t(*args):
  return _PMCNumericArray.info_of_array_of_long_t(*args)
info_of_array_of_long_t = _PMCNumericArray.info_of_array_of_long_t

def pmc_make_array_of_long_t(*args):
  return _PMCNumericArray.pmc_make_array_of_long_t(*args)
pmc_make_array_of_long_t = _PMCNumericArray.pmc_make_array_of_long_t
try:
    import numpy

    def pmc_to_numpy_array_long_t(p):
        addr, size = info_of_array_of_long_t(p)
        dtype = numpy.dtype(numpy.long)
        readonly = not isinstance(p, PMC)
        return pointer_to_ndarray(addr, dtype, size, readonly, p)

    def numpy_array_long_t_to_pmc(a):
        return pmc_make_array_of_long_t(a.ctypes.data, len(a))

    RegisterPy2PMC(
        is_py = lambda x: isinstance(x, numpy.ndarray) and (x.dtype == numpy.long),
        py2pmc = numpy_array_long_t_to_pmc,
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_array_of_long_t,
        pmc2py = pmc_to_numpy_array_long_t,
    )
except ImportError: pass


def pmc_is_array_of_ulong_t(*args):
  return _PMCNumericArray.pmc_is_array_of_ulong_t(*args)
pmc_is_array_of_ulong_t = _PMCNumericArray.pmc_is_array_of_ulong_t

def info_of_array_of_ulong_t(*args):
  return _PMCNumericArray.info_of_array_of_ulong_t(*args)
info_of_array_of_ulong_t = _PMCNumericArray.info_of_array_of_ulong_t

def pmc_make_array_of_ulong_t(*args):
  return _PMCNumericArray.pmc_make_array_of_ulong_t(*args)
pmc_make_array_of_ulong_t = _PMCNumericArray.pmc_make_array_of_ulong_t
try:
    import numpy

    def pmc_to_numpy_array_ulong_t(p):
        addr, size = info_of_array_of_ulong_t(p)
        dtype = numpy.dtype(numpy.ulong)
        readonly = not isinstance(p, PMC)
        return pointer_to_ndarray(addr, dtype, size, readonly, p)

    def numpy_array_ulong_t_to_pmc(a):
        return pmc_make_array_of_ulong_t(a.ctypes.data, len(a))

    RegisterPy2PMC(
        is_py = lambda x: isinstance(x, numpy.ndarray) and (x.dtype == numpy.ulong),
        py2pmc = numpy_array_ulong_t_to_pmc,
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_array_of_ulong_t,
        pmc2py = pmc_to_numpy_array_ulong_t,
    )
except ImportError: pass


def pmc_is_array_of_longlong_t(*args):
  return _PMCNumericArray.pmc_is_array_of_longlong_t(*args)
pmc_is_array_of_longlong_t = _PMCNumericArray.pmc_is_array_of_longlong_t

def info_of_array_of_longlong_t(*args):
  return _PMCNumericArray.info_of_array_of_longlong_t(*args)
info_of_array_of_longlong_t = _PMCNumericArray.info_of_array_of_longlong_t

def pmc_make_array_of_longlong_t(*args):
  return _PMCNumericArray.pmc_make_array_of_longlong_t(*args)
pmc_make_array_of_longlong_t = _PMCNumericArray.pmc_make_array_of_longlong_t
try:
    import numpy

    def pmc_to_numpy_array_longlong_t(p):
        addr, size = info_of_array_of_longlong_t(p)
        dtype = numpy.dtype(numpy.longlong)
        readonly = not isinstance(p, PMC)
        return pointer_to_ndarray(addr, dtype, size, readonly, p)

    def numpy_array_longlong_t_to_pmc(a):
        return pmc_make_array_of_longlong_t(a.ctypes.data, len(a))

    RegisterPy2PMC(
        is_py = lambda x: isinstance(x, numpy.ndarray) and (x.dtype == numpy.longlong),
        py2pmc = numpy_array_longlong_t_to_pmc,
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_array_of_longlong_t,
        pmc2py = pmc_to_numpy_array_longlong_t,
    )
except ImportError: pass


def pmc_is_array_of_ulonglong_t(*args):
  return _PMCNumericArray.pmc_is_array_of_ulonglong_t(*args)
pmc_is_array_of_ulonglong_t = _PMCNumericArray.pmc_is_array_of_ulonglong_t

def info_of_array_of_ulonglong_t(*args):
  return _PMCNumericArray.info_of_array_of_ulonglong_t(*args)
info_of_array_of_ulonglong_t = _PMCNumericArray.info_of_array_of_ulonglong_t

def pmc_make_array_of_ulonglong_t(*args):
  return _PMCNumericArray.pmc_make_array_of_ulonglong_t(*args)
pmc_make_array_of_ulonglong_t = _PMCNumericArray.pmc_make_array_of_ulonglong_t
try:
    import numpy

    def pmc_to_numpy_array_ulonglong_t(p):
        addr, size = info_of_array_of_ulonglong_t(p)
        dtype = numpy.dtype(numpy.ulonglong)
        readonly = not isinstance(p, PMC)
        return pointer_to_ndarray(addr, dtype, size, readonly, p)

    def numpy_array_ulonglong_t_to_pmc(a):
        return pmc_make_array_of_ulonglong_t(a.ctypes.data, len(a))

    RegisterPy2PMC(
        is_py = lambda x: isinstance(x, numpy.ndarray) and (x.dtype == numpy.ulonglong),
        py2pmc = numpy_array_ulonglong_t_to_pmc,
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_array_of_ulonglong_t,
        pmc2py = pmc_to_numpy_array_ulonglong_t,
    )
except ImportError: pass


def pmc_is_array_of_float32_t(*args):
  return _PMCNumericArray.pmc_is_array_of_float32_t(*args)
pmc_is_array_of_float32_t = _PMCNumericArray.pmc_is_array_of_float32_t

def info_of_array_of_float32_t(*args):
  return _PMCNumericArray.info_of_array_of_float32_t(*args)
info_of_array_of_float32_t = _PMCNumericArray.info_of_array_of_float32_t

def pmc_make_array_of_float32_t(*args):
  return _PMCNumericArray.pmc_make_array_of_float32_t(*args)
pmc_make_array_of_float32_t = _PMCNumericArray.pmc_make_array_of_float32_t
try:
    import numpy

    def pmc_to_numpy_array_float32_t(p):
        addr, size = info_of_array_of_float32_t(p)
        dtype = numpy.dtype(numpy.float32)
        readonly = not isinstance(p, PMC)
        return pointer_to_ndarray(addr, dtype, size, readonly, p)

    def numpy_array_float32_t_to_pmc(a):
        return pmc_make_array_of_float32_t(a.ctypes.data, len(a))

    RegisterPy2PMC(
        is_py = lambda x: isinstance(x, numpy.ndarray) and (x.dtype == numpy.float32),
        py2pmc = numpy_array_float32_t_to_pmc,
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_array_of_float32_t,
        pmc2py = pmc_to_numpy_array_float32_t,
    )
except ImportError: pass


def pmc_is_array_of_float64_t(*args):
  return _PMCNumericArray.pmc_is_array_of_float64_t(*args)
pmc_is_array_of_float64_t = _PMCNumericArray.pmc_is_array_of_float64_t

def info_of_array_of_float64_t(*args):
  return _PMCNumericArray.info_of_array_of_float64_t(*args)
info_of_array_of_float64_t = _PMCNumericArray.info_of_array_of_float64_t

def pmc_make_array_of_float64_t(*args):
  return _PMCNumericArray.pmc_make_array_of_float64_t(*args)
pmc_make_array_of_float64_t = _PMCNumericArray.pmc_make_array_of_float64_t
try:
    import numpy

    def pmc_to_numpy_array_float64_t(p):
        addr, size = info_of_array_of_float64_t(p)
        dtype = numpy.dtype(numpy.float64)
        readonly = not isinstance(p, PMC)
        return pointer_to_ndarray(addr, dtype, size, readonly, p)

    def numpy_array_float64_t_to_pmc(a):
        return pmc_make_array_of_float64_t(a.ctypes.data, len(a))

    RegisterPy2PMC(
        is_py = lambda x: isinstance(x, numpy.ndarray) and (x.dtype == numpy.float64),
        py2pmc = numpy_array_float64_t_to_pmc,
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_array_of_float64_t,
        pmc2py = pmc_to_numpy_array_float64_t,
    )
except ImportError: pass


def pmc_is_array_of_complex64_t(*args):
  return _PMCNumericArray.pmc_is_array_of_complex64_t(*args)
pmc_is_array_of_complex64_t = _PMCNumericArray.pmc_is_array_of_complex64_t

def info_of_array_of_complex64_t(*args):
  return _PMCNumericArray.info_of_array_of_complex64_t(*args)
info_of_array_of_complex64_t = _PMCNumericArray.info_of_array_of_complex64_t

def pmc_make_array_of_complex64_t(*args):
  return _PMCNumericArray.pmc_make_array_of_complex64_t(*args)
pmc_make_array_of_complex64_t = _PMCNumericArray.pmc_make_array_of_complex64_t
try:
    import numpy

    def pmc_to_numpy_array_complex64_t(p):
        addr, size = info_of_array_of_complex64_t(p)
        dtype = numpy.dtype(numpy.complex64)
        readonly = not isinstance(p, PMC)
        return pointer_to_ndarray(addr, dtype, size, readonly, p)

    def numpy_array_complex64_t_to_pmc(a):
        return pmc_make_array_of_complex64_t(a.ctypes.data, len(a))

    RegisterPy2PMC(
        is_py = lambda x: isinstance(x, numpy.ndarray) and (x.dtype == numpy.complex64),
        py2pmc = numpy_array_complex64_t_to_pmc,
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_array_of_complex64_t,
        pmc2py = pmc_to_numpy_array_complex64_t,
    )
except ImportError: pass


def pmc_is_array_of_complex128_t(*args):
  return _PMCNumericArray.pmc_is_array_of_complex128_t(*args)
pmc_is_array_of_complex128_t = _PMCNumericArray.pmc_is_array_of_complex128_t

def info_of_array_of_complex128_t(*args):
  return _PMCNumericArray.info_of_array_of_complex128_t(*args)
info_of_array_of_complex128_t = _PMCNumericArray.info_of_array_of_complex128_t

def pmc_make_array_of_complex128_t(*args):
  return _PMCNumericArray.pmc_make_array_of_complex128_t(*args)
pmc_make_array_of_complex128_t = _PMCNumericArray.pmc_make_array_of_complex128_t
try:
    import numpy

    def pmc_to_numpy_array_complex128_t(p):
        addr, size = info_of_array_of_complex128_t(p)
        dtype = numpy.dtype(numpy.complex128)
        readonly = not isinstance(p, PMC)
        return pointer_to_ndarray(addr, dtype, size, readonly, p)

    def numpy_array_complex128_t_to_pmc(a):
        return pmc_make_array_of_complex128_t(a.ctypes.data, len(a))

    RegisterPy2PMC(
        is_py = lambda x: isinstance(x, numpy.ndarray) and (x.dtype == numpy.complex128),
        py2pmc = numpy_array_complex128_t_to_pmc,
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_array_of_complex128_t,
        pmc2py = pmc_to_numpy_array_complex128_t,
    )
except ImportError: pass

# This file is compatible with both classic and new-style classes.


