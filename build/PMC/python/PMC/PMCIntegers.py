# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PMCIntegers', [dirname(__file__)])
        except ImportError:
            import _PMCIntegers
            return _PMCIntegers
        if fp is not None:
            try:
                _mod = imp.load_module('_PMCIntegers', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _PMCIntegers = swig_import_helper()
    del swig_import_helper
else:
    import _PMCIntegers
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


from PMC import *



def pmc_is_int_builtin(*args):
  return _PMCIntegers.pmc_is_int_builtin(*args)
pmc_is_int_builtin = _PMCIntegers.pmc_is_int_builtin

def pmc_to_int_builtin(*args):
  return _PMCIntegers.pmc_to_int_builtin(*args)
pmc_to_int_builtin = _PMCIntegers.pmc_to_int_builtin

def int_builtin_to_pmc(*args):
  return _PMCIntegers.int_builtin_to_pmc(*args)
int_builtin_to_pmc = _PMCIntegers.int_builtin_to_pmc
RegisterPy2PMC(
    is_py = lambda x: type(x) is int,
    py2pmc = int_builtin_to_pmc,
)

RegisterPMC2Py(
    is_pmc = pmc_is_int_builtin,
    pmc2py = lambda x: int(pmc_to_int_builtin(x)),
)



def pmc_is_long_builtin(*args):
  return _PMCIntegers.pmc_is_long_builtin(*args)
pmc_is_long_builtin = _PMCIntegers.pmc_is_long_builtin

def pmc_to_long_builtin(*args):
  return _PMCIntegers.pmc_to_long_builtin(*args)
pmc_to_long_builtin = _PMCIntegers.pmc_to_long_builtin

def long_builtin_to_pmc(*args):
  return _PMCIntegers.long_builtin_to_pmc(*args)
long_builtin_to_pmc = _PMCIntegers.long_builtin_to_pmc
RegisterPy2PMC(
    is_py = lambda x: type(x) is long,
    py2pmc = long_builtin_to_pmc,
)

RegisterPMC2Py(
    is_pmc = pmc_is_long_builtin,
    pmc2py = lambda x: long(pmc_to_long_builtin(x)),
)



def pmc_is_int8(*args):
  return _PMCIntegers.pmc_is_int8(*args)
pmc_is_int8 = _PMCIntegers.pmc_is_int8

def pmc_to_int8(*args):
  return _PMCIntegers.pmc_to_int8(*args)
pmc_to_int8 = _PMCIntegers.pmc_to_int8

def int8_to_pmc(*args):
  return _PMCIntegers.int8_to_pmc(*args)
int8_to_pmc = _PMCIntegers.int8_to_pmc
try:
    import numpy

    RegisterPy2PMC(
        is_py = lambda x: type(x) is numpy.int8,
        py2pmc = lambda x: int8_to_pmc(long(x)),
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_int8,
        pmc2py = lambda x: numpy.int8(pmc_to_int8(x)),
    )
except ImportError: pass

import ctypes

RegisterPy2PMC(
    is_py = lambda x: type(x) is ctypes.c_int8,
    py2pmc = lambda x: int8_to_pmc(x.value),)

RegisterPMC2Py(
    is_pmc = pmc_is_int8,
    pmc2py = lambda x: ctypes.c_int8(pmc_to_int8(x)),
)



def pmc_is_int16(*args):
  return _PMCIntegers.pmc_is_int16(*args)
pmc_is_int16 = _PMCIntegers.pmc_is_int16

def pmc_to_int16(*args):
  return _PMCIntegers.pmc_to_int16(*args)
pmc_to_int16 = _PMCIntegers.pmc_to_int16

def int16_to_pmc(*args):
  return _PMCIntegers.int16_to_pmc(*args)
int16_to_pmc = _PMCIntegers.int16_to_pmc
try:
    import numpy

    RegisterPy2PMC(
        is_py = lambda x: type(x) is numpy.int16,
        py2pmc = lambda x: int16_to_pmc(long(x)),
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_int16,
        pmc2py = lambda x: numpy.int16(pmc_to_int16(x)),
    )
except ImportError: pass

import ctypes

RegisterPy2PMC(
    is_py = lambda x: type(x) is ctypes.c_int16,
    py2pmc = lambda x: int16_to_pmc(x.value),)

RegisterPMC2Py(
    is_pmc = pmc_is_int16,
    pmc2py = lambda x: ctypes.c_int16(pmc_to_int16(x)),
)



def pmc_is_int32(*args):
  return _PMCIntegers.pmc_is_int32(*args)
pmc_is_int32 = _PMCIntegers.pmc_is_int32

def pmc_to_int32(*args):
  return _PMCIntegers.pmc_to_int32(*args)
pmc_to_int32 = _PMCIntegers.pmc_to_int32

def int32_to_pmc(*args):
  return _PMCIntegers.int32_to_pmc(*args)
int32_to_pmc = _PMCIntegers.int32_to_pmc
try:
    import numpy

    RegisterPy2PMC(
        is_py = lambda x: type(x) is numpy.int32,
        py2pmc = lambda x: int32_to_pmc(long(x)),
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_int32,
        pmc2py = lambda x: numpy.int32(pmc_to_int32(x)),
    )
except ImportError: pass

import ctypes

RegisterPy2PMC(
    is_py = lambda x: type(x) is ctypes.c_int32,
    py2pmc = lambda x: int32_to_pmc(x.value),)

RegisterPMC2Py(
    is_pmc = pmc_is_int32,
    pmc2py = lambda x: ctypes.c_int32(pmc_to_int32(x)),
)



def pmc_is_int64(*args):
  return _PMCIntegers.pmc_is_int64(*args)
pmc_is_int64 = _PMCIntegers.pmc_is_int64

def pmc_to_int64(*args):
  return _PMCIntegers.pmc_to_int64(*args)
pmc_to_int64 = _PMCIntegers.pmc_to_int64

def int64_to_pmc(*args):
  return _PMCIntegers.int64_to_pmc(*args)
int64_to_pmc = _PMCIntegers.int64_to_pmc
try:
    import numpy

    RegisterPy2PMC(
        is_py = lambda x: type(x) is numpy.int64,
        py2pmc = lambda x: int64_to_pmc(long(x)),
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_int64,
        pmc2py = lambda x: numpy.int64(pmc_to_int64(x)),
    )
except ImportError: pass

import ctypes

RegisterPy2PMC(
    is_py = lambda x: type(x) is ctypes.c_int64,
    py2pmc = lambda x: int64_to_pmc(x.value),)

RegisterPMC2Py(
    is_pmc = pmc_is_int64,
    pmc2py = lambda x: ctypes.c_int64(pmc_to_int64(x)),
)



def pmc_is_uint8(*args):
  return _PMCIntegers.pmc_is_uint8(*args)
pmc_is_uint8 = _PMCIntegers.pmc_is_uint8

def pmc_to_uint8(*args):
  return _PMCIntegers.pmc_to_uint8(*args)
pmc_to_uint8 = _PMCIntegers.pmc_to_uint8

def uint8_to_pmc(*args):
  return _PMCIntegers.uint8_to_pmc(*args)
uint8_to_pmc = _PMCIntegers.uint8_to_pmc
try:
    import numpy

    RegisterPy2PMC(
        is_py = lambda x: type(x) is numpy.uint8,
        py2pmc = lambda x: uint8_to_pmc(long(x)),
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_uint8,
        pmc2py = lambda x: numpy.uint8(pmc_to_uint8(x)),
    )
except ImportError: pass

import ctypes

RegisterPy2PMC(
    is_py = lambda x: type(x) is ctypes.c_uint8,
    py2pmc = lambda x: uint8_to_pmc(x.value),)

RegisterPMC2Py(
    is_pmc = pmc_is_uint8,
    pmc2py = lambda x: ctypes.c_uint8(pmc_to_uint8(x)),
)



def pmc_is_uint16(*args):
  return _PMCIntegers.pmc_is_uint16(*args)
pmc_is_uint16 = _PMCIntegers.pmc_is_uint16

def pmc_to_uint16(*args):
  return _PMCIntegers.pmc_to_uint16(*args)
pmc_to_uint16 = _PMCIntegers.pmc_to_uint16

def uint16_to_pmc(*args):
  return _PMCIntegers.uint16_to_pmc(*args)
uint16_to_pmc = _PMCIntegers.uint16_to_pmc
try:
    import numpy

    RegisterPy2PMC(
        is_py = lambda x: type(x) is numpy.uint16,
        py2pmc = lambda x: uint16_to_pmc(long(x)),
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_uint16,
        pmc2py = lambda x: numpy.uint16(pmc_to_uint16(x)),
    )
except ImportError: pass

import ctypes

RegisterPy2PMC(
    is_py = lambda x: type(x) is ctypes.c_uint16,
    py2pmc = lambda x: uint16_to_pmc(x.value),)

RegisterPMC2Py(
    is_pmc = pmc_is_uint16,
    pmc2py = lambda x: ctypes.c_uint16(pmc_to_uint16(x)),
)



def pmc_is_uint32(*args):
  return _PMCIntegers.pmc_is_uint32(*args)
pmc_is_uint32 = _PMCIntegers.pmc_is_uint32

def pmc_to_uint32(*args):
  return _PMCIntegers.pmc_to_uint32(*args)
pmc_to_uint32 = _PMCIntegers.pmc_to_uint32

def uint32_to_pmc(*args):
  return _PMCIntegers.uint32_to_pmc(*args)
uint32_to_pmc = _PMCIntegers.uint32_to_pmc
try:
    import numpy

    RegisterPy2PMC(
        is_py = lambda x: type(x) is numpy.uint32,
        py2pmc = lambda x: uint32_to_pmc(long(x)),
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_uint32,
        pmc2py = lambda x: numpy.uint32(pmc_to_uint32(x)),
    )
except ImportError: pass

import ctypes

RegisterPy2PMC(
    is_py = lambda x: type(x) is ctypes.c_uint32,
    py2pmc = lambda x: uint32_to_pmc(x.value),)

RegisterPMC2Py(
    is_pmc = pmc_is_uint32,
    pmc2py = lambda x: ctypes.c_uint32(pmc_to_uint32(x)),
)



def pmc_is_uint64(*args):
  return _PMCIntegers.pmc_is_uint64(*args)
pmc_is_uint64 = _PMCIntegers.pmc_is_uint64

def pmc_to_uint64(*args):
  return _PMCIntegers.pmc_to_uint64(*args)
pmc_to_uint64 = _PMCIntegers.pmc_to_uint64

def uint64_to_pmc(*args):
  return _PMCIntegers.uint64_to_pmc(*args)
uint64_to_pmc = _PMCIntegers.uint64_to_pmc
try:
    import numpy

    RegisterPy2PMC(
        is_py = lambda x: type(x) is numpy.uint64,
        py2pmc = lambda x: uint64_to_pmc(long(x)),
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_uint64,
        pmc2py = lambda x: numpy.uint64(pmc_to_uint64(x)),
    )
except ImportError: pass

import ctypes

RegisterPy2PMC(
    is_py = lambda x: type(x) is ctypes.c_uint64,
    py2pmc = lambda x: uint64_to_pmc(x.value),)

RegisterPMC2Py(
    is_pmc = pmc_is_uint64,
    pmc2py = lambda x: ctypes.c_uint64(pmc_to_uint64(x)),
)



def pmc_is_long(*args):
  return _PMCIntegers.pmc_is_long(*args)
pmc_is_long = _PMCIntegers.pmc_is_long

def pmc_to_long(*args):
  return _PMCIntegers.pmc_to_long(*args)
pmc_to_long = _PMCIntegers.pmc_to_long

def long_to_pmc(*args):
  return _PMCIntegers.long_to_pmc(*args)
long_to_pmc = _PMCIntegers.long_to_pmc
try:
    import numpy

    RegisterPy2PMC(
        is_py = lambda x: type(x) is numpy.long,
        py2pmc = lambda x: long_to_pmc(long(x)),
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_long,
        pmc2py = lambda x: numpy.long(pmc_to_long(x)),
    )
except ImportError: pass

import ctypes

RegisterPy2PMC(
    is_py = lambda x: type(x) is ctypes.c_long,
    py2pmc = lambda x: long_to_pmc(x.value),)

RegisterPMC2Py(
    is_pmc = pmc_is_long,
    pmc2py = lambda x: ctypes.c_long(pmc_to_long(x)),
)



def pmc_is_ulong(*args):
  return _PMCIntegers.pmc_is_ulong(*args)
pmc_is_ulong = _PMCIntegers.pmc_is_ulong

def pmc_to_ulong(*args):
  return _PMCIntegers.pmc_to_ulong(*args)
pmc_to_ulong = _PMCIntegers.pmc_to_ulong

def ulong_to_pmc(*args):
  return _PMCIntegers.ulong_to_pmc(*args)
ulong_to_pmc = _PMCIntegers.ulong_to_pmc
try:
    import numpy

    RegisterPy2PMC(
        is_py = lambda x: type(x) is numpy.ulong,
        py2pmc = lambda x: ulong_to_pmc(long(x)),
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_ulong,
        pmc2py = lambda x: numpy.ulong(pmc_to_ulong(x)),
    )
except ImportError: pass

import ctypes

RegisterPy2PMC(
    is_py = lambda x: type(x) is ctypes.c_ulong,
    py2pmc = lambda x: ulong_to_pmc(x.value),)

RegisterPMC2Py(
    is_pmc = pmc_is_ulong,
    pmc2py = lambda x: ctypes.c_ulong(pmc_to_ulong(x)),
)



def pmc_is_longlong(*args):
  return _PMCIntegers.pmc_is_longlong(*args)
pmc_is_longlong = _PMCIntegers.pmc_is_longlong

def pmc_to_longlong(*args):
  return _PMCIntegers.pmc_to_longlong(*args)
pmc_to_longlong = _PMCIntegers.pmc_to_longlong

def longlong_to_pmc(*args):
  return _PMCIntegers.longlong_to_pmc(*args)
longlong_to_pmc = _PMCIntegers.longlong_to_pmc
try:
    import numpy

    RegisterPy2PMC(
        is_py = lambda x: type(x) is numpy.longlong,
        py2pmc = lambda x: longlong_to_pmc(long(x)),
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_longlong,
        pmc2py = lambda x: numpy.longlong(pmc_to_longlong(x)),
    )
except ImportError: pass

import ctypes

RegisterPy2PMC(
    is_py = lambda x: type(x) is ctypes.c_longlong,
    py2pmc = lambda x: longlong_to_pmc(x.value),)

RegisterPMC2Py(
    is_pmc = pmc_is_longlong,
    pmc2py = lambda x: ctypes.c_longlong(pmc_to_longlong(x)),
)



def pmc_is_ulonglong(*args):
  return _PMCIntegers.pmc_is_ulonglong(*args)
pmc_is_ulonglong = _PMCIntegers.pmc_is_ulonglong

def pmc_to_ulonglong(*args):
  return _PMCIntegers.pmc_to_ulonglong(*args)
pmc_to_ulonglong = _PMCIntegers.pmc_to_ulonglong

def ulonglong_to_pmc(*args):
  return _PMCIntegers.ulonglong_to_pmc(*args)
ulonglong_to_pmc = _PMCIntegers.ulonglong_to_pmc
try:
    import numpy

    RegisterPy2PMC(
        is_py = lambda x: type(x) is numpy.ulonglong,
        py2pmc = lambda x: ulonglong_to_pmc(long(x)),
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_ulonglong,
        pmc2py = lambda x: numpy.ulonglong(pmc_to_ulonglong(x)),
    )
except ImportError: pass

import ctypes

RegisterPy2PMC(
    is_py = lambda x: type(x) is ctypes.c_ulonglong,
    py2pmc = lambda x: ulonglong_to_pmc(x.value),)

RegisterPMC2Py(
    is_pmc = pmc_is_ulonglong,
    pmc2py = lambda x: ctypes.c_ulonglong(pmc_to_ulonglong(x)),
)


# This file is compatible with both classic and new-style classes.


