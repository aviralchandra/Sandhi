# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PMCIndex', [dirname(__file__)])
        except ImportError:
            import _PMCIndex
            return _PMCIndex
        if fp is not None:
            try:
                _mod = imp.load_module('_PMCIndex', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _PMCIndex = swig_import_helper()
    del swig_import_helper
else:
    import _PMCIndex
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class boost_intrusive_ptr_pmc_impl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, boost_intrusive_ptr_pmc_impl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, boost_intrusive_ptr_pmc_impl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _PMCIndex.new_boost_intrusive_ptr_pmc_impl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PMCIndex.delete_boost_intrusive_ptr_pmc_impl
    __del__ = lambda self : None;
boost_intrusive_ptr_pmc_impl_swigregister = _PMCIndex.boost_intrusive_ptr_pmc_impl_swigregister
boost_intrusive_ptr_pmc_impl_swigregister(boost_intrusive_ptr_pmc_impl)

class PMCC(boost_intrusive_ptr_pmc_impl):
    __swig_setmethods__ = {}
    for _s in [boost_intrusive_ptr_pmc_impl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMCC, name, value)
    __swig_getmethods__ = {}
    for _s in [boost_intrusive_ptr_pmc_impl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PMCC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _PMCIndex.new_PMCC()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PMCIndex.delete_PMCC
    __del__ = lambda self : None;
    def unique(self): return _PMCIndex.PMCC_unique(self)
    def use_count(self): return _PMCIndex.PMCC_use_count(self)
    def type(self): return _PMCIndex.PMCC_type(self)
    def intern(self): return _PMCIndex.PMCC_intern(self)
    def is_intern(self): return _PMCIndex.PMCC_is_intern(self)
    def eq(self, *args): return _PMCIndex.PMCC_eq(self, *args)
    __swig_getmethods__["serialize"] = lambda x: _PMCIndex.PMCC_serialize
    if _newclass:serialize = staticmethod(_PMCIndex.PMCC_serialize)
    __swig_getmethods__["deserialize"] = lambda x: _PMCIndex.PMCC_deserialize
    if _newclass:deserialize = staticmethod(_PMCIndex.PMCC_deserialize)
    def __str__(self, *args): return _PMCIndex.PMCC___str__(self, *args)
    def __nonzero__(self, *args): return _PMCIndex.PMCC___nonzero__(self, *args)
    def _equal(self, *args): return _PMCIndex.PMCC__equal(self, *args)
    def __eq__(self, rhs):
        if not isinstance(rhs, PMCC): return False
        return self._equal(rhs)

    def __call__(self):
        import PMC
        return PMC.PMC2Py(self)

PMCC_swigregister = _PMCIndex.PMCC_swigregister
PMCC_swigregister(PMCC)

def PMCC_serialize(*args):
  return _PMCIndex.PMCC_serialize(*args)
PMCC_serialize = _PMCIndex.PMCC_serialize

def PMCC_deserialize(*args):
  return _PMCIndex.PMCC_deserialize(*args)
PMCC_deserialize = _PMCIndex.PMCC_deserialize

class PMC(PMCC):
    __swig_setmethods__ = {}
    for _s in [PMCC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMC, name, value)
    __swig_getmethods__ = {}
    for _s in [PMCC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PMC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _PMCIndex.new_PMC()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PMCIndex.delete_PMC
    __del__ = lambda self : None;
PMC_swigregister = _PMCIndex.PMC_swigregister
PMC_swigregister(PMC)


def PMC_M(*args):
  return _PMCIndex.PMC_M(*args)
PMC_M = _PMCIndex.PMC_M
from PMC import *


# This file is compatible with both classic and new-style classes.


