# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PMCDict', [dirname(__file__)])
        except ImportError:
            import _PMCDict
            return _PMCDict
        if fp is not None:
            try:
                _mod = imp.load_module('_PMCDict', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _PMCDict = swig_import_helper()
    del swig_import_helper
else:
    import _PMCDict
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


from PMC import *


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PMCDict.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _PMCDict.SwigPyIterator_value(self)
    def incr(self, n = 1): return _PMCDict.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _PMCDict.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _PMCDict.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _PMCDict.SwigPyIterator_equal(self, *args)
    def copy(self): return _PMCDict.SwigPyIterator_copy(self)
    def next(self): return _PMCDict.SwigPyIterator_next(self)
    def __next__(self): return _PMCDict.SwigPyIterator___next__(self)
    def previous(self): return _PMCDict.SwigPyIterator_previous(self)
    def advance(self, *args): return _PMCDict.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _PMCDict.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _PMCDict.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _PMCDict.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _PMCDict.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _PMCDict.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _PMCDict.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _PMCDict.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class PMCDict(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMCDict, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PMCDict, name)
    __repr__ = _swig_repr
    def iterator(self): return _PMCDict.PMCDict_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _PMCDict.PMCDict___nonzero__(self)
    def __bool__(self): return _PMCDict.PMCDict___bool__(self)
    def __len__(self): return _PMCDict.PMCDict___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _PMCDict.PMCDict___getitem__(self, *args)
    def __delitem__(self, *args): return _PMCDict.PMCDict___delitem__(self, *args)
    def has_key(self, *args): return _PMCDict.PMCDict_has_key(self, *args)
    def keys(self): return _PMCDict.PMCDict_keys(self)
    def values(self): return _PMCDict.PMCDict_values(self)
    def items(self): return _PMCDict.PMCDict_items(self)
    def __contains__(self, *args): return _PMCDict.PMCDict___contains__(self, *args)
    def key_iterator(self): return _PMCDict.PMCDict_key_iterator(self)
    def value_iterator(self): return _PMCDict.PMCDict_value_iterator(self)
    def __setitem__(self, *args): return _PMCDict.PMCDict___setitem__(self, *args)
    def asdict(self): return _PMCDict.PMCDict_asdict(self)
    def __init__(self, *args): 
        this = _PMCDict.new_PMCDict(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _PMCDict.PMCDict_empty(self)
    def size(self): return _PMCDict.PMCDict_size(self)
    def clear(self): return _PMCDict.PMCDict_clear(self)
    def swap(self, *args): return _PMCDict.PMCDict_swap(self, *args)
    def get_allocator(self): return _PMCDict.PMCDict_get_allocator(self)
    def begin(self): return _PMCDict.PMCDict_begin(self)
    def end(self): return _PMCDict.PMCDict_end(self)
    def rbegin(self): return _PMCDict.PMCDict_rbegin(self)
    def rend(self): return _PMCDict.PMCDict_rend(self)
    def count(self, *args): return _PMCDict.PMCDict_count(self, *args)
    def erase(self, *args): return _PMCDict.PMCDict_erase(self, *args)
    def find(self, *args): return _PMCDict.PMCDict_find(self, *args)
    def lower_bound(self, *args): return _PMCDict.PMCDict_lower_bound(self, *args)
    def upper_bound(self, *args): return _PMCDict.PMCDict_upper_bound(self, *args)
    __swig_destroy__ = _PMCDict.delete_PMCDict
    __del__ = lambda self : None;
PMCDict_swigregister = _PMCDict.PMCDict_swigregister
PMCDict_swigregister(PMCDict)


def pmc_is_swig_dict(*args):
  return _PMCDict.pmc_is_swig_dict(*args)
pmc_is_swig_dict = _PMCDict.pmc_is_swig_dict

def pmc_to_swig_dict(*args):
  return _PMCDict.pmc_to_swig_dict(*args)
pmc_to_swig_dict = _PMCDict.pmc_to_swig_dict

def swig_dict_to_pmc(*args):
  return _PMCDict.swig_dict_to_pmc(*args)
swig_dict_to_pmc = _PMCDict.swig_dict_to_pmc
def swig_dict_to_py_dict(swig_dict):
    d = dict()
    for key in swig_dict.keys():
        value = swig_dict[key]
        d[PMC2Py(key)] = PMC2Py(value)
    return d

def py_dict_to_swig_dict(py_dict):
    d = PMCDict()
    for key, value in py_dict.iteritems():
        d[Py2PMC(key)] = Py2PMC(value)
    return d

RegisterPy2PMC(
    is_py = lambda x: type(x) is dict,
    py2pmc = lambda x: swig_dict_to_pmc(py_dict_to_swig_dict(x)),
)

RegisterPMC2Py(
    is_pmc = pmc_is_swig_dict,
    pmc2py = lambda x: swig_dict_to_py_dict(pmc_to_swig_dict(x)),
)


# This file is compatible with both classic and new-style classes.


