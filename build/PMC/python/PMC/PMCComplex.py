# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PMCComplex', [dirname(__file__)])
        except ImportError:
            import _PMCComplex
            return _PMCComplex
        if fp is not None:
            try:
                _mod = imp.load_module('_PMCComplex', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _PMCComplex = swig_import_helper()
    del swig_import_helper
else:
    import _PMCComplex
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


from PMC import *



def pmc_is_complex64(*args):
  return _PMCComplex.pmc_is_complex64(*args)
pmc_is_complex64 = _PMCComplex.pmc_is_complex64

def pmc_to_complex64(*args):
  return _PMCComplex.pmc_to_complex64(*args)
pmc_to_complex64 = _PMCComplex.pmc_to_complex64

def complex64_to_pmc(*args):
  return _PMCComplex.complex64_to_pmc(*args)
complex64_to_pmc = _PMCComplex.complex64_to_pmc

def pmc_is_complex128(*args):
  return _PMCComplex.pmc_is_complex128(*args)
pmc_is_complex128 = _PMCComplex.pmc_is_complex128

def pmc_to_complex128(*args):
  return _PMCComplex.pmc_to_complex128(*args)
pmc_to_complex128 = _PMCComplex.pmc_to_complex128

def complex128_to_pmc(*args):
  return _PMCComplex.complex128_to_pmc(*args)
complex128_to_pmc = _PMCComplex.complex128_to_pmc
########################################################################
## python complex is a complex128
########################################################################
RegisterPy2PMC(
    is_py = lambda x: type(x) is complex,
    py2pmc = complex128_to_pmc,
)

RegisterPMC2Py(
    is_pmc = pmc_is_complex128,
    pmc2py = pmc_to_complex128,
)

########################################################################
## use other fixed types for complex64
########################################################################
try:
    import numpy

    RegisterPy2PMC(
        is_py = lambda x: type(x) is numpy.complex64,
        #workaround for old numpy.complex64 bug,
        #where complex(numpy.complex64(x)).imag == 0
        #py2pmc = lambda x: complex64_to_pmc(complex(x)),
        py2pmc = lambda x: complex64_to_pmc(complex(x.real, x.imag)),
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_complex64,
        pmc2py = lambda x: numpy.complex64(pmc_to_complex64(x)),
    )

    RegisterPy2PMC(
        is_py = lambda x: type(x) is numpy.complex128,
        py2pmc = lambda x: complex128_to_pmc(complex(x)),
    )

    RegisterPMC2Py(
        is_pmc = pmc_is_complex128,
        pmc2py = lambda x: numpy.complex128(pmc_to_complex128(x)),
    )

except ImportError: pass


# This file is compatible with both classic and new-style classes.


