# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_foo_bar', [dirname(__file__)])
        except ImportError:
            import _foo_bar
            return _foo_bar
        if fp is not None:
            try:
                _mod = imp.load_module('_foo_bar', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _foo_bar = swig_import_helper()
    del swig_import_helper
else:
    import _foo_bar
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class FooBar(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _foo = _swig_property(_foo_bar.FooBar__foo_get, _foo_bar.FooBar__foo_set)
    _bar = _swig_property(_foo_bar.FooBar__bar_get, _foo_bar.FooBar__bar_set)
    def foo(self): return _foo_bar.FooBar_foo(self)
    def bar(self): return _foo_bar.FooBar_bar(self)
    def __init__(self): 
        this = _foo_bar.new_FooBar()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _foo_bar.delete_FooBar
    __del__ = lambda self : None;
FooBar_swigregister = _foo_bar.FooBar_swigregister
FooBar_swigregister(FooBar)

from PMC import *



def pmc_is_swig_foo_bar(*args, **kwargs):
  return _foo_bar.pmc_is_swig_foo_bar(*args, **kwargs)
pmc_is_swig_foo_bar = _foo_bar.pmc_is_swig_foo_bar

def pmc_to_swig_foo_bar(*args, **kwargs):
  return _foo_bar.pmc_to_swig_foo_bar(*args, **kwargs)
pmc_to_swig_foo_bar = _foo_bar.pmc_to_swig_foo_bar

def swig_foo_bar_to_pmc(*args, **kwargs):
  return _foo_bar.swig_foo_bar_to_pmc(*args, **kwargs)
swig_foo_bar_to_pmc = _foo_bar.swig_foo_bar_to_pmc
from foo_bar import *

RegisterPy2PMC(
    is_py = lambda x: type(x) is FooBar,
    py2pmc = swig_foo_bar_to_pmc,
)

RegisterPMC2Py(
    is_pmc = pmc_is_swig_foo_bar,
    pmc2py = pmc_to_swig_foo_bar,
)




